Patch-Source: https://github.com/misterdanb/avizo/pull/19

Display on all monitors and allow to set vertical offset

--- a/src/avizo_client.vala
+++ b/src/avizo_client.vala
@@ -9,6 +9,7 @@
 	public abstract int width { owned get; set; }
 	public abstract int height { owned get; set; }
 	public abstract int padding { owned get; set; }
+	public abstract double y_offset { owned get; set; }
 	public abstract int block_height { owned get; set; }
 	public abstract int block_spacing { owned get; set; }
 	public abstract int block_count { owned get; set; }
@@ -31,6 +32,7 @@
 	private static double _progress = 0.0;
 	private static int _width = 248;
 	private static int _height = 232;
+	private static double _y_offset = 0.75;
 	private static int _padding = 24;
 	private static int _block_height = 10;
 	private static int _block_spacing = 2;
@@ -48,6 +50,7 @@
 		{ "progress", 0, 0, OptionArg.DOUBLE, ref _progress, "Sets the progress in the notification, allowed values range from 0 to 1", "DOUBLE" },
 		{ "width", 0, 0, OptionArg.INT, ref _width, "Sets the width of the notification", "INT" },
 		{ "height", 0, 0, OptionArg.INT, ref _height, "Sets the height of the notification", "INT" },
+		{ "y-offset", 0, 0, OptionArg.DOUBLE, ref _y_offset, "Sets relative offset of the notification from the top of the screen, allowed values range from 0 (top) to 1.0 (bottom)", "DOUBLE" },
 		{ "padding", 0, 0, OptionArg.INT, ref _padding, "Sets the inner padding of the notification", "INT" },
 		{ "block-height", 0, 0, OptionArg.INT, ref _block_height, "Sets the block height of the progress indicator", "INT" },
 		{ "block-spacing", 0, 0, OptionArg.INT, ref _block_spacing, "Sets the spacing between blocks in the progress indicator", "INT" },
@@ -130,6 +133,7 @@
 		_service.width = _width;
 		_service.height = _height;
 		_service.padding = _padding;
+		_service.y_offset = _y_offset;
 		_service.block_height = _block_height;
 		_service.block_spacing = _block_spacing;
 		_service.block_count = _block_count;
--- a/src/avizo_service.vala
+++ b/src/avizo_service.vala
@@ -4,33 +4,29 @@
 [GtkTemplate (ui = "/org/danb/avizo/ui/avizo.ui")]
 public class AvizoWindow : Gtk.Window
 {
-	private string _image_path = "";
 	public string image_path
 	{
-		get { return _image_path; }
 		set
 		{
-			_image_path = value;
-
-			var pixbuf = new Gdk.Pixbuf.from_file(_image_path);
-			image.set_from_pixbuf(pixbuf);
+			if (value != "")
+			{
+				image.set_from_file(value);
+			}
 		}
 	}
 
-	public string _image_resource = "";
 	public string image_resource
 	{
-		get { return _image_resource; }
 		set
 		{
-			_image_resource = value;
-
-			var pixbuf = new Gdk.Pixbuf.from_resource(@"/org/danb/avizo/data/images/$(_image_resource).png");
-			image.set_from_pixbuf(pixbuf);
+			if (value != "")
+			{
+				image.set_from_resource(@"/org/danb/avizo/data/images/$(value).png");
+			}
 		}
 	}
 
-	public double progress { get; set; default = 0.0; }
+	public double progress { get; set; }
 
 	private int _width = 248;
 	public int width
@@ -44,7 +40,7 @@
 		{
 			_width = value;
 
-			set_default_size(_width, _height);
+			set_size_request(_width, _height);
 		}
 	}
 
@@ -60,52 +56,39 @@
 		{
 			_height = value;
 
-			set_default_size(_width, _height);
+			set_size_request(_width, _height);
 		}
 	}
 
-	public int padding { get; set; default = 24; }
+	public int padding { get; set; }
 
-	public int block_height { get; set; default = 10; }
-	public int block_spacing { get; set; default = 2; }
-	public int block_count { get; set; default = 20; }
+	public int block_height { get; set; }
+	public int block_spacing { get; set; }
+	public int block_count { get; set; }
 
-	public Gdk.RGBA bg { get; set; }
+	public Gdk.RGBA background { get; set; default = Gdk.RGBA(); }
 
-	public Gdk.RGBA _fg;
-	public Gdk.RGBA fg
+	public Gdk.RGBA _foreground = Gdk.RGBA();
+	public Gdk.RGBA foreground
 	{
 		get
 		{
-			return _fg;
+			return _foreground;
 		}
 
 		set
 		{
-			_fg = value;
+			_foreground = value;
 
-			image.opacity = double.min(1.0, _fg.alpha * 2.0);
+			image.opacity = double.min(1.0, _foreground.alpha * 2.0);
 		}
 	}
 
 	[GtkChild]
-	private Gtk.Image image;
+	private unowned Gtk.Image image;
 
 	public AvizoWindow()
 	{
-		_width = width;
-		_height = height;
-
-		set_default_size(_width, _height);
-
-		var new_bg = Gdk.RGBA();
-		new_bg.parse("rgba(255, 255, 255, 0.5)");
-		bg = new_bg;
-
-		var new_fg = Gdk.RGBA();
-		new_fg.parse("rgba(0, 0, 0, 0.5)");
-		fg = new_fg;
-
 		var screen = get_screen();
 		var visual = screen.get_rgba_visual();
 		if (visual != null && screen.is_composited())
@@ -114,9 +97,6 @@
 		}
 
 		draw.connect(on_draw);
-		
-		var pixbuf = new Gdk.Pixbuf.from_resource("/org/danb/avizo/data/images/volume_muted.png");
-		image.set_from_pixbuf(pixbuf);
 	}
 
 	private bool on_draw(Gtk.Widget widget, Cairo.Context ctx)
@@ -134,10 +114,10 @@
 		draw_rect(ctx, 0, 0, _width, _height);
 
 		ctx.set_operator(Cairo.Operator.SOURCE);
-		ctx.set_source_rgba(_bg.red, _bg.green, _bg.blue, _bg.alpha);
+		ctx.set_source_rgba(background.red, background.green, background.blue, background.alpha);
 		draw_round_rect(ctx, 0, 0, _width, _height, 16);
 
-		ctx.set_source_rgba(_bg.red, _bg.green, _bg.blue, _bg.alpha / 1.5);
+		ctx.set_source_rgba(background.red, background.green, background.blue, background.alpha / 1.5);
 
 		for (int i = 0; i < block_count; i++)
 		{
@@ -147,7 +127,7 @@
 			               block_height);
 		}
 
-		ctx.set_source_rgba(fg.red, fg.green, fg.blue, fg.alpha);
+		ctx.set_source_rgba(foreground.red, foreground.green, foreground.blue, foreground.alpha);
 
 		for (int i = 0; i < (int) (block_count * progress); i++)
 		{
@@ -200,105 +180,104 @@
 [DBus (name = "org.danb.avizo.service")]
 public class AvizoService : GLib.Object
 {
-	public string image_path
-	{
-		get { return _window.image_path; }
-		set { _window.image_path = value; }
-	}
+	private static string[] props = {
+		"image_path", "image_resource", "progress", "width", "height", "padding",
+		"block_height", "block_spacing", "block_count", "background", "foreground",
+	};
 
-	public string image_resource
-	{
-		get { return _window.image_resource; }
-		set { _window.image_resource = value; }
-	}
+	public string image_path { get; set; default = ""; }
+	public string image_resource { get; set; default = "volume_muted"; }
+	public double progress { get; set; default = 0.0; }
+	public int width { get; set; default = 248; }
+	public int height { get; set; default = 232; }
+	public int padding { get; set; default = 24; }
+	public double y_offset { get; set; default = 0.75; }
+	public int block_height { get; set; default = 10; }
+	public int block_spacing { get; set; default = 2; }
+	public int block_count { get; set; default = 20; }
+	public Gdk.RGBA background { get; set; default = rgba(255, 255, 255, 0.5); }
+	public Gdk.RGBA foreground { get; set; default = rgba(0, 0, 0, 0.5); }
 
-	public double progress
-	{
-		get { return _window.progress; }
-		set { _window.progress = value; }
-	}
+	private Array<AvizoWindow> _windows = new Array<AvizoWindow>();
+	private int _open_timeouts = 0;
 
-	public int width
+	public void show(double seconds) throws DBusError, IOError
 	{
-		get { return _window.width; }
-		set { _window.width = value; }
-	}
+		var display = Gdk.Display.get_default();
+		var monitors = display.get_n_monitors();
 
-	public int height
-	{
-		get { return _window.height; }
-		set { _window.height = value; }
-	}
-	
-	public int padding
-	{
-		get { return _window.padding; }
-		set { _window.padding = value; }
-	}
+		if (_windows.length < monitors)
+		{
+			_windows.set_size(monitors);
+		}
 
-	public int block_height
-	{
-		get { return _window.block_height; }
-		set { _window.block_height = value; }
-	}
+		for (int i = 0; i < monitors; i++)
+		{
+			var window = _windows.index(i);
+			if (window == null)
+			{
+				window = create_window();
+				_windows.insert_val(i, window);
+			}
+			show_window(window, display.get_monitor(i));
+		}
 
-	public int block_spacing
-	{
-		get { return _window.block_spacing; }
-		set { _window.block_spacing = value; }
-	}
+		_open_timeouts++;
+		Timeout.add((int) (seconds * 1000), () =>
+		{
+			_open_timeouts--;
 
-	public int block_count
-	{
-		get { return _window.block_count; }
-		set { _window.block_count = value; }
-	}
+			if (_open_timeouts == 0)
+			{
+				for (int i = 0; i < monitors; i++) {
+					_windows.index(i).hide();
+				}
+			}
 
-	public Gdk.RGBA background
-	{
-		get { return _window.bg; }
-		set { _window.bg = value; }
+			return false;
+		});
 	}
 
-	public Gdk.RGBA foreground
+	private AvizoWindow create_window()
 	{
-		get { return _window.fg; }
-		set { _window.fg = value; }
-	}
+		var window = new AvizoWindow();
 
-	private AvizoWindow _window = null;
-	private int _open_timeouts = 0;
+		foreach (var prop_name in props)
+		{
+			bind_property(prop_name, window, prop_name, BindingFlags.DEFAULT | BindingFlags.SYNC_CREATE);
+		}
 
-	public AvizoService()
-	{
-		_window = new AvizoWindow();
+		GtkLayerShell.init_for_window(window);
+		GtkLayerShell.set_layer(window, GtkLayerShell.Layer.OVERLAY);
+		GtkLayerShell.set_anchor(window, GtkLayerShell.Edge.TOP, true);
+		GtkLayerShell.set_exclusive_zone(window, -1);
+		GtkLayerShell.set_keyboard_interactivity(window, false);
 
-		GtkLayerShell.init_for_window(_window);
-		GtkLayerShell.auto_exclusive_zone_enable(_window);
-		GtkLayerShell.set_layer(_window, GtkLayerShell.Layer.OVERLAY);
-		GtkLayerShell.set_keyboard_interactivity(_window, false);
+		return window;
 	}
 
-	public void show(double seconds) throws DBusError, IOError
+	private void show_window(AvizoWindow window, Gdk.Monitor monitor)
 	{
-		_window.show();
-		_window.queue_draw();
+		GtkLayerShell.set_monitor(window, monitor);
 
-		_open_timeouts++;
-		Timeout.add((int) (seconds * 1000), () =>
-		{
-			_open_timeouts--;
+		var margin = (int) Math.lround((monitor.workarea.height - height) * y_offset);
+		GtkLayerShell.set_margin(window, GtkLayerShell.Edge.TOP, margin);
 
-			if (_open_timeouts == 0)
-			{
-				_window.hide();
-			}
-
-			return false;
-		});
+		window.show();
+		window.queue_draw();
 	}
 }
 
+Gdk.RGBA rgba(double red, double green, double blue, double alpha)
+{
+	var o = Gdk.RGBA();
+	o.red = red;
+	o.green = green;
+	o.blue = blue;
+	o.alpha = alpha;
+	return o;
+}
+
 void on_bus_aquired(DBusConnection conn)
 {
 	try
@@ -320,7 +299,7 @@
 	             () => {},
 	             () => stderr.printf("Could not aquire name\n"));
 
-	AvizoService server = new AvizoService();
+	new AvizoService();
 
 	Gtk.main();
 }

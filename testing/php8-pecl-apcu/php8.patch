From d98c98a602ffc631f2048c88156c844afa19835a Mon Sep 17 00:00:00 2001
From: Remi Collet <remi@remirepo.net>
Date: Mon, 28 Oct 2019 07:28:08 +0100
Subject: [PATCH 01/21] back to dev

---
 package.xml | 27 +++++++++++++++++++++------
 php_apc.h   |  2 +-
 2 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/php_apc.h b/php_apc.h
index 152bff5..b7e97d7 100644
--- a/php_apc.h
+++ b/php_apc.h
@@ -33,7 +33,7 @@
 #include "apc.h"
 #include "apc_globals.h"
 
-#define PHP_APCU_VERSION "5.1.18"
+#define PHP_APCU_VERSION "5.1.19-dev"
 #define PHP_APCU_EXTNAME "apcu"
 
 PHP_APCU_API PHP_FUNCTION(apcu_add);

From ffff6753b59e22c4a3e1dc6c58af54cbf6726380 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Tue, 29 Oct 2019 17:25:49 +0100
Subject: [PATCH 02/21] Fix apcu_store() with integer keys

Fixes #388.
---
 php_apc.c                           | 10 ++++++----
 tests/apc_store_array_int_keys.phpt | 26 ++++++++++++++++++++++++++
 2 files changed, 32 insertions(+), 4 deletions(-)
 create mode 100644 tests/apc_store_array_int_keys.phpt

diff --git a/php_apc.c b/php_apc.c
index ad9351d..65863a1 100644
--- a/php_apc.c
+++ b/php_apc.c
@@ -475,12 +475,14 @@ static void apc_store_helper(INTERNAL_FUNCTION_PARAMETERS, const zend_bool exclu
 		ZEND_HASH_FOREACH_KEY_VAL(hash, hkey_idx, hkey, hentry) {
 			ZVAL_DEREF(hentry);
 			if (hkey) {
-				if (!apc_cache_store(apc_user_cache, hkey, hentry, (uint32_t) ttl, exclusive)) {
-					zend_hash_add_new(Z_ARRVAL_P(return_value), hkey, &fail_zv);
-				}
+				zend_string_addref(hkey);
 			} else {
-				zend_hash_index_add_new(Z_ARRVAL_P(return_value), hkey_idx, &fail_zv);
+				hkey = zend_long_to_str(hkey_idx);
+			}
+			if (!apc_cache_store(apc_user_cache, hkey, hentry, (uint32_t) ttl, exclusive)) {
+				zend_symtable_add_new(Z_ARRVAL_P(return_value), hkey, &fail_zv);
 			}
+			zend_string_release(hkey);
 		} ZEND_HASH_FOREACH_END();
 		return;
 	} else if (Z_TYPE_P(key) == IS_STRING) {
diff --git a/tests/apc_store_array_int_keys.phpt b/tests/apc_store_array_int_keys.phpt
new file mode 100644
index 0000000..654f70c
--- /dev/null
+++ b/tests/apc_store_array_int_keys.phpt
@@ -0,0 +1,26 @@
+--TEST--
+apcu_store() with int keys in array should convert them to string
+--SKIPIF--
+<?php
+require_once(__DIR__ . '/skipif.inc');
+?>
+--INI--
+apc.enabled=1
+apc.enable_cli=1
+--FILE--
+<?php
+
+var_dump(apcu_add(["123" => "test"]));
+var_dump(apcu_store(["123" => "test"]));
+var_dump(apcu_add(["123" => "test"]));
+
+?>
+--EXPECT--
+array(0) {
+}
+array(0) {
+}
+array(1) {
+  [123]=>
+  int(-1)
+}

From 12845d5957b8af7c356e31f0d1be3d72986aab26 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Sat, 15 Feb 2020 11:09:22 +0100
Subject: [PATCH 05/21] Fork test for PHP 8

---
 tests/apc_store_reference.phpt      |  2 ++
 tests/apc_store_reference_php8.phpt | 26 ++++++++++++++++++++++++++
 2 files changed, 28 insertions(+)
 create mode 100644 tests/apc_store_reference_php8.phpt

diff --git a/tests/apc_store_reference.phpt b/tests/apc_store_reference.phpt
index 2228899..d2cb991 100644
--- a/tests/apc_store_reference.phpt
+++ b/tests/apc_store_reference.phpt
@@ -4,6 +4,8 @@ The outermost value should always be a value, not a reference
 apc.enabled=1
 apc.enable_cli=1
 apc.serializer=default
+--SKIPIF--
+<?php if (PHP_VERSION_ID >= 80000) die('skip Requires PHP < 8.0.0'); ?>
 --FILE--
 <?php
 
diff --git a/tests/apc_store_reference_php8.phpt b/tests/apc_store_reference_php8.phpt
new file mode 100644
index 0000000..1eae4bb
--- /dev/null
+++ b/tests/apc_store_reference_php8.phpt
@@ -0,0 +1,26 @@
+--TEST--
+The outermost value should always be a value, not a reference
+--INI--
+apc.enabled=1
+apc.enable_cli=1
+apc.serializer=default
+--SKIPIF--
+<?php if (PHP_VERSION_ID < 80000) die('skip Requires PHP >= 8.0.0'); ?>
+--FILE--
+<?php
+
+/* The output is different for the php serializer, because it does not replicate the
+ * cycle involving the top-level value. Instead the cycle is placed one level lower.
+ * I believe this is a bug in the php serializer. */
+
+$value = [&$value];
+apcu_store(["key" => &$value]);
+$result = apcu_fetch("key");
+var_dump($result);
+
+?>
+--EXPECT--
+array(1) {
+  [0]=>
+  *RECURSION*
+}

From c6330490379f0ede1d8cdab1a992255adf84dab6 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Tue, 3 Mar 2020 11:12:43 +0100
Subject: [PATCH 06/21] Add arginfo for apcu_inc_request_time

This is required in PHP 8.
---
 apc_arginfo.h | 4 ++++
 php_apc.c     | 2 +-
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/apc_arginfo.h b/apc_arginfo.h
index 0bd61c9..8ba2686 100644
--- a/apc_arginfo.h
+++ b/apc_arginfo.h
@@ -76,6 +76,10 @@ ZEND_BEGIN_ARG_INFO_EX(arginfo_apcu_entry, 0, 0, 2)
 	ZEND_ARG_TYPE_INFO(0, generator, IS_CALLABLE, 0)
 	ZEND_ARG_TYPE_INFO(0, ttl, IS_LONG, 0)
 ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_apcu_inc_request_time, 0, 0, 0)
+	ZEND_ARG_INFO(0, by)
+ZEND_END_ARG_INFO()
 /* }}} */
 
 #endif
diff --git a/php_apc.c b/php_apc.c
index 65863a1..c95a0dd 100644
--- a/php_apc.c
+++ b/php_apc.c
@@ -800,7 +800,7 @@ zend_function_entry apcu_functions[] = {
 	PHP_FE(apcu_exists,             arginfo_apcu_exists)
 	PHP_FE(apcu_entry,				arginfo_apcu_entry)
 #ifdef APC_DEBUG
-	PHP_FE(apcu_inc_request_time,   NULL)
+	PHP_FE(apcu_inc_request_time,   arginfo_apcu_inc_request_time)
 #endif
 	PHP_FE_END
 };

From 0c9bbb8f77753ec958c7f3c6c3e539a3284af6c3 Mon Sep 17 00:00:00 2001
From: Timo Tijhof <krinklemail@gmail.com>
Date: Wed, 11 Mar 2020 01:56:32 +0000
Subject: [PATCH 07/21] Set apc.use_request_time=0 by default

The default used to be 1, which meant that the effective TTL
upon storing and fetching keys was backdated to the beginning
of the web request.

This means values are not stored as long as users might expect,
and might also appear valid longer than expected.

For example, during POST request that 2s and stores a value in
APCu with a TTL of 500ms, the value effectively can't be re-used
by other requests as 0.5 - 2 <= 0.

Closes https://github.com/krakjoe/apcu/issues/391.
---
 php_apc.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/php_apc.c b/php_apc.c
index c95a0dd..95272b1 100644
--- a/php_apc.c
+++ b/php_apc.c
@@ -93,7 +93,7 @@ static void php_apc_init_globals(zend_apcu_globals* apcu_globals)
 	apcu_globals->smart = 0;
 	apcu_globals->preload_path = NULL;
 	apcu_globals->coredump_unmap = 0;
-	apcu_globals->use_request_time = 1;
+	apcu_globals->use_request_time = 0;
 	apcu_globals->serializer_name = NULL;
 	apcu_globals->recursion = 0;
 }
@@ -151,7 +151,7 @@ STD_PHP_INI_BOOLEAN("apc.enable_cli",   "0",    PHP_INI_SYSTEM, OnUpdateBool,
 STD_PHP_INI_BOOLEAN("apc.slam_defense", "0",    PHP_INI_SYSTEM, OnUpdateBool,              slam_defense,     zend_apcu_globals, apcu_globals)
 STD_PHP_INI_ENTRY("apc.preload_path", (char*)NULL,              PHP_INI_SYSTEM, OnUpdateString,       preload_path,  zend_apcu_globals, apcu_globals)
 STD_PHP_INI_BOOLEAN("apc.coredump_unmap", "0", PHP_INI_SYSTEM, OnUpdateBool, coredump_unmap, zend_apcu_globals, apcu_globals)
-STD_PHP_INI_BOOLEAN("apc.use_request_time", "1", PHP_INI_ALL, OnUpdateBool, use_request_time,  zend_apcu_globals, apcu_globals)
+STD_PHP_INI_BOOLEAN("apc.use_request_time", "0", PHP_INI_ALL, OnUpdateBool, use_request_time,  zend_apcu_globals, apcu_globals)
 STD_PHP_INI_ENTRY("apc.serializer", "php", PHP_INI_SYSTEM, OnUpdateStringUnempty, serializer_name, zend_apcu_globals, apcu_globals)
 PHP_INI_END()
 

From ecfd5fbd70528706d75fac22b9f4d3a2ef248b90 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Wed, 15 Apr 2020 09:54:46 +0200
Subject: [PATCH 08/21] Fix always-true assert

Check condition before the subtraction, otherwise it's always true.

This fixes a -Wtype-limits warning.
---
 apc_sma.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/apc_sma.c b/apc_sma.c
index da457d3..3150d92 100644
--- a/apc_sma.c
+++ b/apc_sma.c
@@ -234,8 +234,8 @@ static APC_HOTSPOT size_t sma_deallocate(void* shmaddr, size_t offset)
 	block_t* nxt;       /* the block after cur */
 	size_t size;        /* size of deallocated block */
 
+	assert(offset >= ALIGNWORD(sizeof(struct block_t)));
 	offset -= ALIGNWORD(sizeof(struct block_t));
-	assert(offset >= 0);
 
 	/* find position of new block in free list */
 	cur = BLOCKAT(offset);

From 9c36db45100d4d27ec33072f4be90f1f5a0108b7 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Wed, 15 Apr 2020 10:01:25 +0200
Subject: [PATCH 09/21] Remove sigaction initializer

This will be initialized by sigaction(). Fixes a missing initializer
warning.
---
 apc_signal.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/apc_signal.c b/apc_signal.c
index aff13c8..22504e5 100644
--- a/apc_signal.c
+++ b/apc_signal.c
@@ -113,7 +113,7 @@ static void apc_rehandle_signal(int signo, siginfo_t *siginfo, void *context)
  */
 static int apc_register_signal(int signo, void (*handler)(int, siginfo_t*, void*))
 {
-	struct sigaction sa = {{0}};
+	struct sigaction sa;
 	apc_signal_entry_t p_sig = {0};
 
 	if (sigaction(signo, NULL, &sa) == 0) {

From 11f158c7153e801938197085fd9c831993e3e1c9 Mon Sep 17 00:00:00 2001
From: "Christoph M. Becker" <cmbecker69@gmx.de>
Date: Mon, 8 Jun 2020 11:06:07 +0200
Subject: [PATCH 14/21] Update PHP versions to build

We always use latest PHP revision now.

On PHP 7.4, some tests fail due to spurious output of PHP's built-in
Webserver, which writes some output to stderr which is not caught in
server_test.inc, because the `suppress_output` option of `proc_open()`
does not suppress/ignore stderr, but merely ensures that no Windows
dialog boxes for severe errors are shown, what could cause hangs.  We
solve that by redirecting the childs stderr to a pipe.
---
 .appveyor/install.ps1 |  23 +++----
 .appveyor/package.ps1 |   5 +-
 appveyor.yml          | 138 +++++++++++++++++++++---------------------
 tests/server_test.inc |   1 +
 4 files changed, 84 insertions(+), 83 deletions(-)

diff --git a/tests/server_test.inc b/tests/server_test.inc
index 2aede0c..75035a3 100644
--- a/tests/server_test.inc
+++ b/tests/server_test.inc
@@ -44,6 +44,7 @@ function server_start_one($host, $port, $code = 'echo "Hello world";', $php_opts
 			$cmd .= " {$router}";
 		}
 
+		$descriptorspec[2] = array('pipe', 'w');
 		$handle = proc_open(addslashes($cmd), $descriptorspec, $pipes, $doc_root, NULL, array("bypass_shell" => true,  "suppress_errors" => true));
 	} else {
 		$cmd = "exec {$php_executable} -n $php_args -t {$doc_root} -S $host:$port";

From 25aa8e36a43d30ee417a4a7d81ed63ce40286736 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Tue, 9 Jun 2020 17:38:46 +0200
Subject: [PATCH 16/21] Change "recursion" global to unsigned

zend_bool is now bool, which cannot be incremented.
---
 apc_globals.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/apc_globals.h b/apc_globals.h
index 74c8f27..87625c9 100644
--- a/apc_globals.h
+++ b/apc_globals.h
@@ -62,7 +62,7 @@ ZEND_BEGIN_MODULE_GLOBALS(apcu)
 
 	char *serializer_name;       /* the serializer config option */
 
-	volatile zend_bool recursion;
+	volatile unsigned recursion;
 ZEND_END_MODULE_GLOBALS(apcu)
 
 /* (the following is defined in php_apc.c) */

From f9a719c6d0b1b6d6e2c1ae0fd1bd4eaea1585f4b Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Sun, 19 Jul 2020 16:15:48 +0200
Subject: [PATCH 17/21] Fix test for PHP 8

We really don't care what the error message is.
---
 tests/apc_entry_003.phpt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tests/apc_entry_003.phpt b/tests/apc_entry_003.phpt
index f066583..e04bf4b 100644
--- a/tests/apc_entry_003.phpt
+++ b/tests/apc_entry_003.phpt
@@ -13,4 +13,4 @@ $value = apcu_entry("test", function($key) {
 });
 ?>
 --EXPECTF--
-Fatal error: Trait 'T' not found in %s on line %d
+Fatal error: %s

From 12ea021256de10d3e880f0bc4ddbd375c6d7e509 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Mon, 20 Jul 2020 16:20:37 +0200
Subject: [PATCH 18/21] Add missing zpp_none call

---
 php_apc.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/php_apc.c b/php_apc.c
index 95272b1..1cbee9f 100644
--- a/php_apc.c
+++ b/php_apc.c
@@ -502,6 +502,7 @@ static void apc_store_helper(INTERNAL_FUNCTION_PARAMETERS, const zend_bool exclu
 /* {{{ proto bool apcu_enabled(void)
 	returns true when apcu is usable in the current environment */
 PHP_FUNCTION(apcu_enabled) {
+	ZEND_PARSE_PARAMETERS_NONE();
 	RETURN_BOOL(APCG(enabled));
 }
 /* }}} */

From 6d2410f2f4984387c66446fbd80f1af7ffde0665 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Mon, 20 Jul 2020 16:44:57 +0200
Subject: [PATCH 19/21] Restore compatibility with older PHP versions

---
 php_apc.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/php_apc.c b/php_apc.c
index 1cbee9f..e08a770 100644
--- a/php_apc.c
+++ b/php_apc.c
@@ -502,7 +502,9 @@ static void apc_store_helper(INTERNAL_FUNCTION_PARAMETERS, const zend_bool exclu
 /* {{{ proto bool apcu_enabled(void)
 	returns true when apcu is usable in the current environment */
 PHP_FUNCTION(apcu_enabled) {
-	ZEND_PARSE_PARAMETERS_NONE();
+	if (zend_parse_parameters_none() == FAILURE) {
+		return;
+	}
 	RETURN_BOOL(APCG(enabled));
 }
 /* }}} */

From 45e98daced1cfe9d71b520f7cb8076a4bb32d6e6 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Tue, 21 Jul 2020 15:21:08 +0200
Subject: [PATCH 20/21] Fail less hard in APCUIterator if apcu disabled

---
 apc_iterator.c          |  3 ++-
 tests/apc_disabled.phpt | 10 ++++++++++
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/apc_iterator.c b/apc_iterator.c
index 302b086..f601a27 100644
--- a/apc_iterator.c
+++ b/apc_iterator.c
@@ -297,7 +297,8 @@ static void apc_iterator_totals(apc_iterator_t *iterator) {
 void apc_iterator_obj_init(apc_iterator_t *iterator, zval *search, zend_long format, zend_long chunk_size, zend_long list)
 {
 	if (!APCG(enabled)) {
-		apc_error("APC must be enabled to use " APC_ITERATOR_NAME);
+		zend_throw_error(NULL, "APC must be enabled to use " APC_ITERATOR_NAME);
+		return;
 	}
 
 	if (chunk_size < 0) {
diff --git a/tests/apc_disabled.phpt b/tests/apc_disabled.phpt
index 184a759..c3f9adf 100644
--- a/tests/apc_disabled.phpt
+++ b/tests/apc_disabled.phpt
@@ -40,6 +40,13 @@ var_dump(apcu_cas("key", 10, 20));
 echo "\nentry\n";
 var_dump(apcu_entry("key", function() { return 42; }));
 
+echo "\niterator\n";
+try {
+    new APCUIterator;
+} catch (Error $e) {
+    echo $e->getMessage(), "\n";
+}
+
 ?>
 --EXPECTF--
 enabled
@@ -91,3 +98,6 @@ bool(false)
 
 entry
 NULL
+
+iterator
+APC must be enabled to use APCuIterator

From 7a1989e306d78f4bb9276abbad9cf0db35c9d06e Mon Sep 17 00:00:00 2001
From: Remi Collet <remi@remirepo.net>
Date: Wed, 2 Sep 2020 12:07:57 +0200
Subject: [PATCH 21/21] fix #399 relax test for PHP 8

---
 tests/not_enough_shm.phpt | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/tests/not_enough_shm.phpt b/tests/not_enough_shm.phpt
index 0b5ea1b..acb3c31 100644
--- a/tests/not_enough_shm.phpt
+++ b/tests/not_enough_shm.phpt
@@ -8,5 +8,4 @@ apc.entries_hint=1000000
 --FILE--
 Irrelevant
 --EXPECTF--
-%A
-Fatal error: Unable to allocate %d bytes of shared memory for cache structures. Either apc.shm_size is too small or apc.entries_hint too large in Unknown on line 0
+%A: Unable to allocate %d bytes of shared memory for cache structures. Either apc.shm_size is too small or apc.entries_hint too large in Unknown on line 0

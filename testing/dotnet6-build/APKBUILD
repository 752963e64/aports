# Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>
# Contributor: Antoine Martin (ayakael) <dev@ayakael.net>

#
# Variables for dotnet build version 6.0
# This APKBUILD is designed to be the same for version 6.0 and up
# except for the variables in this first section
#

pkgname=dotnet6-build
pkgver=6.0.102
pkgrel=0

# Tag of tarball generator. This may change from usual due to mistakes from upstream
_installertag=v$pkgver-source-build

# this should match what is sourced by source-build's ./prep.sh script
# and, at the very least, the artifacts version sourced, as defined in
# eng/Version.Details.xml by var PrivateSourceBuiltArtifactsPackageVersion
# Sometimes, this needs updating by stage0 scripts, thus it is bumped from this
# version to establish that we are moving away from upstream
_bootstrapver=6.0.102-r0

# LLVM version to be used for this build
_llvmver=12

# Patches to be used. String before '_' refers to repo to patch
# Look for patch notes within each patch for what they fix / where they come from
# build_* patches applies directly to $builddir
_patches="
	aspnetcore_musl-build-fix.patch
	build_copy-sbrp.patch
	build_musl-build-fix.patch
	command-line-api_fix-musl-build.patch
	command-line-api_use-work-tree-with-git.patch
	fsharp_use-work-tree-with-git.patch
	installer_forgotten-MicrosoftAspNetCoreAppRuntimePac.patch
	installer_musl-build-fix.patch
	installer_reprodicible-tarball.patch
	runtime_aarch64-armv7-lld-fix.patch
	runtime_disable-package-validation.patch
	runtime_force-microsoftnetcoreilasmpackageruntimeid-as-musl.patch
	runtime_non-portable-distrorid-fix-alpine.patch
	runtime_rid-alpine-315.patch
	sdk_telemetry-optout.patch
	sdk_add-zsh-compdef-completion-script.patch
	vstest_use-work-tree-with-git.patch
	xliff-tasks_use-work-tree-with.git.patch
	"

# Custom prepare
default_prepare() {
	return
}

# Following for dotnet build version 6.0 and up
_pkgver_macro=${pkgver%.*}
_pkgver_prior=${pkgver%.*.*}
_pkgver_name=${_pkgver_macro//[.0]}
pkgdesc="The .NET $_pkgver_macro bootstrap build"
pkgrel=0
arch="x86_64 aarch64"
# sets dotnet arch depending on alpine arch syntax
case $CARCH in
	x86_64) _dotnet_arch=x64;;
	aarch64) _dotnet_arch=arm64;;
	armv7) _dotnet_arch=arm;;
esac
url=https://www.microsoft.com/net/core
license="MIT"
_bootstrappkg="bootstrap"
makedepends="
	bash
	clang
	cmake
	dotnet$_pkgver_name-$_bootstrappkg=$_bootstrapver
	dotnet$_pkgver_name-$_bootstrappkg-artifacts=$_bootstrapver
	findutils
	git
	grep
	icu-dev
	inetutils-syslogd
	krb5-dev
	libgit2-dev
	libintl
	libunwind-dev
	libxml2-dev
	libxml2-utils
	linux-headers
	lldb-dev
	lld-dev
	llvm$_llvmver-dev
	lttng-ust-dev
	nodejs
	openssl-dev
	zlib-dev
	"
# packages artifacts if building bootstrap
[ "$_bootstrappkg" = "stage0" ] && subpackages="$pkgname-artifacts:artifacts:noarch"

options="!check" # No test suite
source="source-build-tarball-$pkgver.tar.gz::https://tarball $_patches"
builddir="$srcdir"/source-build-tarball-$pkgver
_artifactsdir="/usr/share/dotnet/artifacts/${_bootstrapver%-*}"
_cli_root="$srcdir"/bootstrap

# Custom patch logics
_patch() {
	local i failed=
	if ! have_patches; then
		return 0
	fi
	if [ ! -d "$builddir" ]; then
		error "Is \$builddir set correctly?"
		return 1
	fi

	msg "Deploying patches"
	for i in $source; do
		case ${i%::*} in
			*.patch)
				local package=${i%%_*}
				for j in ${arch/_/-}; do
					if [ -z "${i##*"$j"*}" ] && [ "$CARCH" != "${j/-/_}" ]; then continue 2; fi
				done
				msg "Applying $i to $package"
				cd "$builddir"
				[ "$package" = "build" ] || { cd src/$package.* || { echo "$package does not exist for patch"; failed=$failed $i; continue; }; }
				patch -Np1 -i "$srcdir/$(filename_from_uri $i)" || failed="$failed $i"
			;;
		esac
	done

	if [ -z "$failed" ]; then
		return 0
	fi
	error "The following patches failed to apply:"
	for i in $failed; do
		printf "  %s\n" "$i"
	done
}

# aport for bootstrap is effectively a copy of this aport, except that it
# builds using stage0 bits, which are sourced from Microsoft prebuilts.
# Another major difference is that rather than package build artifacts
# under $dotnet_path/build to be packages later, it send artifacts to
# $dotnet_path/bootstrap, as this is the directory that is sourced by
# _prepare_bootstrap for build.
_update_bootstrap() {
	msg "Updating bootstrap APKBUILD"
	# Copy patches
	rm ../dotnet$_pkgver_name-bootstrap/*.patch || true
	for i in ../dotnet"$_pkgver_name"-build/*.patch; do
		cp $i ${i/$_pkgver_name-build/$_pkgver_name-bootstrap}
	done

	# Generate bootstrap
	{
		echo -n "# "
		echo "Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>"
		echo "# Contributor: Antoine Martin (ayakael) <dev@ayakael.net>"
		echo
		echo "#"
		echo "# This is generated from dotnet$_pkgver_name-build's APKBUILD."
		echo "# Any modifications to be done in that APKBUILD and propagated by"
		echo -n "# executing 'abuild _update_bootstrap'"
		sed \
			-e "s/pkgname=dotnet$_pkgver_name-build/pkgname=dotnet$_pkgver_name-bootstrap/" \
			-e "s/_bootstrappkg=\"bootstrap\"/_bootstrappkg=\"stage0\"/" \
			-e "1,2d" \
			../dotnet$_pkgver_name-build/APKBUILD
	} > ../dotnet$_pkgver_name-bootstrap/APKBUILD
}

# dotnet relies on itself when building, we thus need a bootstrap runtime
# that is copied to write-capable folder
_prepare_bootstrap() {
	msg "Settings up bootstrap"
	cp -r /usr/share/dotnet/bootstrap/${_bootstrapver%-*} "$_cli_root"

	# Corrupt libcoreclrtraceptprovider.so when lttng <=2.13.0
	# is detected as tracing is broken on dotnet platform
	# due to ABI changes
	# See https://github.com/dotnet/runtime/issues/57784.
	if [ -f "/usr/lib/liblttng-ust.so.1 " ]; then
		rm "$_cli_root"/shared/Microsoft.NETCore.App/*/libcoreclrtraceptprovider.so
	fi
}

# Build doesn't set all the right executable bits for the right file types
_fix_executable() {
	# add executable bit
	find "$1" -type f \( \
		-name 'apphost' -o \
		-name 'singlefilehost' -o \
		-name 'lib*so' \
			\) \
		-exec chmod +x '{}' \;

	# remove executable bit
	find "$1" -type f \( \
		-name '*.a' -o \
		-name '*.dll' -o \
		-name '*.h' -o \
		-name '*.json' -o \
		-name '*.pdb' -o \
		-name '*.props' -o \
		-name '*.pubxml' -o \
		-name '*.targets' -o \
		-name '*.txt' -o \
		-name '*.xml' \
			\) \
		-exec chmod -x '{}' \;
}

# dotnet build is a two step process. The first step involves sourcing the
# source code to various components, and then the build can proceed as a second
# step. To be able to assure integrity of sources and permit caching, we want to
# build a tarball that can be checked with checksum. Following function is
# executed automatically in fetch() if tarball is not in SRCDEST.
_build_tarball() {
	deps
	[ -d "$builddir" ] || { mkdir -p "$builddir" && cd "$srcdir"; } && cd "$srcdir"

	# preparations
	[ -d "installer" ] || { git clone https://github.com/dotnet/installer --branch $_installertag && cd installer; }
	_prepare_bootstrap

	# makes tarball reproducible
	patch -p1 -i "$startdir"/installer_reprodicible-tarball.patch

	# without these exports, build still attempts a download of dotnet sdk
	export _InitializeDotNetCli="$_cli_root"
	export DOTNET_INSTALL_DIR="$_cli_root"
	export DotNetBuildFromSource=true

	# following args activate tarball build
	local args="
		/p:ArcadeBuildTarball=true
		/p:TarballDir=$builddir
		/p:TarballFilePath=$SRCDEST/${builddir##*/}.tar.gz
		"
	./build.sh $args | tee -a "$srcdir"/installer/build.log

	# unsets export so they don't bleed into other steps
	unset _InitializeDotNetCli DOTNET_INSTALL_DIR DotNetBuildFromSource
}

fetch() {
	# Builds tarball if not built
	[ -f "$SRCDEST"/${builddir##*/}.tar.gz ] || _build_tarball

	default_fetch
}

prepare() {
	default_prepare

	_patch
	_prepare_bootstrap

	# makes sure Artifacts archive is not expected, else build fails as it
	# expected a file that tells it what artifacts tarball it should unpack
	# As artifacts in Alpine's build process are provided by a package, and
	# installed in a folder, this is pulled using --with-packages
	[ -d "$builddir"/packages/archive ] && rm -r "$builddir"/packages/archive

	# readjusts OfficialBuildId back to current date. By default this is not
	# necessary. Unfortunately, by default source tarball isn't reproducible
	# installer_reprodicible-tarball.patch makes it so, but at the cost of
	# setting OfficialBuildId of certain volatile packages to a date in 1990.
	# Thus, to adequately prepare tarball we have to reset git-info build ids
	# to current date, as expected.
	for i in "$builddir"/git-info/*; do
		sed -i "s|<OfficialBuildId>19900101.1</OfficialBuildId>|<OfficialBuildId>$(date +"%Y%m%d.1")</OfficialBuildId>|" "$i"
	done
}

build() {
	msg "Building $pkgname-$pkgver"

	# logs args, else the output is forwarded to log files which isn't ideal in a
	# pipeline environment
	local args="
		/v:minimal
		/p:LogVerbosity=minimal
		/p:MinimalConsoleLogOutput=true
		"

	# by default, build is tied to environment's Alpine version, thus making
	# build non portable. Ideally bootstrap packages should be portable
	# to permit bootstrapping across distro versions. Unfortunately,
	# source-build doesn't seem to support that just yet, thus the following
	# if statement is left as placeholder. See dotnet/runtime#62942
	[ "$_bootstrappkg" = "stage0" ] && local args="$args
		/p:BuildPortableRuntime=false
		/p:BuildPortableSdk=false
		"

	# PrebuiltPackagesPath needs to be set despite --with-packages,
	# as build tools has an error
	local args="$args /p:PrebuiltPackagesPath=$_artifactsdir"

	# by default, build sources artifacts from tarball in packages/archive
	# SDK from Microsoft. Due to wanting to use self-hosted versions of
	# both of these, they are packaged by stage0 and bootstrap and provided
	# in /usr/share/dotnet/{bootstrap,artifacts}. SDK is then sourced
	# using _prepare_bootstrap function, and then pointed to using
	# --with-sdk arg. Artifacts are sourced using --with-packages. Due to
	# this being a read-only folder, this breaks without build_copy-sbrp.patch
	# which makes build copy SBRP subfolder rather than move it.
	./build.sh \
		--with-sdk "$_cli_root" \
		--with-packages "$_artifactsdir" \
		-- $args | tee -a "$builddir"/build.log
}

package() {
	local subdir=${pkgname/*-}
	local targetdir="$pkgdir"/usr/share/dotnet/$subdir/$pkgver
	# directory creation
	install -dm 755 \
		"$targetdir"/docs \
		"$targetdir"/comp

	# unpack build artifacts to subdir defined by pkgname. If bootstrap, unpacks
	# to bootstrap, if build unpacks to build
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$targetdir"/ --no-same-owner

	# assemble completions
	install -m 755 "$builddir"/src/sdk.*/scripts/register-completions.bash "$targetdir"/comp/
	install -m 755 "$builddir"/src/sdk.*/scripts/register-completions.zsh "$targetdir"/comp/

	# assemble docs
	find "$builddir" -iname 'dotnet*.1' -type f -exec cp '{}' "$targetdir"/docs/ \;

	# some files either should or should not have executable bits
	_fix_executable "$pkgdir"

	# See https://github.com/dotnet/source-build/issues/2579
	find "$pkgdir" -type f -name 'testhost.x86' -delete
	find "$pkgdir" -type f -name 'vstest.console' -delete
}

# build relies on a plethora of nupkgs which are provided by this Artifacts file.
# stage0 sources these from Microsoft, which then allows bootstrap to build
# locally hosted versions. The following unpacks built tarball into directory
# for use by future builds.
artifacts() {
	pkgdesc="Internal package for building .NET $_pkgver_macro Software Development Kit"

	# directory creation
	install -dm 755 \
		"$subpkgdir"/usr/share/dotnet/artifacts/$pkgver \
		"$subpkgdir"/usr/share/licenses

	# extract artifacts to artifacts dir for use by future dotnet builds
	tar -xzf "$builddir"/artifacts/"$_dotnet_arch"/Release/Private.SourceBuilt.Artifacts.*.tar.gz -C "$subpkgdir"/usr/share/dotnet/artifacts/$pkgver/ --no-same-owner \
		--exclude '*Intermediate*'
}

sha512sums="
0159ac8b7294968b4908bd0a49804df1ab1cd67f2099fb279efd53a8876e9f2831ca4165c3d3cf2c0458d223123fac40baf96ee81b7ea31f289d93171fcf6177  source-build-tarball-6.0.102.tar.gz
a2b21c38ed739f9bd18b39a28ef21b940ae32beeb2c8f99575289111e5ecaae40e017a500b3b452ef5df7c7e12dff2f8385acada92ca7507d1ed351c6aa9e311  aspnetcore_musl-build-fix.patch
bbb72fd61156611c0dd87f3d46e7cb36e0d506da84ea466c5e26513e49abf6b5523c87421bcdef85f06a50488cfed5d73b618e1212b35aad82fe2d43b19da3d9  build_copy-sbrp.patch
731003042fa864227520126d617b867e7ccfc89ae468fde5563d429b93f46e791ef1c7fd785a72fe739ec3c09c8f7a8fd20dbdc3e4a12f1857eacde376dd0520  build_musl-build-fix.patch
7806bc888295dbc127b43384511719ef19b0a9b032b4efdd6ea619c0ba105eb7aadf6fa35ba0cb43a4cd98f2267e9f0905f9d574fa3666b634efd5591b6e8212  command-line-api_fix-musl-build.patch
71612ac1d9933335583cf722dc5ecfb37739f662a165cd2afb62bf342e83946955269370da57d3295fa4f781683a2fb6027068584b996efcb33d71e18f7191e2  command-line-api_use-work-tree-with-git.patch
06ed5091e461c160930746768a1f296bdf7f876b0578cdeb93077e623212c0c535b24e406f9408c402e83eac361a33dba2d7dda7ce7140dd23061ebd8a4a466d  fsharp_use-work-tree-with-git.patch
9724b8b4cb52ac41e7d7a49a0dd2c9937ecf5dc096a123f8cbc5302bbb256ccf440cfa12bfba8295070d7eaac25406fa054e2dce8023257da4d2aeb3c54fe6f3  installer_forgotten-MicrosoftAspNetCoreAppRuntimePac.patch
d4ab53d241163e83986895f9abd0faf5a35182791057074b3bc446004aa67845aaf1952a69f7f40a835a5858d6018d30418237d29bc2df7ff02da9bf603655b8  installer_musl-build-fix.patch
fe85d6ee786b74c90d69fe3fed03352570f96613ab03cf15d12530da6b98dffaff8cc9ece3044679486b97841481ece4359b80f81b82e7c96fe1dfc8fb6e2945  installer_reprodicible-tarball.patch
dda6b463af8e0c8342b9c0d1a584f6d6410fb48df9fb0ef3c07d5ee7eb4abf2a29a01bf7a39fc70c2f5986c0b24c7bfe602cbfbeb1157cb0e0fb0eaa7fb03d1c  runtime_aarch64-armv7-lld-fix.patch
79dacbaeb9af252e515028f800efc5c1628be9290007418bf4a219f49d4264b2abab2a89af6cd9ff3c74451fe40d6811f7d3c13b9237da187c419295f4ba1280  runtime_disable-package-validation.patch
cb946dfb27eace2cd5204c77fc7e459c40fac8af364635f543284819856b479470839fa0da8e175c0c75268f219e1dfc4d9fb3d0f707553b67d8b80bbe18d3c4  runtime_force-microsoftnetcoreilasmpackageruntimeid-as-musl.patch
adb7537feb742f9b838323336e891b6e92c017215628ab2742841b6ec5945987d76082c6d42746f84062f0e537bb1d74cfa3989866fb105b9608af23abf17753  runtime_non-portable-distrorid-fix-alpine.patch
c52ee082d61e05098422d3e826023e620c42db02c9a043864968651e7846dc818ce6bb76396812a358690e8d07cda2ca7cfdcbd559c51866c931d4e5e52f384a  runtime_rid-alpine-315.patch
678d13b75a4839a6bfbfd9cdfa057b724fd82c28561b015dfba0d34509b32ad9a2d0946e6b657d7e5d4d1bcea96aafc51f91a4749186895f50d3aba34a4c4954  sdk_telemetry-optout.patch
55afa9c74be6f5a87f1ff5aa44caad094cf620eb4388f6407218acf3d58a878f5565a0e875e95c3dbe0efca1879c120ee4b8076c521bfc9d6069a652c4a4fdd8  sdk_add-zsh-compdef-completion-script.patch
d41ed2c7f4b81be2770d1c6b4bba17cea0772131bee994ebce9ca7acc302b2c15cc1adac6a814b866af04728cd4beb0ca411d218d113922fe32001c485b89c67  vstest_use-work-tree-with-git.patch
4d85a411c4add10072c8b411e05b9ece4696c9409c9a363a0f5ecf2adc6ccb815d868c96941da31a6c4e9d981cede144222155eadac1fbed851989086835d101  xliff-tasks_use-work-tree-with.git.patch
"

From ccf700f5c645f3f9a0de65d2431b47684ee79901 Mon Sep 17 00:00:00 2001
From: Neil Alexander <neilalexander@users.noreply.github.com>
Date: Fri, 5 Feb 2021 23:51:45 +0000
Subject: [PATCH] Fix nil pointer exception in membership updater

---
 roomserver/internal/input/input_membership.go | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/roomserver/internal/input/input_membership.go b/roomserver/internal/input/input_membership.go
index bc646c3c6..b3fbb5dfc 100644
--- a/roomserver/internal/input/input_membership.go
+++ b/roomserver/internal/input/input_membership.go
@@ -106,6 +106,23 @@ func (r *Inputer) updateMembership(
 		// immediately, unless it's a Join update (e.g. profile update).
 		return updates, nil
 	}
+	
+	// In an ideal world, we shouldn't ever have "add" be nil and "remove" be
+	// set, as this implies that we're deleting a state event without replacing
+	// it (a thing that ordinarily shouldn't happen in Matrix). However, state
+	// resets are sadly a thing occasionally and we have to account for that.
+	// Beforehand there used to be a check here which stopped dead if we hit
+	// this scenario, but that meant that the membership table got out of sync
+	// after a state reset, often thinking that the user was still joined to
+	// the room even though the room state said otherwise, and this would prevent
+	// the user from being able to attempt to rejoin the room without modifying
+	// the database. So instead what we'll do is we'll just update the membership
+	// table to say that the user is "leave" and we'll use the old event to
+	// avoid nil pointer exceptions on the code path that follows.
+	if add == nil {
+		add = remove
+		newMembership = gomatrixserverlib.Leave
+	}
 
 	mu, err := updater.MembershipUpdater(targetUserNID, r.isLocalTarget(add))
 	if err != nil {

--- a/runtime/vm/symbols.cc
+++ b/runtime/vm/symbols.cc
@@ -198,7 +198,7 @@
                             const uint8_t* utf8_array,
                             intptr_t array_len) {
   if (array_len == 0 || utf8_array == NULL) {
-    return FromLatin1(thread, reinterpret_cast<uint8_t*>(NULL), 0);
+    return FromLatin1(thread, reinterpret_cast<uint8_t*>(0), 0);
   }
   Utf8::Type type;
   intptr_t len = Utf8::CodeUnitCount(utf8_array, array_len, &type);
--- a/runtime/vm/dart_api_impl.cc
+++ b/runtime/vm/dart_api_impl.cc
@@ -1282,7 +1282,7 @@
     if (error != NULL) {
       *error = Utils::StrDup("Isolate creation failed");
     }
-    return reinterpret_cast<Dart_Isolate>(NULL);
+    return reinterpret_cast<Dart_Isolate>(0);
   }
 
   Thread* T = Thread::Current();
@@ -1326,7 +1326,7 @@
   }
 
   Dart::ShutdownIsolate();
-  return reinterpret_cast<Dart_Isolate>(NULL);
+  return reinterpret_cast<Dart_Isolate>(0);
 }
 
 static bool IsServiceOrKernelIsolateName(const char* name) {
--- a/runtime/vm/heap/freelist_test.cc
+++ b/runtime/vm/heap/freelist_test.cc
@@ -151,7 +151,7 @@
   const intptr_t kMinSize = 2 * kWordSize;
   uword* objects = new uword[kBlobSize / kMinSize];
   for (intptr_t i = 0; i < kBlobSize / kMinSize; ++i) {
-    objects[i] = static_cast<uword>(NULL);
+    objects[i] = static_cast<uword>(0);
   }
 
   VirtualMemory* blob = VirtualMemory::Allocate(
--- a/runtime/vm/log_test.cc
+++ b/runtime/vm/log_test.cc
@@ -62,7 +62,7 @@
   test_output_ = NULL;
   Log* log = new Log(TestPrinter);
 
-  EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+  EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
   log->Print("Hello %s", "World");
   EXPECT_STREQ("Hello World", test_output_);
 
@@ -74,23 +74,23 @@
   test_output_ = NULL;
   Log* log = new Log(TestPrinter);
 
-  EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+  EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
   {
     LogBlock ba(thread, log);
     log->Print("APPLE");
-    EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+    EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
     {
       LogBlock ba(thread, log);
       log->Print("BANANA");
-      EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+      EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
     }
-    EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+    EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
     {
       LogBlock ba(thread, log);
       log->Print("PEAR");
-      EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+      EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
     }
-    EXPECT_EQ(reinterpret_cast<const char*>(NULL), test_output_);
+    EXPECT_EQ(reinterpret_cast<const char*>(0), test_output_);
   }
   EXPECT_STREQ("APPLEBANANAPEAR", test_output_);
   delete log;
--- a/runtime/vm/isolate_test.cc
+++ b/runtime/vm/isolate_test.cc
@@ -17,7 +17,7 @@
   Dart_Isolate isolate = TestCase::CreateTestIsolate();
   EXPECT_EQ(isolate, Dart_CurrentIsolate());
   Dart_ShutdownIsolate();
-  EXPECT_EQ(reinterpret_cast<Dart_Isolate>(NULL), Dart_CurrentIsolate());
+  EXPECT_EQ(reinterpret_cast<Dart_Isolate>(0), Dart_CurrentIsolate());
 }
 
 // Test to ensure that an exception is thrown if no isolate creation

diff --git a/src/3rdparty/chromium/base/process/process_metrics_posix.cc b/src/3rdparty/chromium/base/process/process_metrics_posix.cc
index 49f195787..79269f648 100644
--- a/src/3rdparty/chromium/base/process/process_metrics_posix.cc
+++ b/src/3rdparty/chromium/base/process/process_metrics_posix.cc
@@ -105,7 +105,7 @@ void IncreaseFdLimitTo(unsigned int max_descriptors) {
 
 #endif  // !defined(OS_FUCHSIA)
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_ANDROID)
+#if (defined(OS_LINUX) && defined(__GLIBC__)) || defined(OS_CHROMEOS) || defined(OS_ANDROID)
 namespace {
 
 size_t GetMallocUsageMallinfo() {
@@ -127,7 +127,7 @@ size_t GetMallocUsageMallinfo() {
 }
 
 }  // namespace
-#endif  // defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_ANDROID)
+#endif  // (defined(OS_LINUX) && defined(__GLIBC__)) || defined(OS_CHROMEOS) || defined(OS_ANDROID)
 
 size_t ProcessMetrics::GetMallocUsage() {
 #if defined(OS_APPLE)
diff --git a/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc b/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc
index 6824e40b1..4a3f894ad 100644
--- a/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc
+++ b/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc
@@ -171,12 +171,12 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
 
 #if BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC)
   ReportPartitionAllocStats(pmd, args.level_of_detail, &total_virtual_size,
-                            &resident_size, &allocated_objects_size);
+          &resident_size, &allocated_objects_size);
 
 #if OS_WIN
   ReportWinHeapStats(args.level_of_detail, pmd, &total_virtual_size,
-                     &resident_size, &allocated_objects_size,
-                     &allocated_objects_count);
+          &resident_size, &allocated_objects_size,
+          &allocated_objects_count);
 #endif
   // TODO(keishi): Add glibc malloc on Android
 #elif BUILDFLAG(USE_TCMALLOC)
@@ -184,10 +184,10 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
       allocator::GetNumericProperty("generic.heap_size", &total_virtual_size);
   DCHECK(res);
   res = allocator::GetNumericProperty("generic.total_physical_bytes",
-                                      &resident_size);
+          &resident_size);
   DCHECK(res);
   res = allocator::GetNumericProperty("generic.current_allocated_bytes",
-                                      &allocated_objects_size);
+          &allocated_objects_size);
   DCHECK(res);
 #elif defined(OS_APPLE)
   malloc_statistics_t stats = {0};
@@ -209,10 +209,10 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
   resident_size = stats.size_in_use;
 #elif defined(OS_WIN)
   ReportWinHeapStats(args.level_of_detail, nullptr, &total_virtual_size,
-                     &resident_size, &allocated_objects_size,
-                     &allocated_objects_count);
+          &resident_size, &allocated_objects_size,
+          &allocated_objects_count);
 #elif defined(OS_FUCHSIA)
-// TODO(fuchsia): Port, see https://crbug.com/706592.
+  // TODO(fuchsia): Port, see https://crbug.com/706592.
 #else
 #if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
 #if __GLIBC_PREREQ(2, 33)
@@ -220,7 +220,7 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
   struct mallinfo2 info = mallinfo2();
 #endif
 #endif  // defined(__GLIBC__) && defined(__GLIBC_PREREQ)
-#if !defined(MALLINFO2_FOUND_IN_LIBC)
+#if defined(__GLIBC__) && !defined(MALLINFO2_FOUND_IN_LIBC)
   struct mallinfo info = mallinfo();
 #endif
 #undef MALLINFO2_FOUND_IN_LIBC
@@ -232,6 +232,8 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
 
   // Total allocated space is given by |uordblks|.
   allocated_objects_size = info.uordblks;
+#else
+  // musl libc does not support mallinfo()
 #endif
 
   MemoryAllocatorDump* outer_dump = pmd->CreateAllocatorDump("malloc");

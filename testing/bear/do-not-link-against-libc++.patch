See: https://github.com/rizsotto/Bear/issues/310

From 9ab52ec3599732950c8df488e97c235c233bc38d Mon Sep 17 00:00:00 2001
From: Laszlo Nagy <rizsotto@gmail.com>
Date: Fri, 9 Oct 2020 15:35:54 +1100
Subject: [PATCH] libexec: remove virtual methods which pulls in libc++ or
 libstdc++

---
 .../intercept-library/library/CMakeLists.txt  |   1 -
 .../library/source/Executor.h                 |   2 +-
 .../intercept-library/library/source/Linker.h |  13 +-
 .../library/source/Resolver.h                 |   8 +-
 .../library/test/ExecutorTest.cc              | 339 ------------------
 .../library/test/LinkerMock.h                 |  53 ---
 .../library/test/ResolverMock.h               |  48 ---
 7 files changed, 11 insertions(+), 453 deletions(-)
 delete mode 100644 source/intercept-library/library/test/ExecutorTest.cc
 delete mode 100644 source/intercept-library/library/test/LinkerMock.h
 delete mode 100644 source/intercept-library/library/test/ResolverMock.h

diff --git a/source/intercept-library/library/CMakeLists.txt b/source/intercept-library/library/CMakeLists.txt
index b206bde4..5865ead1 100644
--- a/source/intercept-library/library/CMakeLists.txt
+++ b/source/intercept-library/library/CMakeLists.txt
@@ -50,7 +50,6 @@ if (ENABLE_UNIT_TESTS)
     add_executable(exec_unit_test
             test/ArrayTest.cc
             test/BufferTest.cc
-            test/ExecutorTest.cc
             test/PathsTest.cc
             test/SessionTest.cc
             )
diff --git a/source/intercept-library/library/source/Executor.h b/source/intercept-library/library/source/Executor.h
index b7f43364..c20ecf2e 100644
--- a/source/intercept-library/library/source/Executor.h
+++ b/source/intercept-library/library/source/Executor.h
@@ -23,7 +23,7 @@
 
 namespace el {
 
-    class Linker;
+    struct Linker;
     struct Session;
     class Resolver;
 
diff --git a/source/intercept-library/library/source/Linker.h b/source/intercept-library/library/source/Linker.h
index 0ab6c4b6..bbc16c72 100644
--- a/source/intercept-library/library/source/Linker.h
+++ b/source/intercept-library/library/source/Linker.h
@@ -29,19 +29,18 @@ namespace el {
      * It uses the provided symbol resolver method and cast the result
      * to a specific type.
      */
-    class Linker {
-    public:
-        Linker() noexcept = default;
-        virtual ~Linker() = default;
+    struct Linker {
+
+        ~Linker() noexcept = default;
 
         [[nodiscard]]
-        virtual int execve(
+        int execve(
             const char* path,
             char* const argv[],
             char* const envp[]) const noexcept;
 
         [[nodiscard]]
-        virtual int posix_spawn(
+        int posix_spawn(
             pid_t* pid,
             const char* path,
             const posix_spawn_file_actions_t* file_actions,
@@ -50,6 +49,6 @@ namespace el {
             char* const envp[]) const noexcept;
 
         [[nodiscard]]
-        virtual int error_code() const noexcept;
+        int error_code() const noexcept;
     };
 }
diff --git a/source/intercept-library/library/source/Resolver.h b/source/intercept-library/library/source/Resolver.h
index e896ce22..1dfc956f 100644
--- a/source/intercept-library/library/source/Resolver.h
+++ b/source/intercept-library/library/source/Resolver.h
@@ -49,7 +49,7 @@ namespace el {
 
     public:
         Resolver() noexcept;
-        virtual ~Resolver() noexcept = default;
+        ~Resolver() noexcept = default;
 
         /**
          * Resolve the executable from system environments.
@@ -57,13 +57,13 @@ namespace el {
          * @return resolved executable path as absolute path.
          */
         [[nodiscard]]
-        virtual Result from_current_directory(std::string_view const &file);
+        Result from_current_directory(std::string_view const &file);
 
         [[nodiscard]]
-        virtual Result from_path(std::string_view const &file, char *const *envp);
+        Result from_path(std::string_view const &file, char *const *envp);
 
         [[nodiscard]]
-        virtual Result from_search_path(std::string_view const &file, const char *search_path);
+        Result from_search_path(std::string_view const &file, const char *search_path);
 
         Resolver(Resolver const &) = delete;
         Resolver(Resolver &&) noexcept = delete;
diff --git a/source/intercept-library/library/test/ExecutorTest.cc b/source/intercept-library/library/test/ExecutorTest.cc
deleted file mode 100644
index 279dd9d0..00000000
--- a/source/intercept-library/library/test/ExecutorTest.cc
+++ /dev/null
@@ -1,339 +0,0 @@
-/*  Copyright (C) 2012-2020 by László Nagy
-    This file is part of Bear.
-
-    Bear is a tool to generate compilation database for clang tooling.
-
-    Bear is free software: you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation, either version 3 of the License, or
-    (at your option) any later version.
-
-    Bear is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "gtest/gtest.h"
-
-#include "Executor.h"
-#include "ResolverMock.h"
-#include "LinkerMock.h"
-#include "Session.h"
-#include "Array.h"
-#include "er/Flags.h"
-
-#include <cerrno>
-
-using ::testing::_;
-using ::testing::Args;
-using ::testing::ElementsAre;
-using ::testing::ElementsAreArray;
-using ::testing::Matcher;
-using ::testing::NotNull;
-using ::testing::Return;
-
-namespace el {
-
-    bool operator==(const Executor::Result &lhs, const Executor::Result &rhs)
-    {
-        return
-            (lhs.return_value == rhs.return_value) &&
-            (lhs.return_value == 0 || lhs.error_code == rhs.error_code);
-    }
-
-    std::ostream& operator<<(std::ostream &os, const Executor::Result &value)
-    {
-        os << "return value: " << value.return_value << ", error code: " << value.error_code;
-        return os;
-    }
-}
-
-namespace {
-
-    char* LS_PATH = const_cast<char*>("/usr/bin/ls");
-    size_t LS_PATH_SIZE = el::array::length(LS_PATH);
-    char* LS_FILE = const_cast<char*>("ls");
-    char* LS_ARGV[] = {
-        const_cast<char*>("ls"),
-        const_cast<char*>("-l"),
-        nullptr
-    };
-    char* LS_ENVP[] = {
-        const_cast<char*>("PATH=/usr/bin:/usr/sbin"),
-        nullptr
-    };
-    char SEARCH_PATH[] = "/usr/bin:/usr/sbin";
-
-    el::Session SILENT_SESSION = {
-        "/usr/bin/intercept",
-        "/tmp/intercept.random",
-        false
-    };
-
-    el::Session VERBOSE_SESSION = {
-        "/usr/bin/intercept",
-        "/tmp/intercept.random",
-        true
-    };
-
-    constexpr el::Executor::Result SUCCESS = { 0, 0 };
-
-    constexpr el::Executor::Result failure(int const error_code) noexcept
-    {
-        return el::Executor::Result { -1, error_code };
-    }
-
-    MATCHER_P(CStyleArrayEqual, expecteds, "")
-    {
-        size_t idx = 0;
-        for (const auto &expected: expecteds) {
-            if (std::string_view(arg[idx]) != std::string_view(expected)) {
-                *result_listener << "expected: " << expected << ", but got: " << arg[idx];
-                return false;
-            }
-            ++idx;
-        }
-        return true;
-    }
-
-    TEST(Executor, fails_without_session)
-    {
-        el::Session session = el::session::init();
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, execve(_, _, _)).Times(0);
-        EXPECT_CALL(linker, posix_spawn(_, _, _, _, _, _)).Times(0);
-
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_current_directory(_)).Times(0);
-        EXPECT_CALL(resolver, from_path(_, _)).Times(0);
-        EXPECT_CALL(resolver, from_search_path(_, _)).Times(0);
-
-        EXPECT_EQ(failure(EIO), el::Executor(linker, session, resolver).execve(LS_PATH, LS_ARGV, LS_ENVP));
-        EXPECT_EQ(failure(EIO), el::Executor(linker, session, resolver).execvpe(LS_FILE, LS_ARGV, LS_ENVP));
-        EXPECT_EQ(failure(EIO), el::Executor(linker, session, resolver).execvP(LS_FILE, SEARCH_PATH, LS_ARGV, LS_ENVP));
-
-        pid_t pid;
-        EXPECT_EQ(failure(EIO), el::Executor(linker, session, resolver).posix_spawn(&pid, LS_PATH, nullptr, nullptr, LS_ARGV, LS_ENVP));
-        EXPECT_EQ(failure(EIO), el::Executor(linker, session, resolver).posix_spawnp(&pid, LS_FILE, nullptr, nullptr, LS_ARGV, LS_ENVP));
-    }
-
-    TEST(Executor, execve_silent_library)
-    {
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_current_directory(testing::Eq(std::string_view(LS_PATH))))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{LS_PATH, 0}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker,execve(SILENT_SESSION.reporter,
-                                  CStyleArrayEqual(std::vector<const char *> {
-                                      SILENT_SESSION.reporter,
-                                      er::flags::DESTINATION,
-                                      SILENT_SESSION.destination,
-                                      er::flags::EXECUTE,
-                                      LS_PATH,
-                                      er::flags::COMMAND,
-                                      LS_ARGV[0],
-                                      LS_ARGV[1]
-                                  }),
-                                  LS_ENVP))
-                .Times(1)
-                .WillOnce(Return(0));
-        EXPECT_CALL(linker, error_code())
-                .WillRepeatedly(Return(0));
-
-        auto result = el::Executor(linker, SILENT_SESSION, resolver).execve(LS_PATH, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(SUCCESS, result);
-    }
-
-    TEST(Executor, execve_verbose_library)
-    {
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_current_directory(testing::Eq(std::string_view(LS_PATH))))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{LS_PATH, 0}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, execve(VERBOSE_SESSION.reporter,
-                                   CStyleArrayEqual(std::vector<const char *> {
-                                           VERBOSE_SESSION.reporter,
-                                           er::flags::DESTINATION,
-                                           VERBOSE_SESSION.destination,
-                                           er::flags::VERBOSE,
-                                           er::flags::EXECUTE,
-                                           LS_PATH,
-                                           er::flags::COMMAND,
-                                           LS_ARGV[0],
-                                           LS_ARGV[1]
-                                   }),
-                                   LS_ENVP))
-                .Times(1)
-                .WillOnce(Return(0));
-        EXPECT_CALL(linker, error_code())
-                .WillRepeatedly(Return(0));
-
-        auto result = el::Executor(linker, VERBOSE_SESSION, resolver).execve(LS_PATH, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(SUCCESS, result);
-    }
-
-    TEST(Executor, execvpe_fails_on_resolve)
-    {
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_current_directory(testing::Eq(std::string_view(LS_PATH))))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{nullptr, ENOENT}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, execve(_, _, _)).Times(0);
-        EXPECT_CALL(linker, posix_spawn(_, _, _, _, _, _)).Times(0);
-
-        auto result = el::Executor(linker, SILENT_SESSION, resolver).execve(LS_PATH, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(failure(ENOENT), result);
-    }
-
-    TEST(Executor, execvpe_passes)
-    {
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_path(testing::Eq(std::string_view(LS_FILE)), testing::Eq(LS_ENVP)))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{LS_PATH, 0}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, execve(VERBOSE_SESSION.reporter,
-                                   CStyleArrayEqual(std::vector<const char *> {
-                                       VERBOSE_SESSION.reporter,
-                                       er::flags::DESTINATION,
-                                       VERBOSE_SESSION.destination,
-                                       er::flags::VERBOSE,
-                                       er::flags::EXECUTE,
-                                       LS_PATH,
-                                       er::flags::COMMAND,
-                                       LS_ARGV[0],
-                                       LS_ARGV[1]
-                                   }),
-                                   LS_ENVP))
-                .Times(1)
-                .WillOnce(Return(0));
-        EXPECT_CALL(linker, error_code())
-                .WillRepeatedly(Return(0));
-
-        auto result = el::Executor(linker, VERBOSE_SESSION, resolver).execvpe(LS_FILE, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(SUCCESS, result);
-    }
-
-    TEST(Executor, execvp2_passes)
-    {
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_search_path(testing::Eq(std::string_view(LS_FILE)), testing::Eq(SEARCH_PATH)))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{LS_PATH, 0}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, execve(VERBOSE_SESSION.reporter,
-                                   CStyleArrayEqual(std::vector<const char *> {
-                                           VERBOSE_SESSION.reporter,
-                                           er::flags::DESTINATION,
-                                           VERBOSE_SESSION.destination,
-                                           er::flags::VERBOSE,
-                                           er::flags::EXECUTE,
-                                           LS_PATH,
-                                           er::flags::COMMAND,
-                                           LS_ARGV[0],
-                                           LS_ARGV[1]
-                                   }),
-                                   LS_ENVP))
-                .Times(1)
-                .WillOnce(Return(0));
-        EXPECT_CALL(linker, error_code())
-                .WillRepeatedly(Return(0));
-
-        auto result = el::Executor(linker, VERBOSE_SESSION, resolver).execvP(LS_FILE, SEARCH_PATH, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(SUCCESS, result);
-    }
-
-    TEST(Executor, spawn_passes)
-    {
-        pid_t pid;
-
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_current_directory(testing::Eq(std::string_view(LS_PATH))))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{LS_PATH, 0}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, posix_spawn(&pid, VERBOSE_SESSION.reporter, nullptr, nullptr,
-                                        CStyleArrayEqual(std::vector<const char *> {
-                                                VERBOSE_SESSION.reporter,
-                                                er::flags::DESTINATION,
-                                                VERBOSE_SESSION.destination,
-                                                er::flags::VERBOSE,
-                                                er::flags::EXECUTE,
-                                                LS_PATH,
-                                                er::flags::COMMAND,
-                                                LS_ARGV[0],
-                                                LS_ARGV[1]
-                                        }),
-                                        LS_ENVP))
-                .Times(1)
-                .WillOnce(Return(0));
-        EXPECT_CALL(linker, error_code())
-                .WillRepeatedly(Return(0));
-
-        auto result = el::Executor(linker, VERBOSE_SESSION, resolver).posix_spawn(&pid, LS_PATH, nullptr, nullptr, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(SUCCESS, result);
-    }
-
-    TEST(Executor, spawn_fails_on_access)
-    {
-        pid_t pid;
-
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_current_directory(testing::Eq(std::string_view(LS_PATH))))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{nullptr, ENOENT}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, execve(_, _, _)).Times(0);
-        EXPECT_CALL(linker, posix_spawn(_, _, _, _, _, _)).Times(0);
-
-        auto result = el::Executor(linker, VERBOSE_SESSION, resolver).posix_spawn(&pid, LS_PATH, nullptr, nullptr, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(failure(ENOENT), result);
-    }
-
-    TEST(Executor, spawnp_passes)
-    {
-        pid_t pid;
-
-        ResolverMock resolver;
-        EXPECT_CALL(resolver, from_path(testing::Eq(std::string_view(LS_FILE)), testing::Eq(LS_ENVP)))
-                .Times(1)
-                .WillOnce(Return(el::Resolver::Result{LS_PATH, 0}));
-
-        LinkerMock linker;
-        EXPECT_CALL(linker, posix_spawn(&pid, VERBOSE_SESSION.reporter, nullptr, nullptr,
-                                        CStyleArrayEqual(std::vector<const char *> {
-                                                VERBOSE_SESSION.reporter,
-                                                er::flags::DESTINATION,
-                                                VERBOSE_SESSION.destination,
-                                                er::flags::VERBOSE,
-                                                er::flags::EXECUTE,
-                                                LS_PATH,
-                                                er::flags::COMMAND,
-                                                LS_ARGV[0],
-                                                LS_ARGV[1]
-                                        }),
-                                        LS_ENVP))
-                .Times(1)
-                .WillOnce(Return(0));
-        EXPECT_CALL(linker, error_code())
-                .WillRepeatedly(Return(0));
-
-        auto result = el::Executor(linker, VERBOSE_SESSION, resolver).posix_spawnp(&pid, LS_FILE, nullptr, nullptr, LS_ARGV, LS_ENVP);
-        EXPECT_EQ(SUCCESS, result);
-    }
-}
diff --git a/source/intercept-library/library/test/LinkerMock.h b/source/intercept-library/library/test/LinkerMock.h
deleted file mode 100644
index cf37668a..00000000
--- a/source/intercept-library/library/test/LinkerMock.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/*  Copyright (C) 2012-2020 by László Nagy
-    This file is part of Bear.
-
-    Bear is a tool to generate compilation database for clang tooling.
-
-    Bear is free software: you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation, either version 3 of the License, or
-    (at your option) any later version.
-
-    Bear is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#pragma once
-
-#include "Linker.h"
-
-#include "gmock/gmock.h"
-
-class LinkerMock : public el::Linker {
-public:
-    MOCK_METHOD(
-        int,
-        execve,
-        (const char* path, char* const argv[], char* const envp[]),
-        (const, noexcept, override)
-    );
-
-    MOCK_METHOD(
-        int,
-        posix_spawn,
-        (   pid_t* pid,
-            const char* path,
-            const posix_spawn_file_actions_t* file_actions,
-            const posix_spawnattr_t* attrp,
-            char* const argv[],
-            char* const envp[]),
-        (const, noexcept, override)
-    );
-
-    MOCK_METHOD(
-        int,
-        error_code,
-        (),
-        (const, noexcept, override)
-    );
-};
diff --git a/source/intercept-library/library/test/ResolverMock.h b/source/intercept-library/library/test/ResolverMock.h
deleted file mode 100644
index 35233c2d..00000000
--- a/source/intercept-library/library/test/ResolverMock.h
+++ /dev/null
@@ -1,48 +0,0 @@
-/*  Copyright (C) 2012-2020 by László Nagy
-    This file is part of Bear.
-
-    Bear is a tool to generate compilation database for clang tooling.
-
-    Bear is free software: you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation, either version 3 of the License, or
-    (at your option) any later version.
-
-    Bear is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#pragma once
-
-#include "Resolver.h"
-
-#include "gmock/gmock.h"
-
-class ResolverMock : public el::Resolver {
-public:
-    MOCK_METHOD(
-            el::Resolver::Result,
-            from_current_directory,
-            (std::string_view const &),
-            (override)
-    );
-
-    MOCK_METHOD(
-            el::Resolver::Result,
-            from_path,
-            (std::string_view const &, char *const *),
-            (override)
-    );
-
-    MOCK_METHOD(
-            el::Resolver::Result,
-            from_search_path,
-            (std::string_view const &, const char *),
-            (override)
-    );
-};

--- a/cloudinit/config/cc_ntp.py
+++ b/cloudinit/config/cc_ntp.py
@@ -23,7 +23,7 @@
 frequency = PER_INSTANCE
 NTP_CONF = '/etc/ntp.conf'
 NR_POOL_SERVERS = 4
-distros = ['centos', 'debian', 'fedora', 'opensuse', 'rhel', 'sles', 'ubuntu']
+distros = ['alpine', 'centos', 'debian', 'fedora', 'opensuse', 'rhel', 'sles', 'ubuntu']
 
 NTP_CLIENT_CONFIG = {
     'chrony': {
@@ -62,6 +62,17 @@
 
 # This is Distro-specific configuration overrides of the base config
 DISTRO_CLIENT_CONFIG = {
+    'alpine': {
+        'chrony': {
+            'confpath': '/etc/chrony/chrony.conf',
+            'service_name': 'chronyd',
+        },
+        'ntp': {
+            'confpath': '/etc/ntp.conf',
+            'packages': [],
+            'service_name': 'ntpd',
+        },
+    },
     'debian': {
         'chrony': {
             'confpath': '/etc/chrony/chrony.conf',
@@ -362,22 +373,30 @@
     @returns: list: A list of strings representing ntp servers for this distro.
     """
     names = []
-    pool_distro = distro
-    # For legal reasons x.pool.sles.ntp.org does not exist,
-    # use the opensuse pool
-    if distro == 'sles':
-        pool_distro = 'opensuse'
-    for x in range(0, NR_POOL_SERVERS):
-        name = "%d.%s.pool.ntp.org" % (x, pool_distro)
-        names.append(name)
+    if distro == 'alpine':
+        # Alpine-specific pool (i.e. x.alpine.pool.ntp.org) does not exist
+        # so use general x.pool.ntp.org instead.
+        for x in range(0, NR_POOL_SERVERS):
+            name = "%d.pool.ntp.org" % x
+            names.append(name)
+    else:
+        pool_distro = distro
+        # For legal reasons x.pool.sles.ntp.org does not exist,
+        # use the opensuse pool
+        if distro == 'sles':
+            pool_distro = 'opensuse'
+        for x in range(0, NR_POOL_SERVERS):
+            name = "%d.%s.pool.ntp.org" % (x, pool_distro)
+            names.append(name)
     return names
 
 
-def write_ntp_config_template(distro_name, servers=None, pools=None,
+def write_ntp_config_template(distro_name, client, servers=None, pools=None,
                               path=None, template_fn=None, template=None):
     """Render a ntp client configuration for the specified client.
 
     @param distro_name: string.  The distro class name.
+    @param client: string. The name of the NTP client software.
     @param servers: A list of strings specifying ntp servers. Defaults to empty
     list.
     @param pools: A list of strings specifying ntp pools. Defaults to empty
@@ -397,9 +416,16 @@
         pools = []
 
     if len(servers) == 0 and len(pools) == 0:
-        pools = generate_server_names(distro_name)
-        LOG.debug(
-            'Adding distro default ntp pool servers: %s', ','.join(pools))
+        if distro_name == 'alpine' and client == 'ntpd':
+            # Alpine's Busybox ntpd only understands "servers" configuration
+            # and not "pool" configuration.
+            servers = generate_server_names(distro_name)
+            LOG.debug(
+                'Adding distro default ntp servers: %s', ','.join(servers))
+        else:
+            pools = generate_server_names(distro_name)
+            LOG.debug(
+                'Adding distro default ntp pool servers: %s', ','.join(pools))
 
     if not path:
         raise ValueError('Invalid value for path parameter')
@@ -531,6 +557,7 @@
             raise RuntimeError(msg)
 
     write_ntp_config_template(cloud.distro.name,
+                              client=ntp_client_config.get('service_name'),
                               servers=ntp_cfg.get('servers', []),
                               pools=ntp_cfg.get('pools', []),
                               path=ntp_client_config.get('confpath'),

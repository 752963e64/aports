From 2582f958770ca42ec7b40c55690abf5e93e7d99a Mon Sep 17 00:00:00 2001
Patch-Source: https://github.com/dotnet/runtime/pull/68121
From: Antoine Martin <dev@ayakael.net>
Date: Sun, 17 Apr 2022 00:42:11 +0000
Subject: [PATCH 1/1] musl-321

Musl 1.2.3 introduced NULL checks that breaks this code. Patch fixes
code for better compliancy.

---
 .../src/pal/src/include/pal/palinternal.h     | 12 +--
 src/coreclr/src/pal/src/init/pal.cpp          | 90 +++++++++----------
 2 files changed, 51 insertions(+), 51 deletions(-)

diff --git a/src/coreclr/src/pal/src/include/pal/palinternal.h b/src/coreclr/src/pal/src/include/pal/palinternal.h
index c39c65f2455..78630f6ce26 100644
--- a/src/pal/src/include/pal/palinternal.h
+++ b/src/pal/src/include/pal/palinternal.h
@@ -694,30 +694,30 @@ T* InterlockedCompareExchangePointerT(
 template <typename T>
 inline T* InterlockedExchangePointerT(
     T* volatile * target,
-    int           value) // When NULL is provided as argument.
+    std::nullptr_t           value) // When NULL is provided as argument.
 {
     //STATIC_ASSERT(value == 0);
-    return InterlockedExchangePointerT(target, reinterpret_cast<T*>(value));
+    return InterlockedExchangePointerT(target, (T*)(void*)(value));
 }
 
 template <typename T>
 inline T* InterlockedCompareExchangePointerT(
     T* volatile * destination,
-    int           exchange,  // When NULL is provided as argument.
+    std::nullptr_t           exchange,  // When NULL is provided as argument.
     T*            comparand)
 {
     //STATIC_ASSERT(exchange == 0);
-    return InterlockedCompareExchangePointerT(destination, reinterpret_cast<T*>(exchange), comparand);
+    return InterlockedCompareExchangePointerT(destination, (T*)(void*)(exchange), comparand);
 }
 
 template <typename T>
 inline T* InterlockedCompareExchangePointerT(
     T* volatile * destination,
     T*            exchange,
-    int           comparand) // When NULL is provided as argument.
+    std::nullptr_t           comparand) // When NULL is provided as argument.
 {
     //STATIC_ASSERT(comparand == 0);
-    return InterlockedCompareExchangePointerT(destination, exchange, reinterpret_cast<T*>(comparand));
+    return InterlockedCompareExchangePointerT(destination, exchange, (T*)(void*)(comparand));
 }
 
 #undef InterlockedExchangePointer

musl libc does currently not have an equivalent of GNU Libc's error.h

The following is a mix of a workaround from aufs (https://sourceforge.net/p/aufs/aufs-util/ci/aufs4.14/tree/extlib/non-glibc/)
and the stranded error.{h,c} implementation https://www.openwall.com/lists/musl/2019/08/06/21

--- a/lib/fmt/xml_test.c
+++ b/lib/fmt/xml_test.c
@@ -27,7 +27,11 @@
 #include <stdint.h>
 #include <string.h>
 #include <errno.h>
+#ifdef __GNU_LIBRARY__
 #include <error.h>
+#else
+#include "hidrd/util/error_at_line.h"
+#endif
 #include <stdio.h>
 #include "hidrd/fmt/xml.h"
 
--- a/lib/item/any_test.c
+++ b/lib/item/any_test.c
@@ -29,7 +29,11 @@
 #include <stdint.h>
 #include <string.h>
 #include <errno.h>
+#ifdef __GNU_LIBRARY__
 #include <error.h>
+#else
+#include "hidrd/util/error_at_line.h"
+#endif
 #include <stdio.h>
 #include "hidrd/item.h"
 
--- a/lib/opt/test.c
+++ b/lib/opt/test.c
@@ -28,7 +28,11 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
+#ifdef __GNU_LIBRARY__
 #include <error.h>
+#else
+#include "hidrd/util/error_at_line.h"
+#endif
 #include <stdio.h>
 #include "hidrd/opt/spec_list.h"
 #include "hidrd/opt/list.h"
--- a/lib/util/num_test.c
+++ b/lib/util/num_test.c
@@ -25,7 +25,11 @@
  */
 
 #include <assert.h>
+#ifdef __GNU_LIBRARY__
 #include <error.h>
+#else
+#include "hidrd/util/error_at_line.h"
+#endif
 #include <stdlib.h>
 #include <string.h>
 #include "hidrd/util/num.h"
--- a/lib/util/ttbl_test.c
+++ b/lib/util/ttbl_test.c
@@ -26,7 +26,11 @@
 
 #include <assert.h>
 #include <errno.h>
+#ifdef __GNU_LIBRARY__
 #include <error.h>
+#else
+#include "hidrd/util/error_at_line.h"
+#endif
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
Only in src/hidrd-0.2.0/lib/: error
--- a/lib/util/Makefile.am
+++ b/lib/util/Makefile.am
@@ -39,10 +39,10 @@
 bin_PROGRAMS =
 check_PROGRAMS = hidrd_num_test hidrd_ttbl_test
 
-hidrd_num_test_SOURCES = num_test.c
+hidrd_num_test_SOURCES = num_test.c error_at_line.c
 hidrd_num_test_LDADD = $(lib_LTLIBRARIES)
 
-hidrd_ttbl_test_SOURCES = ttbl_test.c
+hidrd_ttbl_test_SOURCES = ttbl_test.c error_at_line.c
 hidrd_ttbl_test_LDADD = $(lib_LTLIBRARIES)
 
 TESTS = hidrd_num_test hidrd_ttbl_test
--- a/lib/util/Makefile.in
+++ b/lib/util/Makefile.in
@@ -102,10 +102,12 @@
 am__EXEEXT_1 = hidrd_num_test$(EXEEXT) hidrd_ttbl_test$(EXEEXT)
 @ENABLE_TESTS_INSTALL_TRUE@am__EXEEXT_2 = $(am__EXEEXT_1)
 PROGRAMS = $(bin_PROGRAMS)
-am_hidrd_num_test_OBJECTS = num_test.$(OBJEXT)
+am_hidrd_num_test_OBJECTS = num_test.$(OBJEXT) \
+	error_at_line.$(OBJEXT)
 hidrd_num_test_OBJECTS = $(am_hidrd_num_test_OBJECTS)
 hidrd_num_test_DEPENDENCIES = $(lib_LTLIBRARIES)
-am_hidrd_ttbl_test_OBJECTS = ttbl_test.$(OBJEXT)
+am_hidrd_ttbl_test_OBJECTS = ttbl_test.$(OBJEXT) \
+	error_at_line.$(OBJEXT)
 hidrd_ttbl_test_OBJECTS = $(am_hidrd_ttbl_test_OBJECTS)
 hidrd_ttbl_test_DEPENDENCIES = $(lib_LTLIBRARIES)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
@@ -247,9 +249,9 @@
 lib_LTLIBRARIES = libhidrd_util.la
 libhidrd_util_la_SOURCES = bool.c buf.c char.c dec.c fd.c fmt.c hex.c \
 	num.c str.c ttbl.c unit.c $(am__append_1)
-hidrd_num_test_SOURCES = num_test.c
+hidrd_num_test_SOURCES = num_test.c error_at_line.c
 hidrd_num_test_LDADD = $(lib_LTLIBRARIES)
-hidrd_ttbl_test_SOURCES = ttbl_test.c
+hidrd_ttbl_test_SOURCES = ttbl_test.c error_at_line.c
 hidrd_ttbl_test_LDADD = $(lib_LTLIBRARIES)
 all: all-am
 
@@ -387,6 +389,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/buf.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/char.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dec.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error_at_line.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fd.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fmt.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hex.Plo@am__quote@
--- /dev/null
+++ b/lib/util/error_at_line.c
@@ -0,0 +1,69 @@
+#include "hidrd/util/error_at_line.h"
+#include <errno.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+void (*error_print_progname) (void) = 0;
+unsigned int error_message_count = 0;
+int error_one_per_line = 0;
+
+static unsigned int saved_linenum = 0;
+static const char *saved_file = 0;
+
+static void errorv(int status, int errnum, const char *file, unsigned int linenum, const char *fmt, va_list ap)
+{
+	++error_message_count;
+
+	fflush(stdout);
+	flockfile(stderr);
+
+	if (error_print_progname)
+		error_print_progname();
+	else {
+		fprintf(stderr, "%s:", program_invocation_name);
+		if (!file)
+			fputc(' ', stderr);
+	}
+
+	if (file)
+		fprintf(stderr, "%s:%u: ", file, linenum);
+
+	vfprintf(stderr, fmt, ap);
+	if (errnum)
+		fprintf(stderr, ": %s", strerror(errnum));
+	fputc('\n', stderr);
+
+	funlockfile(stderr);
+
+	if (status)
+		exit(status);
+}
+
+void error(int status, int errnum, const char *fmt, ...)
+{
+	va_list ap;
+	va_start(ap, fmt);
+	errorv(status, errnum, NULL, 0, fmt, ap);
+	va_end(ap);
+}
+
+void error_at_line(int status, int errnum, const char *file, unsigned int linenum, const char *fmt, ...)
+{
+	if (error_one_per_line) {
+		if(saved_linenum == linenum && file != NULL &&
+		   saved_file != NULL && !strcmp(file, saved_file))
+			return;
+		saved_linenum = linenum;
+		// Assuming that the lifetime of the passed in file name extends
+		// until the next call is rather questionable, but appears to be
+		// the expected semantics.
+		saved_file = file;
+	}
+
+	va_list ap;
+	va_start(ap, fmt);
+	errorv(status, errnum, file, linenum, fmt, ap);
+	va_end(ap);
+}
--- /dev/null
+++ b/include/hidrd/util/error_at_line.h
@@ -0,0 +1,21 @@
+#ifndef _ERROR_H
+#define _ERROR_H
+
+#include <features.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern void (*error_print_progname) (void);
+extern unsigned int error_message_count;
+extern int error_one_per_line;
+
+void error(int, int, const char *, ...);
+void error_at_line(int, int, const char *, unsigned int, const char *, ...);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
--- a/lib/opt/Makefile.am
+++ b/lib/opt/Makefile.am
@@ -36,7 +36,7 @@
 
 TESTS = hidrd_opt_test
 
-hidrd_opt_test_SOURCES = test.c
+hidrd_opt_test_SOURCES = test.c ../util/error_at_line.c
 hidrd_opt_test_LDADD = $(lib_LTLIBRARIES)
 
 bin_PROGRAMS =
--- a/lib/opt/Makefile.in
+++ b/lib/opt/Makefile.in
@@ -98,7 +98,8 @@
 am__EXEEXT_1 = hidrd_opt_test$(EXEEXT)
 @ENABLE_TESTS_INSTALL_TRUE@am__EXEEXT_2 = $(am__EXEEXT_1)
 PROGRAMS = $(bin_PROGRAMS)
-am_hidrd_opt_test_OBJECTS = test.$(OBJEXT)
+am_hidrd_opt_test_OBJECTS = test.$(OBJEXT) \
+	error_at_line.$(OBJEXT)
 hidrd_opt_test_OBJECTS = $(am_hidrd_opt_test_OBJECTS)
 hidrd_opt_test_DEPENDENCIES = $(lib_LTLIBRARIES)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
@@ -251,7 +252,7 @@
 libhidrd_opt_la_LIBADD = \
     ../util/libhidrd_util.la
 
-hidrd_opt_test_SOURCES = test.c
+hidrd_opt_test_SOURCES = test.c ../util/error_at_line.c
 hidrd_opt_test_LDADD = $(lib_LTLIBRARIES)
 all: all-am
 
@@ -382,6 +383,7 @@
 distclean-compile:
 	-rm -f *.tab.c
 
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error_at_line.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inst.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/list.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/name_tkn.Plo@am__quote@
@@ -415,6 +417,20 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<
 
+error_at_line.o: ../util/error_at_line.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT error_at_line.o -MD -MP -MF $(DEPDIR)/error_at_line.Tpo -c -o error_at_line.o `test -f '../util/error_at_line.c' || echo '$(srcdir)/'`../util/error_at_line.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/error_at_line.Tpo $(DEPDIR)/error_at_line.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='../util/error_at_line.c' object='error_at_line.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o error_at_line.o `test -f '../util/error_at_line.c' || echo '$(srcdir)/'`../util/error_at_line.c
+
+error_at_line.obj: ../util/error_at_line.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT error_at_line.obj -MD -MP -MF $(DEPDIR)/error_at_line.Tpo -c -o error_at_line.obj `if test -f '../util/error_at_line.c'; then $(CYGPATH_W) '../util/error_at_line.c'; else $(CYGPATH_W) '$(srcdir)/../util/error_at_line.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/error_at_line.Tpo $(DEPDIR)/error_at_line.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='../util/error_at_line.c' object='error_at_line.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o error_at_line.obj `if test -f '../util/error_at_line.c'; then $(CYGPATH_W) '../util/error_at_line.c'; else $(CYGPATH_W) '$(srcdir)/../util/error_at_line.c'; fi`
+
 mostlyclean-libtool:
 	-rm -f *.lo
 
From f876ac085a86cc932c7d3093a7d007c78bff4751 Mon Sep 17 00:00:00 2001
From: Jason Gerecke <killertofu@gmail.com>
Date: Tue, 26 Apr 2016 13:28:04 -0700
Subject: [PATCH] Replace use of 'tempfile' with 'mktemp' in tests

The 'tempfile' command has been deprecated in Debian for many years
at this point and may not even be available on modern systems. Use
'mktemp' as the recommended replacement.
---
 lib/fmt/hidrd_read_test  | 6 +++---
 lib/fmt/hidrd_write_test | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/lib/fmt/hidrd_read_test b/lib/fmt/hidrd_read_test
index 8ae1350..6b30f6b 100755
--- a/lib/fmt/hidrd_read_test
+++ b/lib/fmt/hidrd_read_test
@@ -39,9 +39,9 @@ function run ()
     local input="$1"; shift
     local output="$1"; shift
     local output_basename="`basename \"$output\"`"
-    local test_output="`tempfile -s\"_$output_basename.test\"`"
-    local txt_output="`tempfile -s\"_$output_basename.txt\"`"
-    local test_txt_output="`tempfile -s\"_$output_basename.txt.test\"`"
+    local test_output="`mktemp --suffix=\"_$output_basename.test\"`"
+    local txt_output="`mktemp --suffix=\"_$output_basename.txt\"`"
+    local test_txt_output="`mktemp --suffix=\"_$output_basename.txt.test\"`"
     local status
 
     echo "Checking \"$format\" reading from \"$input\"" \
diff --git a/lib/fmt/hidrd_write_test b/lib/fmt/hidrd_write_test
index 3cfb0aa..73dddd8 100755
--- a/lib/fmt/hidrd_write_test
+++ b/lib/fmt/hidrd_write_test
@@ -34,7 +34,7 @@ function run ()
     local input="$1"; shift
     local output="$1"; shift
     local output_basename="`basename \"$output\"`"
-    local test_output="`tempfile -s\"_$output_basename.test\"`"
+    local test_output="`mktemp --suffix=\"_$output_basename.test\"`"
     local status
 
     echo "Checking \"$format\" writing of \"$input\"" \

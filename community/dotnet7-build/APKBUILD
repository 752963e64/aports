# Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>
# Contributor: Antoine Martin (ayakael) <dev@ayakael.net>

pkgname=dotnet7-build
pkgver=7.0.100
pkgrel=2
_gittag=v7.0.100-rtm.22521.12
_giturl="https://github.com/dotnet/installer"
_testtag=a061db200ef72f2f5ad60e9bf0ed16e92e68891b
_bunnytag=b6a6f7cb5eb7cd86c7f9baa512015181eabfe0c6
_patches="
	aspnetcore_44977-support-building-with-mono-runtime.patch
	aspnetcore_44978-support-building-with-nonportable-runtime.patch
	aspnetcore_disable-generate-composites.patch
	aspnetcore_disable-package-validation.patch
	build_14549-non-portable-build.patch
	build_14647-update-portable-rid-logic.patch
	build_14792-support-building-with-mono-runtime.patch
	build_15039-set-nativeaotsupported-as-false-on-arm.patch
	check_rid-alpine-generation.diff
	installer_14549-crossgen2-rid.patch
	installer_14549-rename-MicrosoftAspNetCoreAppRuntimePackageVersion.patch
	installer_14647-update-portable-rid-logic.patch
	installer_14792-support-building-with-mono-runtime.patch
	installer_2780-reprodicible-tarball.patch
	installer_fix-mono-workload-version.patch
	roslyn-analyzer_disable-apphost.patch
	runtime_74504-pass-targetrid-to-native-scripts.patch
	runtime_75597-support-building-runtime-with-non-portable-runtime.patch
	runtime_76068-use-generated-runtimejson-when-building-sharedframework.patch
	runtime_76500-mono-musl-support.patch
	runtime_77364-mono-createdirectory-workaround.patch
	runtime_78395-support-building-with-mono-runtime.patch
	runtime_enable-system-libunwind.diff
	sdk_14239-add-zsh-compdef-completion-script.patch
	sdk_28380-map-nonportable-rids-when-targetos-is-determined.patch
	sdk_28674-support-building-with-mono-runtime.patch
	"

_pkgver_macro=${pkgver%.*}
_pkgver_prior=${pkgver%.*.*}
_pkgver_name=${_pkgver_macro//[.0]}
pkgdesc="The .NET $_pkgver_macro bootstrap"
# x86: blocked by https://github.com/dotnet/runtime/issues/77667
# armhf: blocked by https://github.com/dotnet/runtime/issues/77663
# riscv64: port WIP https://github.com/dotnet/runtime/issues/36748
# ppc64le: blocked by https://github.com/dotnet/runtime/issues/77364
arch="all !x86 !armhf !riscv64 !ppc64le"
url=https://dotnet.microsoft.com
license="MIT"
# hack for dotnetx-build to be able to pull itself for bootstrapping
provides="dotnet$_pkgver_name-bootstrap"
provider_priority=$_pkgver_prior
checkdepends="
	babeltrace
	binutils
	coreutils
	file
	gawk
	jq
	lttng-tools
	npm
	procps
	sed
	strace
	util-linux-misc
	which
	"
makedepends="
	bash
	clang
	cmake
	dotnet$_pkgver_name-bootstrap
	dotnet$_pkgver_name-bootstrap-artifacts
	dotnet$_pkgver_name-stage0
	findutils
	git
	grep
	icu-data-full
	icu-dev
	inetutils-syslogd
	krb5-dev
	libgit2-dev
	libintl
	libucontext-dev
	libunwind-dev
	libxml2-dev
	libxml2-utils
	linux-headers
	lldb-dev
	llvm-dev
	lttng-ust-dev
	nodejs
	openssl-dev
	pigz
	rsync
	tar
	xz
	zlib-dev
	"
case $CARCH in
	s390x|x86) ;;
	*) makedepends="$makedepends lld-dev";;
esac

subpackages="
	dotnet$_pkgver_name-artifacts:artifacts:noarch
	dotnet$_pkgver_name-sdk
	dotnet$_pkgver_name-templates:templates:noarch
	dotnet-zsh-completion:zshcomp:noarch
	dotnet-bash-completion:bashcomp:noarch
	dotnet-doc
	netstandard21-targeting-pack:netstandard_targeting_pack:noarch
	"
source="
	https://repo.gpg.nz/apk/archives/dotnet-$_gittag.tar.xz
	dotnet-testsuite-$_testtag.tar.gz::https://github.com/redhat-developer/dotnet-regular-tests/archive/$_testtag.tar.gz
	dotnet-bunny-$_bunnytag.tar.gz::https://github.com/redhat-developer/dotnet-bunny/archive/$_bunnytag.tar.gz
	$_patches
	"
builddir="$srcdir"/dotnet-$_gittag
_checkdir="$srcdir"/dotnet-bunny-${_bunnytag/v}
_testdir="$srcdir"/dotnet-regular-tests-$_testtag
_cli_root="$srcdir"/bootstrap
_libdir="/usr/lib"
# if true, then within pipeline environment, in which case send logs there
# to be scooped
if [ -d "$APORTSDIR/logs" ]; then
	_logdir="$APORTSDIR"/logs
else
	_logdir="$srcdir"/logs
fi

case $CARCH in
	x86_64) _dotnet_arch="x64";;
	aarch64) _dotnet_arch="arm64";;
	armv7) _dotnet_arch="arm";;
	armhf) _dotnet_arch="armv6";;
	*) _dotnet_arch="$CARCH";;
esac

# Build doesn't set all the right executable bits for the right file types
_fix_executable() {
	# add executable bit
	find "$1" -type f \( \
		-name 'apphost' -o \
		-name 'singlefilehost' -o \
		-name 'lib*so' \
			\) \
		-exec chmod +x '{}' \;

	# remove executable bit
	find "$1" -type f \( \
		-name '*.a' -o \
		-name '*.dll' -o \
		-name '*.h' -o \
		-name '*.json' -o \
		-name '*.pdb' -o \
		-name '*.props' -o \
		-name '*.pubxml' -o \
		-name '*.targets' -o \
		-name '*.txt' -o \
		-name '*.xml' \
			\) \
		-exec chmod -x '{}' \;
}

# generates tarball containing all components built by dotnet
snapshot() {
	local _pkg="$srcdir"/${builddir##*/}.tar
	ulimit -n 4096
	if [ -d "$srcdir" ]; then
		cd "$srcdir"
	else
		mkdir -p "$srcdir" && cd "$srcdir"
	fi
	if [ -d "installer" ]; then
		cd "$srcdir"/installer
	else
		git clone $_giturl --branch $_gittag && cd "$srcdir"/installer
	fi

	sed 's|/src/installer||g' "$startdir"/installer_2780-reprodicible-tarball.patch | patch -Np1 || true

	if [ -d "$_libdir/dotnet/bootstrap" ]; then
		local _cli_root="$(find $_libdir/dotnet/bootstrap/${_pkgver_macro}* -maxdepth 0 -type d | sort -r | head -n 1)"
	else
		local _cli_root=""
	fi

	_InitializeDotNetCli="$_cli_root" DOTNET_INSTALL_DIR="$_cli_root" DotNetBuildFromSource=true ./build.sh \
		/p:ArcadeBuildTarball=true \
		/p:TarballDir=$builddir \
		/p:TarballFilePath=$_pkg

	msg "Compressing ${builddir##*/}.tar to $SRCDEST"
	xz -T0 -9 -vv -e -c > "$SRCDEST"/${builddir##*/}.tar.xz < "$_pkg"

	cd "$startdir"
	abuild checksum
}

prepare() {
	default_prepare

	# check patches
	msg "check_rid-alpine-generation.diff"
	patch -p1 -d "$_testdir" -i "$srcdir"/check_rid-alpine-generation.diff

	# Using system libunwind is broken on aarch64|armv7, and unused on mono-based builds
	# see https://github.com/dotnet/source-build/issues/2408,
	case $CARCH in
		aarch64|armv7) msg "Using bundled libunwind";;
		armhf|s390x|ppc64le) msg "No libunwind used";;
		*)
			msg "Using system libunwind"
			patch -p1 -i "$srcdir"/runtime_enable-system-libunwind.diff
			;;
	esac

	# ensure that dotnet does not download artifacts provided by dotnet-artifacts
	rm -rf "$builddir"/packages/archive
	# Adjusts OfficialBuildId to current date on tarball
	sed -i "s|<OfficialBuildId>19900101.1</OfficialBuildId>|<OfficialBuildId>$(date +"%Y%m%d.1")</OfficialBuildId>|" "$builddir"/git-info/*

	# links logfiles to pipeline logs for easy pickup in pipelines
	mkdir -p "$_logdir" "$builddir"/artifacts
	ln -s "$_logdir" "$builddir"/artifacts/logs
	ln -s "$_logdir" "$builddir"/artifacts/log
	for i in "$builddir"/src/*; do
		if [ -f "$i" ]; then
			continue
		fi
		mkdir -p "$_logdir"/${i##*\/} "$builddir"/src/${i##*\/}/artifacts
		ln -s "$_logdir"/${i##*\/} "$builddir"/src/${i##*\/}/artifacts/log
	done

	# dotnet requires its bootstrap to be in a writable dir
	msg "Setting up bootstrap"
	local _bootstrapdir=$(find $_libdir/dotnet/bootstrap/$_pkgver_macro* -maxdepth 0 | sort -r | head -n 1)
	if [ ! -d "$_cli_root" ]; then
		cp -r "$_bootstrapdir" "$_cli_root"
	fi
}

build() {
	msg "Building $pkgname-$pkgver"

	ulimit -n 4096

	# Disable use of LTTng as tracing on lttng <=2,13,0 is broken
	# See https://github.com/dotnet/runtime/issues/57784.
	if [ -f "/usr/lib/liblttng-ust.so.1 " ]; then
		export DOTNET_LTTng=0
	fi

	# looks for most recent recent version of _artifactsdir
	local _artifactsdir=$(find $_libdir/dotnet/artifacts/$_pkgver_macro* -maxdepth 0 | sort -r | head -n 1)

	# ci args, else the output is forwarded to log files which isn't ideal in a
	# pipeline environment, and build by defaults uses lots of space
	local args="
		/v:minimal
		/p:LogVerbosity=minimal
		/p:MinimalConsoleLogOutput=true
		/p:CleanWhileBuilding=true
		"

	# Parallel restore is broken on mono-based builds since dotnet7
	# see https://github.com/dotnet/runtime/issues/77364
	# A workaround via runtime_77364-mono-createdirectory-workaround.patch
	# removes the error, but env var is added in case
	case $CARCH in
		s390x|ppc64le) export RestoreDisableParallel=true;;
	esac

	# between releases, /etc/os-release sometimes has a VERSION_ID that is
	# unsupported by dotnet's Rid format. As mitigation, TargetRid is set
	# manually, rather than letting source-build compute it itself
	# There's also an issue with the non-portable Rid keeping Alpine's extra
	# subversion. Thus in those cases, the last bit is removed
	# shellcheck disable=SC2034
	. /etc/os-release
	local VERSION_ID_DOT="${VERSION_ID//[^.]}"
	while [ ${#VERSION_ID_DOT} -gt 1 ]; do
		local VERSION_ID="${VERSION_ID%.*}"
		local VERSION_ID_DOT="${VERSION_ID//[^.]}"
	done
	local VERSION_ID_DASH="${VERSION_ID//[^_]}"
	while [ ${#VERSION_ID_DASH} -ge 1 ]; do
		local VERSION_ID="${VERSION_ID%_*}"
		local VERSION_ID_DASH="${VERSION_ID//[^_]}"
	done
	local args="$args /p:TargetRid=$ID.$VERSION_ID-$_dotnet_arch"

	./build.sh \
		--with-sdk "$_cli_root" \
		--with-packages "$_artifactsdir" \
		-- $args
}

check() {
	# Tests timeout (in seconds)
	local _tests_timeout=600
	# Test suite disable flags
	# following tests can only work after packaging step
	local _disabled_tests="man-pages distribution-package bash-completion install-local release-version-sane"
	# test broken: no omnisharp release for .net7
	local _disabled_tests="$_disabled_tests omnisharp"
	# test broken: permission issue on lxc / pipelines
	local _disabled_tests="$_disabled_tests createdump-aspnet workload"
	# liblttng-ust_sys-sdt.h: no 'NT_STAPSDT' on Alpine's lttng-ust package
	# lttng: known issue, see https://github.com/dotnet/runtime/issues/57784
	local _disabled_tests="$_disabled_tests liblttng-ust_sys-sdt.h lttng"
	# {bundled,system}-libunwind: use system version on all but aarch64/armv7, as broken
	# see https://github.com/redhat-developer/dotnet-regular-tests/issues/113
	# disable on mono-flavored runtime as mono does not use libunwind
	case $CARCH in
		armv7|aarch64) local _disabled_tests="$_disabled_tests system-libunwind";;
		s390x|ppc64le|armhf) local _disabled_tests="$_disabled_tests bundled-libunwind system-libunwind";;
		*) local _disabled_tests="$_disabled_tests bundled-libunwind";;
	esac

	msg "Unpacking produced dotnet"
	export DOTNET_ROOT="$_checkdir/release"
	if [ ! -d "$DOTNET_ROOT" ]; then
		mkdir -p "$DOTNET_ROOT"
		tar --use-compress-program="pigz" \
			-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
			-C "$DOTNET_ROOT" \
			--no-same-owner
	fi
	export PATH="$DOTNET_ROOT:$PATH"
	# some files either should or should not have executable bits
	# (done again during packaging - this is for tests)
	_fix_executable "$DOTNET_ROOT"

	msg "Building turkey test suite"
	if [ ! -d "$_checkdir"/turkey ]; then
		cd "$_checkdir"/Turkey
		dotnet publish -f netcoreapp3.1 -c Release -p:VersionPrefix=1 -p:VersionSuffix="$(git rev-parse --short HEAD)" -o "$_checkdir"/turkey
	fi

	msg "Running test suite"
	cd "$_testdir"
	for i in $_disabled_tests; do
		if [ -d "$i" ]; then
			sed -i 's|"enabled": true|"enabled": false|' $i/test.json
		fi
	done
	dotnet "$_checkdir"/turkey/Turkey.dll -t $_tests_timeout || local ERROR=true
	if [ $ERROR ]; then
		msg "Check error reported, dumping logs"
		for i in *.log; do
			msg "Dumping $i"
			cat "$i"
		done
	fi
}

package() {
	# directory creation
	install -dm 755 \
		"$pkgdir"/$_libdir/dotnet/bootstrap/$pkgver \
		"$pkgdir"/usr/share/man/man1/dotnet \
		"$pkgdir"/$_libdir/dotnet/artifacts/$pkgver

	# unpack sdk to bootstrap
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$pkgdir"/$_libdir/dotnet/bootstrap/$pkgver/ \
		--no-same-owner

	# extract arch-specific artifacts to artifacts dir for use by future dotnet builds
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/Private.SourceBuilt.Artifacts.*.tar.gz \
		-C "$pkgdir"/$_libdir/dotnet/artifacts/$pkgver/ \
		--no-same-owner \
		--wildcards \
		'*alpine*'

	# assemble docs
	find "$builddir" -iname 'dotnet*.1' -type f -exec cp '{}' "$pkgdir"/usr/share/man/man1/dotnet/. \;

	# some files either should or should not have executable bits
	_fix_executable "$pkgdir"

	# Disable use of LTTng as tracing on lttng <=2,13,0 is broken
	# See https://github.com/dotnet/runtime/issues/57784.
	if [ -f "/usr/lib/liblttng-ust.so.1 " ]; then
		rm "$pkgdir"/$_libdir/dotnet/bootstrap/*/shared/Microsoft.NETCore.App/*/libcoreclrtraceptprovider.so
	fi
}

sdk() {
	pkgdesc="The .NET $_pkgver_macro SDK"
	depends="
		aspnetcore$_pkgver_name-runtime
		aspnetcore$_pkgver_name-targeting-pack
		dotnet$_pkgver_name-apphost-pack
		dotnet$_pkgver_name-targeting-pack
		dotnet$_pkgver_name-templates
		netstandard21-targeting-pack
		"
	provides="
		dotnet-sdk-$_pkgver_macro=$pkgver-r$pkgrel
		dotnet$_pkgver_name-dev=$pkgver-r$pkgrel
		"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet

	# sdk
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/ \
		--no-same-owner \
		./sdk ./sdk-manifests

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"

	# See https://github.com/dotnet/source-build/issues/2579
	find "$subpkgdir" -type f -name 'testhost.x86' -delete
	find "$subpkgdir" -type f -name 'vstest.console' -delete
}

netstandard_targeting_pack() {
	pkgdesc="The .NET 2.1 Standard targeting pack"
	depends="dotnet-host"
	provides="netstandard-targeting-pack-2.1=$pkgver-r$pkgrel"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet/packs
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/ \
		--no-same-owner \
		./packs/NETStandard.Library.Ref

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"
}

templates() {
	pkgdesc="The .NET $_pkgver_macro templates"
	depends="dotnet-host"
	provides="dotnet-templates-$_pkgver_macro=$pkgver-r$pkgrel"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/ \
		--no-same-owner \
		./templates

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"
}

artifacts() {
	pkgdesc="Internal package for building .NET $_pkgver_macro Software Development Kit"
	# hack to allow artifacts to pull itself
	provides="dotnet$_pkgver_name-bootstrap-artifacts"
	provider_priority=$_pkgver_prior

	# directory creation
	install -dm 755 \
		"$subpkgdir"/$_libdir/dotnet/artifacts/$pkgver \
		"$subpkgdir"/usr/share/licenses

	# extract arch-agnostic artifacts to artifacts dir for use by future dotnet builds
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/Private.SourceBuilt.Artifacts.*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/artifacts/$pkgver/ \
		--no-same-owner \
		--exclude '*Intermediate*' \
		--exclude '*alpine*'
}

zshcomp() {
	depends=""
	pkgdesc="zsh completion for .NET"
	# netstandard21-targeting-pack will always be pulled by any dotnetx-sdk
	# thus pulling this with it for sdk
	install_if="netstandard21-targeting-pack zsh"
	depends="dotnet-host"

	install -dm 755 "$subpkgdir"/usr/share/zsh/site-functions
	install -m 755 "$builddir"/src/sdk/scripts/register-completions.zsh "$subpkgdir"/usr/share/zsh/site-functions/_dotnet
}

bashcomp() {
	depends=""
	pkgdesc="bash completion for .NET"
	# netstandard21-targeting-pack will always be pulled by any dotnetx-sdk
	# thus pulling this with it for sdk
	install_if="netstandard21-targeting-pack bash-completion"
	depends="dotnet-host"

	install -dm 755	"$subpkgdir"/usr/share/bash-completion/completions
	install -m 755 "$builddir"/src/sdk/scripts/register-completions.bash "$subpkgdir"/usr/share/bash-completion/completions/_dotnet
}

doc() {
	default_doc
	pkgdesc="Docs for .NET"

	# licenses
	install -dm 755 "$subpkgdir"/usr/share/licenses/dotnet
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/usr/share/licenses/dotnet/ \
		--no-same-owner \
		./LICENSE.txt ./ThirdPartyNotices.txt
}

sha512sums="
1f0e7e6efb7076bc7d5a11e0589c27258cfe2bfa6d81a6d41f172c7292dab60f62b3e95e3873d4ee024d765f09507851d169a35ae06e75ce815d76717adb5025  dotnet-v7.0.100-rtm.22521.12.tar.xz
2f9acd7bf2f346f1611aa1da4f201366205bb3fe8ec6cff28ce44f3982283a6a3462962b7276537d78d1778c431d043d897eb59a575e798b39df9979c4e21188  dotnet-testsuite-a061db200ef72f2f5ad60e9bf0ed16e92e68891b.tar.gz
3663030bbd22efe90dd9b402ef29db879539c92c2e5d5404f10712661494e4c55c3a1dab7d09a129c5e9e41668aa2d9cb0c3251055a810dbdf7c1cee7279be49  dotnet-bunny-b6a6f7cb5eb7cd86c7f9baa512015181eabfe0c6.tar.gz
72cbf507c4906376d190146f6b1d80c142395a32cebdde418ed03a84237e3f368ead06423c03e2bd6798d2f9d9072e30553f396ea4a9a51f8a8786dbc5a3061d  aspnetcore_44977-support-building-with-mono-runtime.patch
c9fe10b2622981c53b2d9c58c831c28af57774c5b64af5542d283499c6d5fc432582ac26c61cca45ddbe3ef062f82270e9c2a2c5b3487ea8888f255b1f447713  aspnetcore_44978-support-building-with-nonportable-runtime.patch
f911478ec1c046bebd5fa7ad0fbea8a3f06278b830c7855e6c9e590a43c1a0f2c38a89fc6a2262a633e90421f1336f397a8a0a329460c265431599d9f50b88cf  aspnetcore_disable-generate-composites.patch
c73fbbfe06fb3144d61037d6ef61110816a61e7f3fdae58c00f3200f2721ecae9a374235b77c4a50960f9b081fa5bedc09951c3543a8f58947ba9b27083e4887  aspnetcore_disable-package-validation.patch
755043a26afa08d4696886ad5e9dfadf554cb723b3e5aa7a5fa44851715a3cd9ed43d08dedb2fba8fdb4b53476a6942d2d3bc5c45dd6223123a01f272146914e  build_14549-non-portable-build.patch
8f90abe6db4be3f5616a0f369fe812e0ad2a9baa89364791281bee944e4c990c1ba4be6061560034316d644011f5f312f5309d48280597e9a468b12e3fb4cea9  build_14647-update-portable-rid-logic.patch
15abb87493ec033633682f5e246f63a2ca2897f8bfb2e55d3b326fe85e25da112bebc391423878c4b47820a5b826e9987842a6aa0feae3e67297cc2ef564dc6e  build_14792-support-building-with-mono-runtime.patch
24a018e9c338b38334e083fc3875b0b2a0ed277078cd3b1cd8bc923dfa5f728fb900941bc2039e1be27a0a0686d53c9025dde11a80ea2407e6ae0238357d46b1  build_15039-set-nativeaotsupported-as-false-on-arm.patch
941b430b55e323f723bbc5160447f060f40d18ce32e5803ab7dda16bfc60a0f5ec1dccd246e68475d7115ee265a9433824d8a5d997c302531311194a90deeca9  check_rid-alpine-generation.diff
202d927a67f5d7c11f55e19df2de05ed63d2c5cedbbf47ba08d268f43202c3f20fd50cdc3247bb58d1a2d97168f6a64ad06ef37989caa161cc183d90ecb482d6  installer_14549-crossgen2-rid.patch
98a0afddc685b4095fa969a973891708b1d44bd7089044b22f1828c8d95331d8113111b3d015ba1f8843c44c12f6698b7b4ca7177887495360b61cc15d499887  installer_14549-rename-MicrosoftAspNetCoreAppRuntimePackageVersion.patch
f2e347a18d9aa7f190b201f2269521ec7f3623b6b25d7503e54d28568294fe0991184b804422951bb044d635b4599d3e320e8ffc8bad52716d0045cd0e3197d1  installer_14647-update-portable-rid-logic.patch
d3e988c7d70201bd84e44b5331c8c038e2a53b3d7e1d6274efbb81771cba95113ee295e375394be2ae9d86ca0f1d1a6268b32c6a78cf128751ad667cfb27272e  installer_14792-support-building-with-mono-runtime.patch
0215d0fdbb4f46ab1cab547076cff39ccbe3e6ef0fdd26a60a562c60e1c022ee14286692a3880d75c665410a3db137f817e04c8c311a3960f8dede0036488741  installer_2780-reprodicible-tarball.patch
073bd0c473639ff145eb3f48382bfd632bd54cf7432df9436f4a1d9d58bdd79d99f5201d9f775920ef60e3c16b02ce15cfc70b690b3ea22e8d4471a25a8df66b  installer_fix-mono-workload-version.patch
4ac92d2d9190a55ee20d3e145a28a6953c98d3eb838c8acfb808b8839316443cb64da4a2c5787df0171fce7ef96ff6381043085ed90c23ec09ce9ac81571e675  roslyn-analyzer_disable-apphost.patch
6c737cbe92d5c4b9e5ed4af64cc6e328a5e457473c6daa214bbf313f2edfbdbe2029a465325737905df906d0b6f15eb1ab0f2deb18b0bebd5bd9aca74469c39d  runtime_74504-pass-targetrid-to-native-scripts.patch
3944e91cc1f8c11d42b2086bfa7f79229bbc0beda4b3e6c164d7aa6784a47a9dbc12227d2f8d28f52547236d0a751dcdf8cd1b2e64687973922358339255fc00  runtime_75597-support-building-runtime-with-non-portable-runtime.patch
947e59aea02e385a278cb77f64d7438c4d2de142cbec4613465826c325b5875804a14100a6c7ee182eba5ac55a6ffd85f08c719132ef64c089a43a52bc73b799  runtime_76068-use-generated-runtimejson-when-building-sharedframework.patch
554e650e0d5288bc9bb448b1731e9b1b1fd3d07178c7378f721d93ee2ef249206df6eafd9af1202aa1645b760238b0bcda09faf6951821ffc0878a05e771a32e  runtime_76500-mono-musl-support.patch
d6ed172723915c0b67aa5153e34d52c002432ca0cada9e02a2a1975c3fd9cffd3ba24e4ab1d6b9866d91f964598b79c7876528a5f2f5a7b4ffb376c2d601c8b0  runtime_77364-mono-createdirectory-workaround.patch
5730ce7f5ce6c932ab1c23afb93cbf19cccdbd73454a271041e91d7ed9f40243a371c5c9e5e071ee637826f0be71400651f7fd71795c29b397741cc1cdf4b48a  runtime_78395-support-building-with-mono-runtime.patch
68a46aa4230d1bbaa81585e87b0b9da4b80ffc0763040e89fc255f4fc337ba15077bb457ef28e620d28828db50cb13d8665bebe9adb792bfd4f723f3ef686301  runtime_enable-system-libunwind.diff
d1b4ebcbb1a6815fc0ce4c471485c232618e60968a879309fb8336821a9351d2e0028d9f7726c0c041c750b497a0baa47400c78c9ceff550b91b4a6c2816fc41  sdk_14239-add-zsh-compdef-completion-script.patch
be95fdbb00aa4a38d8270dd74891143dd090018630526c0c9a270afa3c95022fca6c91b4f70158169b9767e9d37f0b1d4ebaacdab78d82f09473ec5cf8b93880  sdk_28380-map-nonportable-rids-when-targetos-is-determined.patch
9aad6bd948787eb976e77a248bbdcc66695c25d1b67617fee02661e688dfa84b989dd7e768e9b717a6fc5d4d423e1e139e779bd16b46cffdcf057659cee70186  sdk_28674-support-building-with-mono-runtime.patch
"

From c748d6987252fafc296cde9351b289ef734cf861 Mon Sep 17 00:00:00 2001
From: Ahmad Samir <a.samirh78@gmail.com>
Date: Thu, 13 May 2021 23:03:57 +0200
Subject: [PATCH 1/3] kio_file: pass the absolute path to
 QMimeDatabase::mimeTypeForFile()

Otherwise detecting the mime type based on the file content may fail and
return application/octet-stream.

And pass the whole url to createUDSEntry(), less QFile::decodeName/encodeName()
in the middle is better and less error prone.

Note that without this change a MimeTypeFinderJob could end up failing to
find the mime type of a local file based on the file contents.
---
 src/ioslaves/file/file_unix.cpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/ioslaves/file/file_unix.cpp b/src/ioslaves/file/file_unix.cpp
index 99d46c8f1..940e3cbc4 100644
--- a/src/ioslaves/file/file_unix.cpp
+++ b/src/ioslaves/file/file_unix.cpp
@@ -364,7 +364,7 @@ inline static time_t stat_mtime(QT_STATBUF &buf)
 }
 #endif
 
-static bool createUDSEntry(const QString &filename, const QByteArray &path, UDSEntry &entry, KIO::StatDetails details)
+static bool createUDSEntry(const QString &filename, const QByteArray &path, UDSEntry &entry, KIO::StatDetails details, const QUrl &url)
 {
     assert(entry.count() == 0); // by contract :-)
     int entries = 0;
@@ -539,7 +539,7 @@ static bool createUDSEntry(const QString &filename, const QByteArray &path, UDSE
 
     if (details & KIO::StatMimeType) {
         QMimeDatabase db;
-        entry.fastInsert(KIO::UDSEntry::UDS_MIME_TYPE, db.mimeTypeForFile(filename).name());
+        entry.fastInsert(KIO::UDSEntry::UDS_MIME_TYPE, db.mimeTypeForFile(url.toLocalFile()).name());
     }
 
     return true;
@@ -1186,7 +1186,7 @@ void FileProtocol::listDir(const QUrl &url)
             listEntry(entry);
 
         } else {
-            if (createUDSEntry(filename, QByteArray(ep->d_name), entry, details)) {
+            if (createUDSEntry(filename, QByteArray(ep->d_name), entry, details, url)) {
 #if HAVE_SYS_XATTR_H
                 if (isNtfsHidden(filename)) {
                     bool ntfsHidden = true;
@@ -1476,7 +1476,7 @@ void FileProtocol::stat(const QUrl &url)
     const KIO::StatDetails details = getStatDetails();
 
     UDSEntry entry;
-    if (!createUDSEntry(url.fileName(), _path, entry, details)) {
+    if (!createUDSEntry(url.fileName(), _path, entry, details, url)) {
         error(KIO::ERR_DOES_NOT_EXIST, path);
         return;
     }
-- 
GitLab


From c19876052ecec18a87a82f5950e8909e22e895ba Mon Sep 17 00:00:00 2001
From: Ahmad Samir <a.samirh78@gmail.com>
Date: Thu, 13 May 2021 17:02:52 +0200
Subject: [PATCH 2/3] MimeTypeFinderJob: the StatJob details should include the
 mimetype

Apparently we forgot to specify that we want the UDS_MIME_TYPE field in
the statFile() method (both when it lived in OpenUrlJob and when it was moved
to MimeTypeFinderJob). And now there is a dedicated StatJob flag, StatMimeType,
that we can use.

Not passing KIO::StatMimeType when creating the StatJob meant the code always
used a get job to determine the mime type, which mean that e.g. opening an
ISO file from Dolphin, which supposedly just needs to launch Ark, had the
whole file read into memory, which means that opening a couple of ISO's and
you're out of memory...

Thanks to sitter for doing a big chunk of the investigative work in the bug
report.

CCBUG: 398908
---
 src/core/mimetypefinderjob.cpp | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/src/core/mimetypefinderjob.cpp b/src/core/mimetypefinderjob.cpp
index 48fc8c289..baca58695 100644
--- a/src/core/mimetypefinderjob.cpp
+++ b/src/core/mimetypefinderjob.cpp
@@ -122,7 +122,9 @@ void KIO::MimeTypeFinderJobPrivate::statFile()
 {
     Q_ASSERT(m_mimeTypeName.isEmpty());
 
-    KIO::StatJob *job = KIO::statDetails(m_url, KIO::StatJob::SourceSide, KIO::StatBasic | KIO::StatResolveSymlink, KIO::HideProgressInfo);
+    static constexpr auto statFlags = KIO::StatBasic | KIO::StatResolveSymlink | KIO::StatMimeType;
+
+    KIO::StatJob *job = KIO::statDetails(m_url, KIO::StatJob::SourceSide, statFlags, KIO::HideProgressInfo);
     if (!m_authPrompts) {
         job->addMetaData(QStringLiteral("no-auth-prompt"), QStringLiteral("true"));
     }
@@ -147,6 +149,8 @@ void KIO::MimeTypeFinderJobPrivate::statFile()
 
         const KIO::UDSEntry entry = job->statResult();
 
+        qCDebug(KIO_CORE) << "UDSEntry from StatJob in MimeTypeFinderJob" << entry;
+
         const QString localPath = entry.stringValue(KIO::UDSEntry::UDS_LOCAL_PATH);
         if (!localPath.isEmpty()) {
             m_url = QUrl::fromLocalFile(localPath);
-- 
GitLab


From 6c5014598d524ca419c8886baa48188bba39dacb Mon Sep 17 00:00:00 2001
From: Ahmad Samir <a.samirh78@gmail.com>
Date: Thu, 13 May 2021 18:40:49 +0200
Subject: [PATCH 3/3] StatDetail enum: improve API docs

NO_CHANGELOG
---
 src/core/global.h | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/src/core/global.h b/src/core/global.h
index 44e0fb06a..449ccf539 100644
--- a/src/core/global.h
+++ b/src/core/global.h
@@ -335,16 +335,19 @@ enum StatDetail {
     StatTime = 0x4,
     /// Resolve symlinks
     StatResolveSymlink = 0x8,
-    /// acl Data
+    /// ACL data
     StatAcl = 0x10,
     /// dev, inode
     StatInode = 0x20,
-    /// recursive size @since 5.70
+    /// Recursive size
+    /// @since 5.70
     StatRecursiveSize = 0x40,
-    /// mime type @since 5.82
+    /// Mime Type
+    /// @since 5.82
     StatMimeType = 0x80,
 
-    /// Default value includes fields provided by other entries
+    /// Default StatDetail flag when creating a @c StatJob.
+    /// Equivalent to setting <tt>StatBasic | StatUser | StatTime | StatAcl | StatResolveSymlink</tt>
     StatDefaultDetails = StatBasic | StatUser | StatTime | StatAcl | StatResolveSymlink,
 };
 /**
-- 
GitLab


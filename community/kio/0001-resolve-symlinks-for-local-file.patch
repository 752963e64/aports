From 52cee21e3912bf7b20671762f3d7c991b802eb75 Mon Sep 17 00:00:00 2001
From: Jonathan Marten <jjm@keelhaul.me.uk>
Date: Fri, 7 May 2021 21:13:26 +0100
Subject: [PATCH 1/3] MimeTypeFinderJob: Resolve symlinks for a local file

Since we are most likely to be interested in the MIME type of the
target (for opening it).

BUG:436708
---
 src/core/mimetypefinderjob.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/core/mimetypefinderjob.cpp b/src/core/mimetypefinderjob.cpp
index f5e50cdc4..48fc8c289 100644
--- a/src/core/mimetypefinderjob.cpp
+++ b/src/core/mimetypefinderjob.cpp
@@ -122,7 +122,7 @@ void KIO::MimeTypeFinderJobPrivate::statFile()
 {
     Q_ASSERT(m_mimeTypeName.isEmpty());
 
-    KIO::StatJob *job = KIO::statDetails(m_url, KIO::StatJob::SourceSide, KIO::StatBasic, KIO::HideProgressInfo);
+    KIO::StatJob *job = KIO::statDetails(m_url, KIO::StatJob::SourceSide, KIO::StatBasic | KIO::StatResolveSymlink, KIO::HideProgressInfo);
     if (!m_authPrompts) {
         job->addMetaData(QStringLiteral("no-auth-prompt"), QStringLiteral("true"));
     }
-- 
GitLab


From 11cb5e5126367c470fd9c88bca90e9d94b43a627 Mon Sep 17 00:00:00 2001
From: Jonathan Marten <jjm@keelhaul.me.uk>
Date: Sat, 8 May 2021 13:56:52 +0100
Subject: [PATCH 2/3] MimeTypeFinderJob: Add autotest for access through
 symlink

Also tests MIME type resolution for a directory (since the job only
fails for a directory accessed through a symlink).
---
 autotests/mimetypefinderjobtest.cpp | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/autotests/mimetypefinderjobtest.cpp b/autotests/mimetypefinderjobtest.cpp
index 72296b9b8..df00e9d8e 100644
--- a/autotests/mimetypefinderjobtest.cpp
+++ b/autotests/mimetypefinderjobtest.cpp
@@ -48,6 +48,7 @@ void MimeTypeFinderJobTest::determineMimeType_data()
     QTest::newRow("text_file_no_extension") << "text/plain" << "srcfile";
     QTest::newRow("desktop_file") << "application/x-desktop" << "foo.desktop";
     QTest::newRow("script") << "application/x-shellscript" << "srcfile.sh";
+    QTest::newRow("directory") << "inode/directory" << "srcdir";
     /* clang-format on */
 }
 
@@ -60,7 +61,12 @@ void MimeTypeFinderJobTest::determineMimeType()
     QTemporaryDir tempDir;
     const QString srcDir = tempDir.path();
     const QString srcFile = srcDir + QLatin1Char('/') + fileName;
-    createSrcFile(srcFile);
+    if (mimeType == "inode/directory") {
+        QVERIFY(QDir(srcDir).mkdir(fileName));
+    } else {
+        createSrcFile(srcFile);
+    }
+
     QVERIFY(QFile::exists(srcFile));
     const QUrl url = QUrl::fromLocalFile(srcFile);
 
@@ -68,6 +74,16 @@ void MimeTypeFinderJobTest::determineMimeType()
     KIO::MimeTypeFinderJob *job = new KIO::MimeTypeFinderJob(url, this);
     QVERIFY2(job->exec(), qPrintable(job->errorString()));
     QCOMPARE(job->mimeType(), mimeType);
+
+    // Check that the result is the same when accessing the source
+    // file through a symbolic link (bug #436708)
+    const QString srcLink = srcDir + QLatin1Char('/') + QLatin1String("link_") + fileName;
+    QVERIFY(QFile::link(srcFile, srcLink));
+    const QUrl linkUrl = QUrl::fromLocalFile(srcLink);
+
+    job = new KIO::MimeTypeFinderJob(linkUrl, this);
+    QVERIFY2(job->exec(), qPrintable(job->errorString()));
+    QCOMPARE(job->mimeType(), mimeType);
 }
 
 void MimeTypeFinderJobTest::invalidUrl()
-- 
GitLab


From c49110dab55d9ae2212e0235bdb11fac6d2ae0e5 Mon Sep 17 00:00:00 2001
From: Jonathan Marten <jjm@keelhaul.me.uk>
Date: Sat, 8 May 2021 14:47:04 +0100
Subject: [PATCH 3/3] MimeTypeFinderJob test: Combine a QLatin1Char and a
 QLatin1String

---
 autotests/mimetypefinderjobtest.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/autotests/mimetypefinderjobtest.cpp b/autotests/mimetypefinderjobtest.cpp
index df00e9d8e..f494ff3b6 100644
--- a/autotests/mimetypefinderjobtest.cpp
+++ b/autotests/mimetypefinderjobtest.cpp
@@ -77,7 +77,7 @@ void MimeTypeFinderJobTest::determineMimeType()
 
     // Check that the result is the same when accessing the source
     // file through a symbolic link (bug #436708)
-    const QString srcLink = srcDir + QLatin1Char('/') + QLatin1String("link_") + fileName;
+    const QString srcLink = srcDir + QLatin1String("/link_") + fileName;
     QVERIFY(QFile::link(srcFile, srcLink));
     const QUrl linkUrl = QUrl::fromLocalFile(srcLink);
 
-- 
GitLab


"Always use EXT_SUFFIX from sysconfig"
https://github.com/messense/maturin/commit/5ad4f178e5176891adedfdb7d6b7da351faaabdc
--- a/src/python_interpreter.rs
+++ b/src/python_interpreter.rs
@@ -408,46 +408,14 @@ impl PythonInterpreter {
     ///
     /// For pypy3, we read importlib.machinery.EXTENSION_SUFFIXES[0].
     pub fn get_library_name(&self, base: &str) -> String {
-        match self.interpreter_kind {
-            InterpreterKind::CPython => {
-                let platform = self.target.get_shared_platform_tag();
-
-                if self.target.is_freebsd() {
-                    format!(
-                        "{base}.cpython-{major}{minor}{abiflags}.so",
-                        base = base,
-                        major = self.major,
-                        minor = self.minor,
-                        abiflags = self.abiflags,
-                    )
-                } else if self.target.is_unix() {
-                    format!(
-                        "{base}.cpython-{major}{minor}{abiflags}-{platform}.so",
-                        base = base,
-                        major = self.major,
-                        minor = self.minor,
-                        abiflags = self.abiflags,
-                        platform = platform,
-                    )
-                } else {
-                    format!(
-                        "{base}.cp{major}{minor}-{platform}.pyd",
-                        base = base,
-                        major = self.major,
-                        minor = self.minor,
-                        platform = platform
-                    )
-                }
-            }
-            InterpreterKind::PyPy => format!(
-                "{base}{ext_suffix}",
-                base = base,
-                ext_suffix = self
-                    .ext_suffix
-                    .clone()
-                    .expect("PyPy's syconfig didn't define an `EXT_SUFFIX` ಠ_ಠ")
-            ),
-        }
+        format!(
+            "{base}{ext_suffix}",
+            base = base,
+            ext_suffix = self
+                .ext_suffix
+                .clone()
+                .expect("syconfig didn't define an `EXT_SUFFIX` ಠ_ಠ")
+        )
     }
 
     /// Checks whether the given command is a python interpreter and returns a
--- a/src/target.rs
+++ b/src/target.rs
@@ -167,30 +167,6 @@ impl Target {
         }
     }
 
-    /// Returns the platform for the tag in the shared libraries file name
-    pub fn get_shared_platform_tag(&self) -> &'static str {
-        match (&self.os, &self.arch) {
-            (Os::FreeBsd, _) => "", // according imp.get_suffixes(), there are no such
-            (Os::Linux, Arch::Aarch64) => "aarch64-linux-gnu", // aka armv8-linux-gnueabihf
-            (Os::Linux, Arch::Armv7L) => "arm-linux-gnueabihf",
-            (Os::Linux, Arch::Powerpc64) => "powerpc64-linux-gnu",
-            (Os::Linux, Arch::Powerpc64Le) => "powerpc64le-linux-gnu",
-            (Os::Linux, Arch::X86) => "i386-linux-gnu", // not i686
-            (Os::Linux, Arch::X86_64) => "x86_64-linux-gnu",
-            (Os::Linux, Arch::S390X) => "s390x-linux-gnu",
-            (Os::Macos, Arch::X86_64) => "darwin",
-            (Os::Macos, Arch::Aarch64) => "darwin",
-            (Os::Windows, Arch::X86) => "win32",
-            (Os::Windows, Arch::X86_64) => "win_amd64",
-            (Os::Macos, _) => {
-                panic!("unsupported macOS Arch should not have reached get_shared_platform_tag()")
-            }
-            (Os::Windows, _) => {
-                panic!("unsupported Windows Arch should not have reached get_shared_platform_tag()")
-            }
-        }
-    }
-
     /// Returns the name python uses in `sys.platform` for this os
     pub fn get_python_os(&self) -> &str {
         match self.os {

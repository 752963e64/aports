From 7c49162fb18ee886bb9138585e23694daa63a3f1 Mon Sep 17 00:00:00 2001
From: Luca Weiss <luca@z3ntu.xyz>
Date: Wed, 28 Oct 2020 22:01:55 +0100
Subject: [PATCH] hostnamed: add support for Chassis, Deployment & Location
 properties

---
 data/org.freedesktop.hostname1.xml |  15 ++
 src/hostnamed.c                    | 219 ++++++++++++++++++++++++++++-
 2 files changed, 233 insertions(+), 1 deletion(-)

diff --git a/data/org.freedesktop.hostname1.xml b/data/org.freedesktop.hostname1.xml
index e351096..1a4aa0d 100644
--- a/data/org.freedesktop.hostname1.xml
+++ b/data/org.freedesktop.hostname1.xml
@@ -19,9 +19,24 @@
             <arg direction="in" type="s" name="name"/>
             <arg direction="in" type="b" name="user_interaction"/>
         </method>
+        <method name="SetChassis">
+            <arg direction="in" type="s" name="chassis"/>
+            <arg direction="in" type="b" name="interactive"/>
+        </method>
+        <method name="SetDeployment">
+            <arg direction="in" type="s" name="deployment"/>
+            <arg direction="in" type="b" name="interactive"/>
+        </method>
+        <method name="SetLocation">
+            <arg direction="in" type="s" name="location"/>
+            <arg direction="in" type="b" name="interactive"/>
+        </method>
         <property name="Hostname" type="s" access="read"/>
         <property name="StaticHostname" type="s" access="read"/>
         <property name="PrettyHostname" type="s" access="read"/>
         <property name="IconName" type="s" access="read"/>
+        <property name="Chassis" type="s" access="read"/>
+        <property name="Deployment" type="s" access="read"/>
+        <property name="Location" type="s" access="read"/>
     </interface>
 </node>
diff --git a/src/hostnamed.c b/src/hostnamed.c
index 92ca794..b837dc8 100644
--- a/src/hostnamed.c
+++ b/src/hostnamed.c
@@ -60,6 +60,9 @@ static GFile *static_hostname_file = NULL;
 G_LOCK_DEFINE_STATIC (static_hostname);
 static gchar *pretty_hostname = NULL;
 static gchar *icon_name = NULL;
+static gchar *chassis = NULL;
+static gchar *deployment = NULL;
+static gchar *location = NULL;
 static GFile *machine_info_file = NULL;
 G_LOCK_DEFINE_STATIC (machine_info);
 
@@ -375,6 +378,183 @@ on_handle_set_icon_name (OpenrcSettingsdHostnamedHostname1 *hostname1,
     return TRUE; /* Always return TRUE to indicate signal has been handled */
 }
 
+static void
+on_handle_set_chassis_authorized_cb (GObject *source_object,
+                                     GAsyncResult *res,
+                                     gpointer user_data)
+{
+    GError *err = NULL;
+    struct invoked_name *data;
+
+    data = (struct invoked_name *) user_data;
+    if (!check_polkit_finish (res, &err)) {
+        g_dbus_method_invocation_return_gerror (data->invocation, err);
+        goto out;
+    }
+
+    G_LOCK (machine_info);
+    /* Don't allow a null chassis */
+    if (data->name == NULL)
+        data->name = g_strdup ("");
+
+    if (!shell_parser_set_and_save (machine_info_file, &err, "CHASSIS", NULL, data->name, NULL)) {
+        g_dbus_method_invocation_return_gerror (data->invocation, err);
+        G_UNLOCK (machine_info);
+        goto out;
+    }
+
+    g_free (chassis);
+    chassis = data->name; /* data->name is g_strdup-ed already */
+    openrc_settingsd_hostnamed_hostname1_complete_set_chassis (hostname1, data->invocation);
+    openrc_settingsd_hostnamed_hostname1_set_chassis (hostname1, chassis);
+    G_UNLOCK (machine_info);
+
+  out:
+    g_free (data);
+    if (err != NULL)
+        g_error_free (err);
+}
+
+static gboolean
+on_handle_set_chassis (OpenrcSettingsdHostnamedHostname1 *hostname1,
+                       GDBusMethodInvocation *invocation,
+                       const gchar *name,
+                       const gboolean user_interaction,
+                       gpointer user_data)
+{
+    if (read_only)
+        g_dbus_method_invocation_return_dbus_error (invocation,
+                                                    DBUS_ERROR_NOT_SUPPORTED,
+                                                    "openrc-settingsd hostnamed is in read-only mode");
+    else {
+        struct invoked_name *data;
+        data = g_new0 (struct invoked_name, 1);
+        data->invocation = invocation;
+        data->name = g_strdup (name);
+        check_polkit_async (g_dbus_method_invocation_get_sender (invocation), "org.freedesktop.hostname1.set-machine-info", user_interaction, on_handle_set_chassis_authorized_cb, data);
+    }
+
+    return TRUE; /* Always return TRUE to indicate signal has been handled */
+}
+
+static void
+on_handle_set_deployment_authorized_cb (GObject *source_object,
+                                        GAsyncResult *res,
+                                        gpointer user_data)
+{
+    GError *err = NULL;
+    struct invoked_name *data;
+
+    data = (struct invoked_name *) user_data;
+    if (!check_polkit_finish (res, &err)) {
+        g_dbus_method_invocation_return_gerror (data->invocation, err);
+        goto out;
+    }
+
+    G_LOCK (machine_info);
+    /* Don't allow a null deployment */
+    if (data->name == NULL)
+        data->name = g_strdup ("");
+
+    if (!shell_parser_set_and_save (machine_info_file, &err, "DEPLOYMENT", NULL, data->name, NULL)) {
+        g_dbus_method_invocation_return_gerror (data->invocation, err);
+        G_UNLOCK (machine_info);
+        goto out;
+    }
+
+    g_free (deployment);
+    deployment = data->name; /* data->name is g_strdup-ed already */
+    openrc_settingsd_hostnamed_hostname1_complete_set_deployment (hostname1, data->invocation);
+    openrc_settingsd_hostnamed_hostname1_set_deployment (hostname1, deployment);
+    G_UNLOCK (machine_info);
+
+  out:
+    g_free (data);
+    if (err != NULL)
+        g_error_free (err);
+}
+
+static gboolean
+on_handle_set_deployment (OpenrcSettingsdHostnamedHostname1 *hostname1,
+                          GDBusMethodInvocation *invocation,
+                          const gchar *name,
+                          const gboolean user_interaction,
+                          gpointer user_data)
+{
+    if (read_only)
+        g_dbus_method_invocation_return_dbus_error (invocation,
+                                                    DBUS_ERROR_NOT_SUPPORTED,
+                                                    "openrc-settingsd hostnamed is in read-only mode");
+    else {
+        struct invoked_name *data;
+        data = g_new0 (struct invoked_name, 1);
+        data->invocation = invocation;
+        data->name = g_strdup (name);
+        check_polkit_async (g_dbus_method_invocation_get_sender (invocation), "org.freedesktop.hostname1.set-machine-info", user_interaction, on_handle_set_deployment_authorized_cb, data);
+    }
+
+    return TRUE; /* Always return TRUE to indicate signal has been handled */
+}
+
+static void
+on_handle_set_location_authorized_cb (GObject *source_object,
+                                      GAsyncResult *res,
+                                      gpointer user_data)
+{
+    GError *err = NULL;
+    struct invoked_name *data;
+
+    data = (struct invoked_name *) user_data;
+    if (!check_polkit_finish (res, &err)) {
+        g_dbus_method_invocation_return_gerror (data->invocation, err);
+        goto out;
+    }
+
+    G_LOCK (machine_info);
+    /* Don't allow a null location */
+    if (data->name == NULL)
+        data->name = g_strdup ("");
+
+    if (!shell_parser_set_and_save (machine_info_file, &err, "LOCATION", NULL, data->name, NULL)) {
+        g_dbus_method_invocation_return_gerror (data->invocation, err);
+        G_UNLOCK (machine_info);
+        goto out;
+    }
+
+    g_free (location);
+    location = data->name; /* data->name is g_strdup-ed already */
+    openrc_settingsd_hostnamed_hostname1_complete_set_location (hostname1, data->invocation);
+    openrc_settingsd_hostnamed_hostname1_set_location (hostname1, location);
+    G_UNLOCK (machine_info);
+
+  out:
+    g_free (data);
+    if (err != NULL)
+        g_error_free (err);
+}
+
+static gboolean
+on_handle_set_location (OpenrcSettingsdHostnamedHostname1 *hostname1,
+                        GDBusMethodInvocation *invocation,
+                        const gchar *name,
+                        const gboolean user_interaction,
+                        gpointer user_data)
+{
+    if (read_only)
+        g_dbus_method_invocation_return_dbus_error (invocation,
+                                                    DBUS_ERROR_NOT_SUPPORTED,
+                                                    "openrc-settingsd hostnamed is in read-only mode");
+    else {
+        struct invoked_name *data;
+        data = g_new0 (struct invoked_name, 1);
+        data->invocation = invocation;
+        data->name = g_strdup (name);
+        check_polkit_async (g_dbus_method_invocation_get_sender (invocation), "org.freedesktop.hostname1.set-machine-info", user_interaction, on_handle_set_location_authorized_cb, data);
+    }
+
+    return TRUE; /* Always return TRUE to indicate signal has been handled */
+}
+
 static void
 on_bus_acquired (GDBusConnection *connection,
                  const gchar     *bus_name,
@@ -391,11 +571,17 @@ on_bus_acquired (GDBusConnection *connection,
     openrc_settingsd_hostnamed_hostname1_set_static_hostname (hostname1, static_hostname);
     openrc_settingsd_hostnamed_hostname1_set_pretty_hostname (hostname1, pretty_hostname);
     openrc_settingsd_hostnamed_hostname1_set_icon_name (hostname1, icon_name);
+    openrc_settingsd_hostnamed_hostname1_set_chassis (hostname1, chassis);
+    openrc_settingsd_hostnamed_hostname1_set_deployment (hostname1, deployment);
+    openrc_settingsd_hostnamed_hostname1_set_location (hostname1, location);
 
     g_signal_connect (hostname1, "handle-set-hostname", G_CALLBACK (on_handle_set_hostname), NULL);
     g_signal_connect (hostname1, "handle-set-static-hostname", G_CALLBACK (on_handle_set_static_hostname), NULL);
     g_signal_connect (hostname1, "handle-set-pretty-hostname", G_CALLBACK (on_handle_set_pretty_hostname), NULL);
     g_signal_connect (hostname1, "handle-set-icon-name", G_CALLBACK (on_handle_set_icon_name), NULL);
+    g_signal_connect (hostname1, "handle-set-chassis", G_CALLBACK (on_handle_set_chassis), NULL);
+    g_signal_connect (hostname1, "handle-set-deployment", G_CALLBACK (on_handle_set_deployment), NULL);
+    g_signal_connect (hostname1, "handle-set-location", G_CALLBACK (on_handle_set_location), NULL);
 
     if (!g_dbus_interface_skeleton_export (G_DBUS_INTERFACE_SKELETON (hostname1),
                                            connection,
@@ -451,6 +637,7 @@ hostnamed_init (gboolean _read_only)
         g_error_free (err);
         err = NULL;
     }
+
     pretty_hostname = shell_source_var (machine_info_file, "${PRETTY_HOSTNAME}", &err);
     if (pretty_hostname == NULL)
         pretty_hostname = g_strdup ("");
@@ -459,6 +646,7 @@ hostnamed_init (gboolean _read_only)
         g_error_free (err);
         err = NULL;
     }
+
     icon_name = shell_source_var (machine_info_file, "${ICON_NAME}", &err);
     if (icon_name == NULL)
         icon_name = g_strdup ("");
@@ -467,12 +655,38 @@ hostnamed_init (gboolean _read_only)
         g_error_free (err);
         err = NULL;
     }
-
     if (icon_name == NULL || *icon_name == 0) {
         g_free (icon_name);
         icon_name = guess_icon_name ();
     }
 
+    chassis = shell_source_var (machine_info_file, "${CHASSIS}", &err);
+    if (chassis == NULL)
+        chassis = g_strdup ("");
+    if (err != NULL) {
+        g_debug ("%s", err->message);
+        g_error_free (err);
+        err = NULL;
+    }
+
+    deployment = shell_source_var (machine_info_file, "${DEPLOYMENT}", &err);
+    if (deployment == NULL)
+        deployment = g_strdup ("");
+    if (err != NULL) {
+        g_debug ("%s", err->message);
+        g_error_free (err);
+        err = NULL;
+    }
+
+    location = shell_source_var (machine_info_file, "${LOCATION}", &err);
+    if (location == NULL)
+        location = g_strdup ("");
+    if (err != NULL) {
+        g_debug ("%s", err->message);
+        g_error_free (err);
+        err = NULL;
+    }
+
     read_only = _read_only;
 
     bus_id = g_bus_own_name (G_BUS_TYPE_SYSTEM,
@@ -495,6 +709,9 @@ hostnamed_destroy (void)
     g_free (static_hostname);
     g_free (pretty_hostname);
     g_free (icon_name);
+    g_free (chassis);
+    g_free (deployment);
+    g_free (location);
 
     g_object_unref (static_hostname_file);
     g_object_unref (machine_info_file);
-- 
2.25.1


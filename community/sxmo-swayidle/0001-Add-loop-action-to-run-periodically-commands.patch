From 61b9d308a53f9f82e3f4aeaf68ed5b033b98cfc5 Mon Sep 17 00:00:00 2001
From: Stacy Harper <contact@stacyharper.net>
Date: Tue, 4 Jan 2022 19:17:05 +0100
Subject: [PATCH] Add loop action to run periodically commands

Signed-off-by: Stacy Harper <contact@stacyharper.net>
---
 main.c         | 27 +++++++++++++++++++++++++++
 swayidle.1.scd |  4 ++++
 2 files changed, 31 insertions(+)

diff --git a/main.c b/main.c
index a33d646..1a790e4 100644
--- a/main.c
+++ b/main.c
@@ -51,6 +51,7 @@ struct swayidle_timeout_cmd {
 	char *resume_cmd;
 	bool idlehint;
 	bool resume_pending;
+	bool loop;
 };
 
 struct seat {
@@ -631,6 +632,10 @@ static void handle_idle(void *data, struct org_kde_kwin_idle_timeout *timer) {
 #endif
 	if (cmd->idle_cmd) {
 		cmd_exec(cmd->idle_cmd);
+
+		if (cmd->loop) {
+			register_timeout(cmd, cmd->timeout);
+		}
 	}
 }
 
@@ -713,6 +718,25 @@ static int parse_timeout(int argc, char **argv) {
 	return result;
 }
 
+static int parse_loop(int argc, char **argv) {
+	if (argc < 3) {
+		swayidle_log(LOG_ERROR, "Too few parameters to loop command. "
+				"Usage: loop <seconds> <command>");
+		exit(-1);
+	}
+
+	struct swayidle_timeout_cmd *cmd = build_timeout_cmd(argc, argv);
+
+	swayidle_log(LOG_DEBUG, "Register loop timeout at %d ms", cmd->timeout);
+	swayidle_log(LOG_DEBUG, "Setup idle");
+	cmd->loop = true;
+	cmd->idle_cmd = parse_command(argc - 2, &argv[2]);
+
+	wl_list_insert(&state.timeout_cmds, &cmd->link);
+
+	return 3;
+}
+
 static int parse_sleep(int argc, char **argv) {
 #if !HAVE_SYSTEMD && !HAVE_ELOGIND
 	swayidle_log(LOG_ERROR, "%s not supported: swayidle was compiled "
@@ -854,6 +878,9 @@ static int parse_args(int argc, char *argv[], char **config_path) {
 		if (!strcmp("timeout", argv[i])) {
 			swayidle_log(LOG_DEBUG, "Got timeout");
 			i += parse_timeout(argc - i, &argv[i]);
+		} else if (!strcmp("loop", argv[i])) {
+			swayidle_log(LOG_DEBUG, "Got loop");
+			i += parse_loop(argc - i, &argv[i]);
 		} else if (!strcmp("before-sleep", argv[i])) {
 			swayidle_log(LOG_DEBUG, "Got before-sleep");
 			i += parse_sleep(argc - i, &argv[i]);
diff --git a/swayidle.1.scd b/swayidle.1.scd
index 316dc3c..d3a119d 100644
--- a/swayidle.1.scd
+++ b/swayidle.1.scd
@@ -44,6 +44,10 @@ command line and in the config file.
 	If you specify "resume <resume command>", _resume command_ will be run when
 	there is activity again.
 
+*loop* <timeout> <timeout command>
+	Execute _timeout command_ periodically if there is no activity for <timeout> 
+	seconds.
+
 *before-sleep* <command>
 	If built with systemd support, executes _command_ before systemd puts the
 	computer to sleep.
-- 
2.34.1


Patch-Source: https://github.com/WebKit/WebKit/pull/5086
From 7c2ff8bbc16098e4401577a9cc06bcf196d8bf89 Mon Sep 17 00:00:00 2001
From: Daniel Kolesa <dkolesa@igalia.com>
Date: Sat, 8 Oct 2022 13:40:37 +0200
Subject: [PATCH] [JSC][RISCV64] Use GOT for non-local symbols in backend

https://bugs.webkit.org/show_bug.cgi?id=246157

Reviewed by NOBODY (OOPS!).

The lla and la pseudo-instructions are identical when non-PIC,
but in PIC lla enforces pc-relative addressing unconditionally.
This works with bfd for some reason (likely silently rewriting it
or emitting textrels) but with lld it fails to build with messages
like:

ld: error: relocation R_RISCV_PCREL_HI20 cannot be used against symbol 'g_opcodeMap'; recompile with -fPIC

This is because g_opcodeMap (and others) are global, thus a GOT
lookup is necessary (as there is no relative address we can load).
---
 Source/JavaScriptCore/offlineasm/riscv64.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Source/JavaScriptCore/offlineasm/riscv64.rb b/Source/JavaScriptCore/offlineasm/riscv64.rb
index fab7ba38bc53..2805231d6701 100644
--- a/Source/JavaScriptCore/offlineasm/riscv64.rb
+++ b/Source/JavaScriptCore/offlineasm/riscv64.rb
@@ -449,7 +449,7 @@ def riscv64LowerAddressLoads(list)
                     end
                 when [LabelReference, RegisterID]
                     label, dest = node.operands[0], node.operands[1]
-                    newList << Instruction.new(node.codeOrigin, "rv_lla", [label, dest])
+                    newList << Instruction.new(node.codeOrigin, "rv_la", [label, dest])
                     if label.offset != 0
                         offset = Immediate.new(node.codeOrigin, label.offset)
                         if offset.riscv64RequiresLoad

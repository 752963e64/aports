
diff --git a/js/src/wasm/WasmBaselineCompile.cpp b/js/src/wasm/WasmBaselineCompile.cpp
--- a/js/src/wasm/WasmBaselineCompile.cpp
+++ b/js/src/wasm/WasmBaselineCompile.cpp
@@ -650,25 +650,26 @@ class BaseRegAlloc {
     bool available = !availGPR.empty();
     freeGPR(r);
     return available;
 #endif
   }
 
   template <MIRType t>
   bool hasFPU() {
-    return availFPU.hasAny<RegTypeOf<t>::value>();
-  }
-
 #ifdef RABALDR_SIDEALLOC_V128
-  template <>
-  bool hasFPU<MIRType::Simd128>() {
-    MOZ_CRASH("Should not happen");
-  }
-#endif
+    // Workaround for GCC problem, bug 1677690
+    if constexpr (t == MIRType::Simd128) {
+      MOZ_CRASH("Should not happen");
+    } else
+#endif
+    {
+      return availFPU.hasAny<RegTypeOf<t>::value>();
+    }
+  }
 
   bool isAvailableGPR(Register r) { return availGPR.has(r); }
 
   bool isAvailableFPU(FloatRegister r) {
 #ifdef RABALDR_SIDEALLOC_V128
     MOZ_ASSERT(!r.isSimd128());
 #endif
     return availFPU.has(r);
@@ -741,25 +742,26 @@ class BaseRegAlloc {
     MOZ_ASSERT(!r.isSimd128());
 #endif
     MOZ_ASSERT(isAvailableFPU(r));
     availFPU.take(r);
   }
 
   template <MIRType t>
   FloatRegister allocFPU() {
-    return availFPU.takeAny<RegTypeOf<t>::value>();
-  }
-
 #ifdef RABALDR_SIDEALLOC_V128
-  template <>
-  FloatRegister allocFPU<MIRType::Simd128>() {
-    MOZ_CRASH("Should not happen");
-  }
-#endif
+    // Workaround for GCC problem, bug 1677690
+    if constexpr (t == MIRType::Simd128) {
+      MOZ_CRASH("Should not happen");
+    } else
+#endif
+    {
+      return availFPU.takeAny<RegTypeOf<t>::value>();
+    }
+  }
 
   void freeGPR(Register r) { availGPR.add(r); }
 
   void freeInt64(Register64 r) {
 #ifdef JS_PUNBOX64
     freeGPR(r.reg);
 #else
     freeGPR(r.low);





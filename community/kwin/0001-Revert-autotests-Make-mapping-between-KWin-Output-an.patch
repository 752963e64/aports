From c7a9651fc708d7fef1c6302bb9af810528da3f1b Mon Sep 17 00:00:00 2001
From: Bart Ribbers <bribbers@disroot.org>
Date: Thu, 15 Sep 2022 19:39:40 +0200
Subject: [PATCH] Revert "autotests: Make mapping between KWin::Output and
 wl_output more robust"

This reverts commit a295db01d9d05ceb46ff49ccf7fdbec2b862a2a3.
---
 autotests/integration/kwin_wayland_test.h     |  1 -
 autotests/integration/screen_changes_test.cpp | 16 ++++++----------
 autotests/integration/test_helpers.cpp        | 10 ----------
 autotests/integration/xdgshellwindow_test.cpp |  8 ++++----
 4 files changed, 10 insertions(+), 25 deletions(-)

diff --git a/autotests/integration/kwin_wayland_test.h b/autotests/integration/kwin_wayland_test.h
index bb63f5641..6573ef22b 100644
--- a/autotests/integration/kwin_wayland_test.h
+++ b/autotests/integration/kwin_wayland_test.h
@@ -570,7 +570,6 @@ KWayland::Client::AppMenuManager *waylandAppMenuManager();
 WaylandOutputManagementV2 *waylandOutputManagementV2();
 KWayland::Client::TextInputManager *waylandTextInputManager();
 QVector<KWayland::Client::Output *> waylandOutputs();
-KWayland::Client::Output *waylandOutput(const QString &name);
 QVector<WaylandOutputDeviceV2 *> waylandOutputDevicesV2();
 
 bool waitForWaylandSurface(Window *window);
diff --git a/autotests/integration/screen_changes_test.cpp b/autotests/integration/screen_changes_test.cpp
index 25bdb3baf..cf890791b 100644
--- a/autotests/integration/screen_changes_test.cpp
+++ b/autotests/integration/screen_changes_test.cpp
@@ -115,28 +115,24 @@ void ScreenChangesTest::testScreenAddRemove()
     QVERIFY(o1->isValid());
     QSignalSpy o1ChangedSpy(o1.get(), &KWayland::Client::Output::changed);
     QVERIFY(o1ChangedSpy.wait());
-    KWin::Output *serverOutput1 = kwinApp()->platform()->findOutput(o1->name()); // use wl_output.name to find the compositor side output
-    QCOMPARE(o1->globalPosition(), serverOutput1->geometry().topLeft());
-    QCOMPARE(o1->pixelSize(), serverOutput1->modeSize());
+    QCOMPARE(o1->geometry(), geometries.at(0));
     std::unique_ptr<KWayland::Client::Output> o2(registry.createOutput(outputAnnouncedSpy.last().first().value<quint32>(), outputAnnouncedSpy.last().last().value<quint32>()));
     QVERIFY(o2->isValid());
     QSignalSpy o2ChangedSpy(o2.get(), &KWayland::Client::Output::changed);
     QVERIFY(o2ChangedSpy.wait());
-    KWin::Output *serverOutput2 = kwinApp()->platform()->findOutput(o2->name()); // use wl_output.name to find the compositor side output
-    QCOMPARE(o2->globalPosition(), serverOutput2->geometry().topLeft());
-    QCOMPARE(o2->pixelSize(), serverOutput2->modeSize());
+    QCOMPARE(o2->geometry(), geometries.at(1));
 
     // and check XDGOutput is synced
     std::unique_ptr<XdgOutput> xdgO1(xdgOutputManager->getXdgOutput(o1.get()));
     QSignalSpy xdgO1ChangedSpy(xdgO1.get(), &XdgOutput::changed);
     QVERIFY(xdgO1ChangedSpy.wait());
-    QCOMPARE(xdgO1->logicalPosition(), serverOutput1->geometry().topLeft());
-    QCOMPARE(xdgO1->logicalSize(), serverOutput1->geometry().size());
+    QCOMPARE(xdgO1->logicalPosition(), geometries.at(0).topLeft());
+    QCOMPARE(xdgO1->logicalSize(), geometries.at(0).size());
     std::unique_ptr<XdgOutput> xdgO2(xdgOutputManager->getXdgOutput(o2.get()));
     QSignalSpy xdgO2ChangedSpy(xdgO2.get(), &XdgOutput::changed);
     QVERIFY(xdgO2ChangedSpy.wait());
-    QCOMPARE(xdgO2->logicalPosition(), serverOutput2->geometry().topLeft());
-    QCOMPARE(xdgO2->logicalSize(), serverOutput2->geometry().size());
+    QCOMPARE(xdgO2->logicalPosition(), geometries.at(1).topLeft());
+    QCOMPARE(xdgO2->logicalSize(), geometries.at(1).size());
 
     QVERIFY(xdgO1->name().startsWith("Virtual-"));
     QVERIFY(xdgO1->name() != xdgO2->name());
diff --git a/autotests/integration/test_helpers.cpp b/autotests/integration/test_helpers.cpp
index 4c4c87b11..1883a6791 100644
--- a/autotests/integration/test_helpers.cpp
+++ b/autotests/integration/test_helpers.cpp
@@ -638,16 +638,6 @@ QVector<KWayland::Client::Output *> waylandOutputs()
     return s_waylandConnection.outputs;
 }
 
-KWayland::Client::Output *waylandOutput(const QString &name)
-{
-    for (KWayland::Client::Output *output : std::as_const(s_waylandConnection.outputs)) {
-        if (output->name() == name) {
-            return output;
-        }
-    }
-    return nullptr;
-}
-
 QVector<KWin::Test::WaylandOutputDeviceV2 *> waylandOutputDevicesV2()
 {
     return s_waylandConnection.outputDevicesV2;
diff --git a/autotests/integration/xdgshellwindow_test.cpp b/autotests/integration/xdgshellwindow_test.cpp
index ea5b543c2..76b9a4ffa 100644
--- a/autotests/integration/xdgshellwindow_test.cpp
+++ b/autotests/integration/xdgshellwindow_test.cpp
@@ -592,7 +592,7 @@ void TestXdgShellWindow::testFullscreenMultipleOutputs()
     // this test verifies that kwin will place fullscreen windows in the outputs its instructed to
 
     const auto outputs = workspace()->outputs();
-    for (KWin::Output *output : outputs) {
+    for (int i = 0; i < outputs.count(); ++i) {
         Test::XdgToplevel::States states;
 
         std::unique_ptr<KWayland::Client::Surface> surface = Test::createSurface();
@@ -619,10 +619,10 @@ void TestXdgShellWindow::testFullscreenMultipleOutputs()
         QVERIFY(states.testFlag(Test::XdgToplevel::State::Activated));
 
         // Ask the compositor to show the window in full screen mode.
-        shellSurface->set_fullscreen(*Test::waylandOutput(output->name()));
+        shellSurface->set_fullscreen(*Test::waylandOutputs()[i]);
         QVERIFY(surfaceConfigureRequestedSpy.wait());
         QCOMPARE(surfaceConfigureRequestedSpy.count(), 2);
-        QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value<QSize>(), output->geometry().size());
+        QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value<QSize>(), outputs[i]->geometry().size());
 
         shellSurface->xdgSurface()->ack_configure(surfaceConfigureRequestedSpy.last().at(0).value<quint32>());
         Test::render(surface.get(), toplevelConfigureRequestedSpy.last().at(0).value<QSize>(), Qt::red);
@@ -634,7 +634,7 @@ void TestXdgShellWindow::testFullscreenMultipleOutputs()
 
         QVERIFY(window->isFullScreen());
 
-        QCOMPARE(window->frameGeometry(), output->geometry());
+        QCOMPARE(window->frameGeometry(), outputs[i]->geometry());
     }
 }
 
-- 
2.37.3


# Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>
# Contributor: Antoine Martin (ayakael) <dev@ayakael.net>

# secfixes:
#   6.0.106-r0:
#     - CVE-2022-30184
#   6.0.108-r0:
#     - CVE-2022-34716

pkgname=dotnet6-build
pkgver=6.0.108
pkgrel=3
_gittag=v$pkgver
_giturl="https://github.com/dotnet/installer"
_testtag=ddc8576cc4ffccf6b102eed55125b2596336e684
_bunnytag=71880bd94711519f7b786248a88a827a401207a2
_patches="
	aspnetcore_musl-build-fix.patch
	build_arm-build.patch
	build_musl-build-fix.patch
	command-line-api_fix-musl-build.patch
	check_rid-alpine-generation.diff
	installer_arm-build.patch
	installer_forgotten-MicrosoftAspNetCoreAppRuntimePac.patch
	installer_musl-build-fix.patch
	installer_portable-runtime-id.patch
	installer_reprodicible-tarball.patch
	runtime_detect-armv8.patch
	runtime_deprecate-icu-ucol-safeclone.patch
	runtime_fix-musl-123.patch
	runtime_lld-fix.patch
	runtime_non-portable-distrorid-fix-alpine.patch
	runtime_rid-alpine-317.patch
	sdk_add-zsh-compdef-completion-script.patch
	sdk_portable-runtime-id.patch
	sdk_telemetry-optout.patch
	"

_pkgver_macro=${pkgver%.*}
_pkgver_prior=${pkgver%.*.*}
_pkgver_name=${_pkgver_macro//[.0]}
pkgdesc="The .NET $_pkgver_macro bootstrap"
arch="x86_64 aarch64 armv7"
url=https://www.microsoft.com/net/core
license="MIT"
# hack for dotnetx-build to be able to pull itself for bootstrapping
provides="dotnet$_pkgver_name-bootstrap"
provider_priority=$_pkgver_prior
checkdepends="
	babeltrace
	binutils
	coreutils
	file
	gawk
	jq
	lttng-tools
	npm
	procps
	sed
	strace
	util-linux-misc
	which
	"
makedepends="
	bash
	clang
	cmake
	dotnet$_pkgver_name-bootstrap
	dotnet$_pkgver_name-bootstrap-artifacts
	dotnet$_pkgver_name-stage0
	findutils
	git
	grep
	icu-data-full
	icu-dev
	inetutils-syslogd
	krb5-dev
	libgit2-dev
	libintl
	libunwind-dev
	libxml2-dev
	libxml2-utils
	linux-headers
	lld-dev
	lldb-dev
	llvm-dev
	lttng-ust-dev
	nodejs
	openssl-dev
	pigz
	rsync
	tar
	zlib-dev
	"
subpackages="
	dotnet$_pkgver_name-artifacts
	dotnet$_pkgver_name-sdk
	dotnet$_pkgver_name-templates:templates:noarch
	dotnet-zsh-completion:zshcomp:noarch
	dotnet-bash-completion:bashcomp:noarch
	dotnet-doc
	netstandard21-targeting-pack:netstandard_targeting_pack:noarch
	"
source="
	dotnet-v$pkgver.tar.gz::https://repo.gpg.nz/apk/archives/dotnet-v$pkgver.tar.gz
	dotnet-testsuite-$_testtag.tar.gz::https://github.com/redhat-developer/dotnet-regular-tests/archive/$_testtag.tar.gz
	dotnet-bunny-$_bunnytag.tar.gz::https://github.com/redhat-developer/dotnet-bunny/archive/$_bunnytag.tar.gz
	$_patches
	"
builddir="$srcdir"/dotnet-v$pkgver
_checkdir="$srcdir"/dotnet-bunny-${_bunnytag/v}
_testdir="$srcdir"/dotnet-regular-tests-$_testtag
_cli_root="$srcdir"/bootstrap
_artifactsdir="$_cli_root"/artifacts
_libdir="/usr/lib"

case $CARCH in
	x86) _dotnet_arch="x86";;
	x86_64) _dotnet_arch="x64";;
	aarch64) _dotnet_arch="arm64";;
	armv7|armhf) _dotnet_arch="arm";;
	s390x) _dotnet_arch="s390x";;
	ppc64le) _dotnet_arch="ppc64le";;
esac

# Build doesn't set all the right executable bits for the right file types
_fix_executable() {
	# add executable bit
	find "$1" -type f \( \
		-name 'apphost' -o \
		-name 'singlefilehost' -o \
		-name 'lib*so' \
			\) \
		-exec chmod +x '{}' \;

	# remove executable bit
	find "$1" -type f \( \
		-name '*.a' -o \
		-name '*.dll' -o \
		-name '*.h' -o \
		-name '*.json' -o \
		-name '*.pdb' -o \
		-name '*.props' -o \
		-name '*.pubxml' -o \
		-name '*.targets' -o \
		-name '*.txt' -o \
		-name '*.xml' \
			\) \
		-exec chmod -x '{}' \;
}

# generates tarball containing all components built by dotnet
snapshot() {
	local _upload="repo.gpg.nz:/archive/$pkgname/"
	local _pkg=$SRCDEST/${builddir##*/}.tar.gz
	[ -d "$srcdir" ] || { mkdir -p "$srcdir" && cd "$srcdir"; } && cd "$srcdir"
	[ -d "installer" ] || { git clone $_giturl --branch $_gittag && cd "$srcdir"/installer; } && cd "$srcdir"/installer
	patch -Np1 -i "$startdir"/installer_reprodicible-tarball.patch || true

	_InitializeDotNetCli="$_libdir/dotnet" DOTNET_INSTALL_DIR="$_libdir/dotnet" DotNetBuildFromSource=true ./build.sh \
		/p:ArcadeBuildTarball=true \
		/p:TarballDir=$builddir \
		/p:TarballFilePath=$_pkg

	abuild checksum
	msg "Uploading $_pkg"
	rsync -Lave ssh $_pkg $_upload
}

prepare() {
	default_prepare

	# Official crossgen package is broken on arm, x86, s390x
	# see https://github.com/dotnet/runtime/issues/73908
	if [ "$CARCH" = "armhf" ] || [ "$CARCH" = "armv7" ] || [ "$CARCH" = "x86" ] || [ "$CARCH" = "s390x" ]; then
		sed -i 's|<BuildCommandArgs>$(BuildCommandArgs) /p:EnablePackageValidation=false|<BuildCommandArgs>$(BuildCommandArgs) /p:CrossgenOutput=false /p:EnablePackageValidation=false|' repos/aspnetcore.proj
		sed -i 's|<BuildCommandArgs>$(BuildCommandArgs) /p:UsePortableLinuxSharedFramework=false|<BuildCommandArgs>$(BuildCommandArgs) /p:DISABLE_CROSSGEN=True /p:UsePortableLinuxSharedFramework=false|' repos/installer.proj
	fi
	# Using system libunwind is broken on aarch64
	# see https://github.com/dotnet/source-build/issues/2408,
	if [ "$CARCH" != "aarch64" ] && [ "$CARCH" != "armv7" ] && [ "$CARCH" != "armhf" ]; then
		sed -i 's|<InnerBuildArgs>$(InnerBuildArgs) /p:BuildDebPackage=false</InnerBuildArgs>|<InnerBuildArgs>$(InnerBuildArgs) /p:BuildDebPackage=false --cmakeargs -DCLR_CMAKE_USE_SYSTEM_LIBUNWIND=TRUE</InnerBuildArgs>|' src/runtime/eng/SourceBuild.props
	fi

	# patch for check
	patch -p1 -d "$_testdir" -i "$srcdir"/check_rid-alpine-generation.diff

	# dotnet requires its bootstrap to be in a writable dir
	local _bootstrapdir=$(find $_libdir/dotnet/bootstrap/$_pkgver_macro* -maxdepth 0 | sort -r | head -n 1)
	[ -d "$_cli_root" ] || cp -r "$_bootstrapdir" "$_cli_root"

	# ensure that dotnet does not download artifacts provided by dotnet-artifacts
	[ -d "$builddir"/packages/archive ] && rm -r "$builddir"/packages/archive

	# Adjusts OfficialBuildId to current date on tarball
	sed -i "s|<OfficialBuildId>19900101.1</OfficialBuildId>|<OfficialBuildId>$(date +"%Y%m%d.1")</OfficialBuildId>|" "$builddir"/git-info/*
}

build() {
	msg "Building $pkgname-$pkgver"

	ulimit -n 4096

	# Disable use of LTTng as tracing on lttng <=2,13,0 is broken
	# See https://github.com/dotnet/runtime/issues/57784.
	if [ -f "/usr/lib/liblttng-ust.so.1 " ]; then
		export DOTNET_LTTng=0
	fi

	# looks for most recent recent version of _artifactsdir
	local _artifactsdir=$(find $_libdir/dotnet/artifacts/$_pkgver_macro* -maxdepth 0 | sort -r | head -n 1)

	# logs args, else the output is forwarded to log files which isn't ideal in a
	# pipeline environment
	local args="
		/v:minimal
		/p:LogVerbosity=minimal
		/p:MinimalConsoleLogOutput=true
		"

	# Build uses a lot of storage space. This cleans-up as we build for pipelines.
	local args="$args /p:CleanWhileBuilding=true"

	# PrebuiltPackagesPath needs to be set despite --with-packages,
	# as build tools has an error
	local args="$args /p:PrebuiltPackagesPath=$_artifactsdir"

	# between releases, /etc/os-release sometimes has a VERSION_ID that is
	# unsupported by dotnet's Rid format. As mitigation, TargetRid is set
	# manually, rather than letting source-build compute it itself
	# shellcheck disable=SC2034
	. /etc/os-release
	[ -n "${VERSION_ID//[^_]}" ] && local args="$args /p:TargetRid=alpine.${VERSION_ID%_*}-$_dotnet_arch"

	./build.sh \
		--with-sdk "$_cli_root" \
		--with-packages "$_artifactsdir" \
		-- $args
}

check() {
	# Tests timeout (in seconds)
	local _tests_timeout=600
	# Test suite disable flags
	# following tests can only work after packaging step
	local _disabled_tests="man-pages distribution-package bash-completion"
	# we don't care if not latest release and not installed location
	local _disabled_tests="$_disabled_tests release-version-sane install-location"
	# test broken: no musl release for omnisharp
	local _disabled_tests="$_disabled_tests omnisharp"
	# test broken: permission issue on lxc / pipelines
	local _disabled_tests="$_disabled_tests createdump-aspnet workload"
	# liblttng-ust_sys-sdt.h: no 'NT_STAPSDT' on Alpine's lttng-ust package
	# lttng: known issue, see https://github.com/dotnet/runtime/issues/57784
	local _disabled_tests="$_disabled_tests liblttng-ust_sys-sdt.h lttng"
	# {bundled,system}-libunwind: use system version on all but aarch64/armv7, as broken
	# see https://github.com/redhat-developer/dotnet-regular-tests/issues/113
	if [ "$CARCH" != "aarch64" ] && [ "$CARCH" != "armv7" ] && [ "$CARCH" != "armhf" ]; then
		local _disabled_tests="$_disabled_tests bundled-libunwind"
	else
		local _disabled_tests="$_disabled_tests system-libunwind"
	fi
	# publish-ready-to-run: broken due to crossgen2 nupkg on musl-arm64 / musl-arm platform being broken
	# should be fixed with https://github.com/dotnet/runtime/pull/66814
	if [ "$CARCH" = "aarch64" ] || [ "$CARCH" = "armv7" ] || [ "$CARCH" = "armhf" ]; then
		local _disabled_tests="$_disabled_tests publish-ready-to-run publish-ready-to-run-linux"
	fi

	msg "Unpacking produced dotnet"
	export DOTNET_ROOT="$_checkdir/release"
	if [ ! -d "$DOTNET_ROOT" ]; then
		mkdir -p "$DOTNET_ROOT"
		tar --use-compress-program="pigz" \
			-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
			-C "$DOTNET_ROOT" \
			--no-same-owner
	fi
	export PATH="$DOTNET_ROOT:$PATH"
	# some files either should or should not have executable bits
	# (done again during packaging - this is for tests)
	_fix_executable "$DOTNET_ROOT"

	msg "Building turkey test suite"
	if [ ! -d "$_checkdir"/turkey ]; then
		cd "$_checkdir"/Turkey
		dotnet publish \
			-f netcoreapp3.1 \
			-c Release \
			-p:VersionPrefix=1 \
			-p:VersionSuffix="$(git rev-parse --short HEAD)" \
			-o "$_checkdir"/turkey
	fi

	msg "Running test suite"
	cd "$_testdir"
	for i in $_disabled_tests; do
		[ -d "$i" ] && sed -i 's|"enabled": true|"enabled": false|' $i/test.json
	done
	dotnet "$_checkdir"/turkey/Turkey.dll -t $_tests_timeout || local ERROR=true
	if [ $ERROR ]; then
		msg "Check error reported, dumping logs"
		for i in *.log; do
			msg "Dumping $i"
			cat "$i"
		done
		return 1
	fi
}

package() {
	# directory creation
	install -dm 755 \
		"$pkgdir"/$_libdir/dotnet/bootstrap/$pkgver \
		"$pkgdir"/usr/share/man/man1/dotnet

	# unpack build artifacts to bootstrap
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$pkgdir"/$_libdir/dotnet/bootstrap/$pkgver/ \
		--no-same-owner

	# assemble docs
	find "$builddir" -iname 'dotnet*.1' -type f -exec cp '{}' "$pkgdir"/usr/share/man/man1/dotnet/. \;

	# some files either should or should not have executable bits
	_fix_executable "$pkgdir"

	# Disable use of LTTng as tracing on lttng <=2,13,0 is broken
	# See https://github.com/dotnet/runtime/issues/57784.
	if [ -f "/usr/lib/liblttng-ust.so.1 " ]; then
		rm "$pkgdir"/$_libdir/dotnet/bootstrap/*/shared/Microsoft.NETCore.App/*/libcoreclrtraceptprovider.so
	fi
}

sdk() {
	pkgdesc="The .NET $_pkgver_macro SDK"
	depends="
		aspnetcore$_pkgver_name-runtime
		aspnetcore$_pkgver_name-targeting-pack
		dotnet$_pkgver_name-apphost-pack
		dotnet$_pkgver_name-targeting-pack
		dotnet$_pkgver_name-templates
		netstandard21-targeting-pack
		"
	provides="
		dotnet-sdk-$_pkgver_macro=$pkgver-r$pkgrel
		dotnet$_pkgver_name-dev=$pkgver-r$pkgrel
		"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet

	# sdk
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/ \
		--no-same-owner \
		./sdk ./sdk-manifests

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"

	# See https://github.com/dotnet/source-build/issues/2579
	find "$subpkgdir" -type f -name 'testhost.x86' -delete
	find "$subpkgdir" -type f -name 'vstest.console' -delete
}

netstandard_targeting_pack() {
	pkgdesc="The .NET 2.1 Standard targeting pack"
	depends="dotnet-host"
	provides="netstandard-targeting-pack-2.1=$pkgver-r$pkgrel"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet/packs
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/ \
		--no-same-owner \
		./packs/NETStandard.Library.Ref

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"
}

templates() {
	pkgdesc="The .NET $_pkgver_macro templates"
	depends="dotnet-host"
	provides="dotnet-templates-$_pkgver_macro=$pkgver-r$pkgrel"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/ \
		--no-same-owner \
		./templates

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"
}

artifacts() {
	pkgdesc="Internal package for building .NET $_pkgver_macro Software Development Kit"
	# hack to allow artifacts to pull itself
	provides="dotnet$_pkgver_name-bootstrap-artifacts"
	provider_priority=$_pkgver_prior

	# directory creation
	install -dm 755 \
		"$subpkgdir"/$_libdir/dotnet/artifacts/$pkgver \
		"$subpkgdir"/usr/share/licenses

	# extract artifacts to artifacts dir for use by future dotnet builds
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/Private.SourceBuilt.Artifacts.*.tar.gz \
		-C "$subpkgdir"/$_libdir/dotnet/artifacts/$pkgver/ \
		--no-same-owner \
		--exclude '*Intermediate*'
}

zshcomp() {
	depends=""
	pkgdesc="zsh completion for .NET"
	# netstandard21-targeting-pack will always be pulled by any dotnetx-sdk
	# thus pulling this with it for sdk
	install_if="netstandard21-targeting-pack zsh"
	depends="dotnet-host"

	install -dm 755 "$subpkgdir"/usr/share/zsh/site-functions
	install -m 755 "$builddir"/src/sdk/scripts/register-completions.zsh "$subpkgdir"/usr/share/zsh/site-functions/_dotnet
}

bashcomp() {
	depends=""
	pkgdesc="bash completion for .NET"
	# netstandard21-targeting-pack will always be pulled by any dotnetx-sdk
	# thus pulling this with it for sdk
	install_if="netstandard21-targeting-pack bash-completion"
	depends="dotnet-host"

	install -dm 755	"$subpkgdir"/usr/share/bash-completion/completions
	install -m 755 "$builddir"/src/sdk/scripts/register-completions.bash "$subpkgdir"/usr/share/bash-completion/completions/_dotnet
}

doc() {
	default_doc
	pkgdesc="Docs for .NET"

	# licenses
	install -dm 755 "$subpkgdir"/usr/share/licenses/dotnet
	tar --use-compress-program="pigz" \
		-xf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz \
		-C "$subpkgdir"/usr/share/licenses/dotnet/ \
		--no-same-owner \
		./LICENSE.txt ./ThirdPartyNotices.txt
}

sha512sums="
d601d026c09b7ade9fa90762a4f77b8117e7e2b3ef7d6cebd6c0959a201e87e440ce9833f8818ee3f9093abdf6c73b282b1cb4fad2b16a702c9fdfbbdd8abaaa  dotnet-v6.0.108.tar.gz
fff94ca2b01ab360f0ef7d8b5408e49d867733f0008b8b70ebcc8eaaa8e832001510275f075848d24f9f71eb968daf57e30fe24f1ea9d0a38405936f9a2caf26  dotnet-testsuite-ddc8576cc4ffccf6b102eed55125b2596336e684.tar.gz
fc281df5fcf0d31dc9ff7f5b0e870960cfbe3c4fa0f6a6bb50b22c4ee18d2c608c827205bc79bd7f686d77ac917582fc26f68432cdd86c4a33b910c0c7416d09  dotnet-bunny-71880bd94711519f7b786248a88a827a401207a2.tar.gz
4394debb3cfec7bec7f223029c8283fd57b28ad765d47f354c7ca667756cbfc1ae4a51b216a0f81452400f60b58f08347bac327cd717a1947dad737b37cbe3ef  aspnetcore_musl-build-fix.patch
6e9663f466007fc5fa7010e6859f054b6a4e59affa7aae7fd4d9ab4ba8410d4855b680f58f938ad21d0b3d2a7c7b097c7e9494a4dde2c43478ddddbf37539545  build_arm-build.patch
d25690181c9a19d78d1bd757f4add966cf07457c955546b2f1eafcc37a0a5856f04f87e5997f2300f40013237675d2bf4605caab01ad04a90a526cb38d8fc55a  build_musl-build-fix.patch
a0b3044998bdcecb33862e08e3c04c4afbeee1551d35ac46f66ae5d87cd679739fcda1651787a8698b1362eb9ce79e3b04980bf9e33f4d64bfa1247a59c4bdfc  command-line-api_fix-musl-build.patch
941b430b55e323f723bbc5160447f060f40d18ce32e5803ab7dda16bfc60a0f5ec1dccd246e68475d7115ee265a9433824d8a5d997c302531311194a90deeca9  check_rid-alpine-generation.diff
23b712d7a088e780cd0994c5577b4c015cc1478e3a6bbca9b6e97ff2f2711562ef3a01ed483582a6861b31989b949972e2159caa4a34e0b18b6e8c062bb82c9e  installer_arm-build.patch
c8ab4e5beb2a169376f67fd467b16ed5e0762fbff3955dd99315b8b0fe514c8f6b2f9f75b92ee5faa466f2596608fe6c756bbd2b3a6cf6898c1ebcfc88fe5ce0  installer_forgotten-MicrosoftAspNetCoreAppRuntimePac.patch
8855d9090f473d61c975a2d08a2cfc1c1e9a868ce13a99b1932640973842ca9465e84f0d26216fd6313f0b83bc8e8436fc6336650ff1602e0d9037f7fc946c8b  installer_musl-build-fix.patch
1fee07d86a390aa676a34c16d489905c3add7c1c1fb88a97e0f5680e1046ac7d4ebb4d2f057188e90301d012d24ecbd432309994ddcad8aaf71170e2c1970392  installer_portable-runtime-id.patch
d95082cedd1a7e57744d9f5435b95f1031f6433256451e3469cfa5ec6da7110ef6231e8256e19e2c6366e18f819b2ec90d8c5afe63c8d2a385c897abf0c65d61  installer_reprodicible-tarball.patch
1965a23de81ef989a4917de350c91b7d4432563505c2945ecbff3ff6aef7a7d938114839a6f49d8f2235ea183d2c5ee8b4e8d77f50361ceb8c8d691b74efdfd5  runtime_detect-armv8.patch
20ef7b93b51ad11011a1a5e1058e2c490ce3f52e6859d6df655fce09e033ac3f0e5af17be1c640be38dc8884e0f3e0829db915dffd312484c6e83774afa2b333  runtime_deprecate-icu-ucol-safeclone.patch
0706d32b9eba6da5d7bb925a185c6a3c8548065b8dc597b7b72e9cbbe688f1ca77f50da417def17c5fe15c8aa6fd537470c0824d21b318579ebb46d47e8a995c  runtime_fix-musl-123.patch
5f465f6e3bfbff66551a5690eb41be46735f8e0b1e6e6503038521a8cc60cd66b7839426319ec304f785c9f074ef588b1f189ad6dbb6ced53257af28b09388f2  runtime_lld-fix.patch
097e0199ebc341dd32b7438800ad27f0cd34ce440770a88b2a97d6da4f955a6698a889dd3f05d69ddbff9a8d8de4cfac62b7fad453dd30ae5fa5e1eb86687878  runtime_non-portable-distrorid-fix-alpine.patch
2822d3ae1e722dfbfda8c33c1b97919e073a627f376b8e9e0831c32a4374da348fd0afe3d742617bfd0d413ba2becb8f85e6074fc7c6a7b415a9f48c385e8a0e  runtime_rid-alpine-317.patch
d1b4ebcbb1a6815fc0ce4c471485c232618e60968a879309fb8336821a9351d2e0028d9f7726c0c041c750b497a0baa47400c78c9ceff550b91b4a6c2816fc41  sdk_add-zsh-compdef-completion-script.patch
06490a00df6e52cf54dd757189381dbd98b4d36cdf5c6280e8c80d0074b38935160bf31613519816bccb593d417f04757c8fe7da3b175450c7fb5b337111251e  sdk_portable-runtime-id.patch
815de1dad37412579b16d763debe2ecceffb44f5c46bd3f4ac00b3e431b20c677db435794eac41cea5601030b4e0f03f19e2d53c7a1ead896de2ffbca787eb84  sdk_telemetry-optout.patch
"

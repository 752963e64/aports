# Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>
# Contributor: Antoine Martin (ayakael) <dev@ayakael.net>

#
# Variables for dotnet build version 6.0
# This APKBUILD is designed to be the same for version 6.0 and up
# except for the variables in this first section
#

pkgname=dotnet6-build
pkgver=6.0.104
pkgrel=0

# Tag of tarball generator. This may change from usual due to mistakes from upstream
_installertag=v$pkgver

# Test suite tags
_testtag=6207e217336d4f9c92add85b310c8a4b1ac0e6b1
_turkeytag=v11

# Tests timeout (in seconds)
_tests_timeout=600
# Test suite disable flags
# following tests can only work after packaging step
_disabled_tests="man-pages distribution-package bash-completion"
# we don't care if not latest release
_disabled_tests="$_disabled_tests release-version-sane"
# test broken: no musl release for omnisharp
_disabled_tests="$_disabled_tests omnisharp"
# test broken: permission issue on lxc / pipelines
_disabled_tests="$_disabled_tests createdump-aspnet workload"
# liblttng-ust_sys-sdt.h: no 'NT_STAPSDT' on Alpine's lttng-ust package
# lttng: known issue, see https://github.com/dotnet/runtime/issues/57784
_disabled_tests="$_disabled_tests liblttng-ust_sys-sdt.h lttng"
# {bundled,system}-libunwind: use system version on all but aarch64/armv7, as broken
# see https://github.com/redhat-developer/dotnet-regular-tests/issues/113
[ "$CARCH" = "aarch64" ] && _disabled_tests="$_disabled_tests system-libunwind"
[ "$CARCH" = "armv7" ] && _disabled_tests="$_disabled_tests system-libunwind"
[ "$CARCH" = "x86_64" ] && _disabled_tests="$_disabled_tests bundled-libunwind"
# publish-ready-to-run: broken due to crossgen2 nupkg on musl-arm64 / musl-arm platform being broken
# should be fixed with https://github.com/dotnet/runtime/pull/66814
[ "$CARCH" = "aarch64" ] && _disabled_tests="$_disabled_tests publish-ready-to-run publish-ready-to-run-linux"
[ "$CARCH" = "armv7" ] && _disabled_tests="$_disabled_tests publish-ready-to-run publish-ready-to-run-linux"

# Patches to be used. String before '_' refers to repo to patch
# Look for patch notes within each patch for what they fix / where they come from
# build_* patches applies directly to $builddir
_patches="
	aspnetcore_musl-build-fix.patch
	build_arm-build.patch
	build_musl-build-fix.patch
	check_alpine-support.patch
	command-line-api_fix-musl-build.patch
	command-line-api_use-work-tree-with-git.patch
	fsharp_use-work-tree-with-git.patch
	installer_arm-build.patch
	installer_forgotten-MicrosoftAspNetCoreAppRuntimePac.patch
	installer_musl-build-fix.patch
	installer_portable-runtime-id.patch
	installer_reprodicible-tarball.patch
	runtime_detect-armv8.patch
	runtime_disable-package-validation.patch
	runtime_fix-musl-123.patch
	runtime_lld-fix.patch
	runtime_non-portable-distrorid-fix-alpine.patch
	runtime_rid-alpine-316.patch
	runtime_x86-64-use-system-libunwind.patch
	sdk_add-zsh-compdef-completion-script.patch
	sdk_portable-runtime-id.patch
	sdk_telemetry-optout.patch
	vstest_use-work-tree-with-git.patch
	xliff-tasks_use-work-tree-with.git.patch
	"

# Custom prepare
default_prepare() {
	return
}

# Following for dotnet build version 6.0 and up
_pkgver_macro=${pkgver%.*}
_pkgver_prior=${pkgver%.*.*}
_pkgver_name=${_pkgver_macro//[.0]}
pkgdesc="The .NET $_pkgver_macro bootstrap"
arch="x86_64 aarch64 armv7"
url=https://www.microsoft.com/net/core
license="MIT"
# hack for dotnetx-build to be able to pull itself for bootstrapping
provides="dotnet$_pkgver_name-bootstrap"
provider_priority=$_pkgver_prior
checkdepends="
	babeltrace
	binutils
	coreutils
	file
	gawk
	jq
	lttng-tools
	npm
	procps
	sed
	strace
	util-linux-misc
	which
"
makedepends="
	bash
	clang
	cmake
	dotnet$_pkgver_name-bootstrap
	dotnet$_pkgver_name-bootstrap-artifacts
	dotnet$_pkgver_name-stage0
	findutils
	git
	grep
	icu-dev
	inetutils-syslogd
	krb5-dev
	libgit2-dev
	libintl
	libunwind-dev
	libxml2-dev
	libxml2-utils
	linux-headers
	lldb
	lldb-dev
	lld
	lld-dev
	llvm-dev
	lttng-ust-dev
	nodejs
	openssl-dev
	zlib-dev
	"
subpackages="
	dotnet$_pkgver_name-artifacts
	dotnet$_pkgver_name-sdk
	dotnet$_pkgver_name-templates:templates:noarch
	dotnet-zsh-completion:zshcomp:noarch
	dotnet-bash-completion:bashcomp:noarch
	dotnet-doc
	netstandard21-targeting-pack:netstandard_targeting_pack:noarch
	"
source="
	source-build-tarball-$pkgver.tar.gz::https://tarball
	source-build-testssuite.tar.gz::https://github.com/redhat-developer/dotnet-regular-tests/archive/$_testtag.tar.gz
	source-build-turkey.tar.gz::https://github.com/redhat-developer/dotnet-bunny/archive/refs/tags/$_turkeytag.tar.gz
	$_patches
	"
builddir="$srcdir"/source-build-tarball-$pkgver
_checkdir="$srcdir/dotnet-bunny-${_turkeytag/v}"
_testdir="$srcdir"/dotnet-regular-tests-$_testtag
_cli_root="$srcdir"/bootstrap
_libdir="/usr/lib"

# custom function that converts Alpine arch syntax to dotnet arch syntax
_get_arch() {
	case $1 in
		x86_64) local arch=x64;;
		aarch64) local arch=arm64;;
		armv7|armhf) local arch=arm;;
	esac
	echo $arch
}
_dotnet_arch=$(_get_arch $CARCH)

# Custom patch logics
_patch() {
	local i failed=
	if ! have_patches; then
		return 0
	fi
	if [ ! -d "$builddir" ]; then
		error "Is \$builddir set correctly?"
		return 1
	fi

	msg "Deploying patches"
	for i in $source; do
		case ${i%::*} in
			*.patch)
				local package=${i%%_*}

				# checks if patch is arch specific
				unset arch_spec
				for j in ${arch/_/-}; do [ -z "${i##*"$j"*}" ] && local arch_spec=true; done
				# if arch specific, checks if patch is applicable to this exact arch
				if [ -n "${i##*"${CARCH/_/-}"*}" ] && [ "$arch_spec" ]; then continue; fi

				msg "Applying $i to $package"
				cd "$builddir"
				case $package in
					check*)cd "$_testdir" || { echo "$_testdir does not exist"; failed=$failed $i; continue; };;
					build*)cd "$builddir";;
					*) cd src/$package.* || { echo "$package does not exist for patch"; failed=$failed $i; continue; };;
				esac
				patch -Np1 -i "$srcdir/$(filename_from_uri $i)" || failed="$failed $i"
				cd "$builddir"
			;;
		esac
	done

	if [ -z "$failed" ]; then
		return 0
	fi
	error "The following patches failed to apply:"
	for i in $failed; do
		printf "  %s\n" "$i"
	done
}

# dotnet relies on itself when building, we thus need a bootstrap runtime
# that is copied to write-capable folder
_prepare_bootstrap() {
	msg "Settings up bootstrap"

	_bootstrapdir=$(find $_libdir/dotnet/bootstrap/$_pkgver_macro* -maxdepth 0 | sort -r | head -n 1)
	cp -r "$_bootstrapdir" "$_cli_root"

	# Corrupt libcoreclrtraceptprovider.so when lttng <=2.13.0
	# is detected as tracing is broken on dotnet platform
	# due to ABI changes
	# See https://github.com/dotnet/runtime/issues/57784.
	if [ -f "/usr/lib/liblttng-ust.so.1 " ]; then
		rm "$_cli_root"/shared/Microsoft.NETCore.App/*/libcoreclrtraceptprovider.so
	fi
}

# Build doesn't set all the right executable bits for the right file types
_fix_executable() {
	# add executable bit
	find "$1" -type f \( \
		-name 'apphost' -o \
		-name 'singlefilehost' -o \
		-name 'lib*so' \
			\) \
		-exec chmod +x '{}' \;

	# remove executable bit
	find "$1" -type f \( \
		-name '*.a' -o \
		-name '*.dll' -o \
		-name '*.h' -o \
		-name '*.json' -o \
		-name '*.pdb' -o \
		-name '*.props' -o \
		-name '*.pubxml' -o \
		-name '*.targets' -o \
		-name '*.txt' -o \
		-name '*.xml' \
			\) \
		-exec chmod -x '{}' \;
}

# dotnet build is a two step process. The first step involves sourcing the
# source code to various components, and then the build can proceed as a second
# step. To be able to assure integrity of sources and permit caching, we want to
# build a tarball that can be checked with checksum. Following function is
# executed automatically in fetch() if tarball is not in SRCDEST.
_build_tarball() {
	deps
	[ -d "$srcdir" ] || { mkdir -p "$srcdir" && cd "$srcdir"; } && cd "$srcdir"

	# preparations
	[ -d "installer" ] || { git clone https://github.com/dotnet/installer --branch $_installertag && cd "$srcdir"/installer; } && cd "$srcdir"/installer
	_prepare_bootstrap

	# makes tarball reproducible
	patch -Np1 -i "$startdir"/installer_reprodicible-tarball.patch || true

	# without these exports, build still attempts a download of dotnet sdk
	export _InitializeDotNetCli="$_cli_root"
	export DOTNET_INSTALL_DIR="$_cli_root"
	export DotNetBuildFromSource=true

	# following args activate tarball build
	local args="
		/p:ArcadeBuildTarball=true
		/p:TarballDir=$builddir
		/p:TarballFilePath=$SRCDEST/${builddir##*/}.tar.gz
		"
	./build.sh $args | tee -a "$srcdir"/installer/build.log

	# unsets export so they don't bleed into other steps
	unset _InitializeDotNetCli DOTNET_INSTALL_DIR DotNetBuildFromSource
}

fetch() {
	# Builds tarball if not built
	[ -f "$SRCDEST"/${builddir##*/}.tar.gz ] || _build_tarball

	default_fetch
}

prepare() {
	default_prepare

	_patch
	_prepare_bootstrap

	# makes sure Artifacts archive is not expected, else build fails as it
	# expected a file that tells it what artifacts tarball it should unpack
	# As artifacts in Alpine's build process are provided by a package, and
	# installed in a folder, this is pulled using --with-packages
	[ -d "$builddir"/packages/archive ] && rm -r "$builddir"/packages/archive

	# readjusts OfficialBuildId back to current date. By default this is not
	# necessary. Unfortunately, by default source tarball isn't reproducible
	# installer_reprodicible-tarball.patch makes it so, but at the cost of
	# setting OfficialBuildId of certain volatile packages to a date in 1990.
	# Thus, to adequately prepare tarball we have to reset git-info build ids
	# to current date, as expected.
	for i in "$builddir"/git-info/*; do
		sed -i "s|<OfficialBuildId>19900101.1</OfficialBuildId>|<OfficialBuildId>$(date +"%Y%m%d.1")</OfficialBuildId>|" "$i"
	done
}

build() {
	msg "Building $pkgname-$pkgver"

	# looks for most recent recent version of _artifactsdir
	_artifactsdir=$(find $_libdir/dotnet/artifacts/$_pkgver_macro* -maxdepth 0 | sort -r | head -n 1)

	# logs args, else the output is forwarded to log files which isn't ideal in a
	# pipeline environment
	local args="
		/v:minimal
		/p:LogVerbosity=minimal
		/p:MinimalConsoleLogOutput=true
		"

	# PrebuiltPackagesPath needs to be set despite --with-packages,
	# as build tools has an error
	local args="$args /p:PrebuiltPackagesPath=$_artifactsdir"

	# by default, build sources artifacts from tarball in packages/archive
	# SDK from Microsoft. Due to wanting to use self-hosted versions of
	# both of these, they are packaged by stage0 and bootstrap and provided
	# in $_libdir/dotnet/{bootstrap,artifacts}. SDK is then sourced
	# using _prepare_bootstrap function, and then pointed to using
	# --with-sdk arg. Artifacts are sourced using --with-packages. Due to
	# this being a read-only folder, this breaks without build_copy-sbrp.patch
	# which makes build copy SBRP subfolder rather than move it.
	./build.sh \
		--with-sdk "$_cli_root" \
		--with-packages "$_artifactsdir" \
		-- $args | tee -a "$builddir"/build.log
}

check() {
	msg "Unpacking produced dotnet"
	export DOTNET_ROOT="$_checkdir/release"
	if [ ! -d "$DOTNET_ROOT" ]; then
		mkdir -p "$DOTNET_ROOT"
		tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$DOTNET_ROOT" --no-same-owner
	fi
	export PATH="$DOTNET_ROOT:$PATH"
	# some files either should or should not have executable bits
	# (done again during packaging - this is for tests)
	_fix_executable "$DOTNET_ROOT"

	msg "Building turkey test suite"
	if [ ! -d "$_checkdir"/turkey ]; then
		cd "$_checkdir"/Turkey
		dotnet publish \
			-f netcoreapp3.1 \
			-c Release \
			-p:VersionPrefix=${_turkeytag/v} \
			-p:VersionSuffix="$(git rev-parse --short HEAD)" \
			-o "$_checkdir"/turkey
	fi

	msg "Running test suite"
	cd "$_testdir"
	for i in $_disabled_tests; do
		[ -d "$i" ] && sed -i 's|"enabled": true|"enabled": false|' $i/test.json
	done
	dotnet "$_checkdir"/turkey/Turkey.dll -t $_tests_timeout || local ERROR=true
	if [ $ERROR ]; then
		msg "Check error reported, dumping logs"
		for i in *.log; do
			msg "Dumping $i"
			cat "$i"
		done
		return 1
	fi
}

package() {
	# directory creation
	install -dm 755 \
		"$pkgdir"/$_libdir/dotnet/bootstrap/$pkgver \
		"$pkgdir"/usr/share/man/man1/dotnet

	# unpack build artifacts to bootstrap
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$pkgdir"/$_libdir/dotnet/bootstrap/$pkgver/ --no-same-owner

	# assemble docs
	find "$builddir" -iname 'dotnet*.1' -type f -exec cp '{}' "$pkgdir"/usr/share/man/man1/dotnet/. \;

	# some files either should or should not have executable bits
	_fix_executable "$pkgdir"
}

sdk() {
	pkgdesc="The .NET $_pkgver_macro SDK"
	depends="
		aspnetcore$_pkgver_name-runtime
		aspnetcore$_pkgver_name-targeting-pack
		dotnet$_pkgver_name-apphost-pack
		dotnet$_pkgver_name-targeting-pack
		dotnet$_pkgver_name-templates
		netstandard21-targeting-pack
		"
	provides="
		dotnet-sdk-$_pkgver_macro=$pkgver-r$pkgrel
		dotnet$_pkgver_name-dev=$pkgver-r$pkgrel
		"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet

	# sdk
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$subpkgdir"/$_libdir/dotnet/ --no-same-owner ./sdk ./sdk-manifests

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"

	# See https://github.com/dotnet/source-build/issues/2579
	find "$subpkgdir" -type f -name 'testhost.x86' -delete
	find "$subpkgdir" -type f -name 'vstest.console' -delete
}

netstandard_targeting_pack() {
	pkgdesc="The .NET 2.1 Standard targeting pack"
	depends="dotnet-host"
	provides="netstandard-targeting-pack-2.1=$pkgver-r$pkgrel"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet/packs
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$subpkgdir"/$_libdir/dotnet/ --no-same-owner ./packs/NETStandard.Library.Ref

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"
}

templates() {
	pkgdesc="The .NET $_pkgver_macro templates"
	depends="dotnet-host"
	provides="dotnet-templates-$_pkgver_macro=$pkgver-r$pkgrel"

	install -dm 755 "$subpkgdir"/$_libdir/dotnet
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$subpkgdir"/$_libdir/dotnet/ --no-same-owner ./templates

	# some files either should or should not have executable bits
	_fix_executable "$subpkgdir"
}

# build relies on a plethora of nupkgs which are provided by this Artifacts file.
# stage0 sources these from Microsoft, which then allows bootstrap to build
# locally hosted versions. The following unpacks built tarball into directory
# for use by future builds.
artifacts() {
	pkgdesc="Internal package for building .NET $_pkgver_macro Software Development Kit"
	# hack to allow artifacts to pull itself
	provides="dotnet$_pkgver_name-bootstrap-artifacts"
	provider_priority=$_pkgver_prior

	# directory creation
	install -dm 755 \
		"$subpkgdir"/$_libdir/dotnet/artifacts/$pkgver \
		"$subpkgdir"/usr/share/licenses

	# extract artifacts to artifacts dir for use by future dotnet builds
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/Private.SourceBuilt.Artifacts.*.tar.gz -C "$subpkgdir"/$_libdir/dotnet/artifacts/$pkgver/ --no-same-owner \
		--exclude '*Intermediate*'
}

zshcomp() {
	depends=""
	pkgdesc="zsh completion for .NET"
	# netstandard21-targeting-pack will always be pulled by any dotnetx-sdk
	# thus pulling this with it for sdk
	install_if="netstandard21-targeting-pack zsh"
	depends="dotnet-host"

	install -dm 755 "$subpkgdir"/usr/share/zsh/site-functions
	install -m 755 "$builddir"/src/sdk.*/scripts/register-completions.zsh "$subpkgdir"/usr/share/zsh/site-functions/_dotnet
}

bashcomp() {
	depends=""
	pkgdesc="bash completion for .NET"
	# netstandard21-targeting-pack will always be pulled by any dotnetx-sdk
	# thus pulling this with it for sdk
	install_if="netstandard21-targeting-pack bash-completion"
	depends="dotnet-host"

	install -dm 755	"$subpkgdir"/usr/share/bash-completion/completions
	install -m 755 "$builddir"/src/sdk.*/scripts/register-completions.bash "$subpkgdir"/usr/share/bash-completion/completions/_dotnet
}

doc() {
	default_doc
	pkgdesc="Docs for .NET"

	# licenses
	install -dm 755 "$subpkgdir"/usr/share/licenses/dotnet
	tar -xzf "$builddir"/artifacts/$_dotnet_arch/Release/dotnet-sdk-$_pkgver_macro*.tar.gz -C "$subpkgdir"/usr/share/licenses/dotnet/ --no-same-owner ./LICENSE.txt ./ThirdPartyNotices.txt
}

sha512sums="
3537ba7d29e4d356cc8b0630eb124a698c3bc6b1afb3994e8d6a0e0f844dda53259c984cc2d98b0b765df49d6aeb8cb1819271919093e8b91148f991775b734f  source-build-tarball-6.0.104.tar.gz
b5072009d5d1639645a78fef61643ed7db981fdc9e1c99f8bdcdabb49a9210c64c67a3cb02af4eaded4bf92fce4e418c50c4d5567cedbe7773d27307905e210c  source-build-testssuite.tar.gz
5890ef0edc5b6f5e020cedc71be438039c8a2e19c5e71aa538c7fe4046560eea521a621d52638ff1312a398847414fefe311f2f9ac520765472517fab542c419  source-build-turkey.tar.gz
a2b21c38ed739f9bd18b39a28ef21b940ae32beeb2c8f99575289111e5ecaae40e017a500b3b452ef5df7c7e12dff2f8385acada92ca7507d1ed351c6aa9e311  aspnetcore_musl-build-fix.patch
e81cd08bd87bcacb9037959c29cb8457ce010a3bce3127eaeaabbd56552d5817b824949320ad4f9bdc582f5edf9e0f8072017b94e40f7606181c51bc93298190  build_arm-build.patch
8812aa5c60d20737a5b2a808e6ac7f72bcb3c7810bb28c6c1714b62c286f8ceb24c2ab5745b09367208850feb600edf94a22a2288d5b5a1d1aca9575fb63aefc  build_musl-build-fix.patch
c2e4f232f049e3e29b11f751b59bb2750be9d265f3cd93be5a767cdd1c35cc9630a4ca77cfc0c8d23deb913f1d16f2668dde40c5ae6f5e22e41da317aaf045fb  check_alpine-support.patch
ce36d0233d33cdc96888a64ab83a4099f877413269bcb5602704cedfb6aa89bf6d86157545f6f6243c226b2d714acf66a2bcfb65576afd0c6cda345b76bb5c07  command-line-api_fix-musl-build.patch
71612ac1d9933335583cf722dc5ecfb37739f662a165cd2afb62bf342e83946955269370da57d3295fa4f781683a2fb6027068584b996efcb33d71e18f7191e2  command-line-api_use-work-tree-with-git.patch
06ed5091e461c160930746768a1f296bdf7f876b0578cdeb93077e623212c0c535b24e406f9408c402e83eac361a33dba2d7dda7ce7140dd23061ebd8a4a466d  fsharp_use-work-tree-with-git.patch
f198924d1c9cf22288fb99072e06bc5ce1eccac5cb7361e8f7b3973e6399db50f141aaa8a2dda07c0153208e74819c082a7a74d58785caa0cb2c1efcef28f21b  installer_arm-build.patch
9724b8b4cb52ac41e7d7a49a0dd2c9937ecf5dc096a123f8cbc5302bbb256ccf440cfa12bfba8295070d7eaac25406fa054e2dce8023257da4d2aeb3c54fe6f3  installer_forgotten-MicrosoftAspNetCoreAppRuntimePac.patch
f1f10017830e941ff42c28c2f764e489ab02800b528ec89c23c7cf5145225e2956a8db044bc7bac08fc87fa5bd3700ba49df952df09d3e46705dec6bcecb40f5  installer_musl-build-fix.patch
f4c164256adab18dad187243041416ab612af566501db96069a4c14e4a35ae2fe81f07ec8535b4ff132625423b03ab4dfe3892aefa59fa0494eba6723ba72929  installer_portable-runtime-id.patch
fe85d6ee786b74c90d69fe3fed03352570f96613ab03cf15d12530da6b98dffaff8cc9ece3044679486b97841481ece4359b80f81b82e7c96fe1dfc8fb6e2945  installer_reprodicible-tarball.patch
2e79e27b201a3e4423d63666b3dd575d0cb5ddbe258af24d9a2d0f9eb4cc8d177070249cfd08536fa7c3c6debdf939239a7e2c1aadd692d3e903bbb168f241b5  runtime_detect-armv8.patch
74d4dc01978b287837f4ba8e8306b7b7683df7cac8c166f4d07e9792ce44d4d6831aa972ef30f1eed1d8a94b845e08d1614fcfeb76d792ab351719d3e82cc39e  runtime_disable-package-validation.patch
aef649d2480d71ce68b030c0d67c2bfd965349a7ab52dbdca7c954edadb308ee6fbebf357113292d1323bfa9b2f8f01fe28d3904b2ebcc7a555742135bfdc726  runtime_fix-musl-123.patch
dda6b463af8e0c8342b9c0d1a584f6d6410fb48df9fb0ef3c07d5ee7eb4abf2a29a01bf7a39fc70c2f5986c0b24c7bfe602cbfbeb1157cb0e0fb0eaa7fb03d1c  runtime_lld-fix.patch
adb7537feb742f9b838323336e891b6e92c017215628ab2742841b6ec5945987d76082c6d42746f84062f0e537bb1d74cfa3989866fb105b9608af23abf17753  runtime_non-portable-distrorid-fix-alpine.patch
1c737579bbc8152cb376632781188e543f4b64920adfa537d313366d55f23c896ecd61e366b5e801cd85441aadab8e61b9b775532e829cb347749279c8028902  runtime_rid-alpine-316.patch
e8fba8748c600696a529dd9b861b2e4bffed9f6a56c1e6ec58c1444b567b92a00e6c310f835eb7915db5f924409782d6ec3d7ae98082bde22401ce7836ee7acb  runtime_x86-64-use-system-libunwind.patch
55afa9c74be6f5a87f1ff5aa44caad094cf620eb4388f6407218acf3d58a878f5565a0e875e95c3dbe0efca1879c120ee4b8076c521bfc9d6069a652c4a4fdd8  sdk_add-zsh-compdef-completion-script.patch
532534ed88fda70b5088b655af00a7218c72f99a65b35194ebcd960b354b24f043c4b63e72b915aaf69ba847f7befa7d650495a0741d7526accb58b425f74a26  sdk_portable-runtime-id.patch
2d651813c6a46e885636fe141d90a33c92d0fa450611cadd944b45ec6929a169e49a6cba18afdd708e3359d5ee204f1c1f6e3bfce2ba9d1bdb083edf78d0337e  sdk_telemetry-optout.patch
d41ed2c7f4b81be2770d1c6b4bba17cea0772131bee994ebce9ca7acc302b2c15cc1adac6a814b866af04728cd4beb0ca411d218d113922fe32001c485b89c67  vstest_use-work-tree-with-git.patch
4d85a411c4add10072c8b411e05b9ece4696c9409c9a363a0f5ecf2adc6ccb815d868c96941da31a6c4e9d981cede144222155eadac1fbed851989086835d101  xliff-tasks_use-work-tree-with.git.patch
"

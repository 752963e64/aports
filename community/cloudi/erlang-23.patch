Upstream: https://github.com/CloudI/CloudI/issues/223

diff --git a/src/external/README.markdown b/src/external/README.markdown
index bfa39a50..f429bc51 100644
--- a/src/external/README.markdown
+++ b/src/external/README.markdown
@@ -204,8 +204,8 @@ Erlang `nodefinder`
 `Strategies for automatic node discovery in Erlang`
 
 - `https://github.com/okeuday/nodefinder`
-- `commit 2edf4824e60821f4d44ea5db92cd689771846387`
-- `Fri Nov 29 04:40:49 UTC 2019`
+- `commit 58f4cf883b6edbd377ccb3a6da5be177661e36f3`
+- `Thu Feb 27 21:41:04 UTC 2020`
 - `MIT`
 
 Erlang `parse_trans`
diff --git a/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder.hrl b/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder.hrl
index 2a6e9a55..6018b785 100644
--- a/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder.hrl
+++ b/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder.hrl
@@ -5,5 +5,16 @@
 -ifdef(ERLANG_OTP_VERSION_19).
 -else.
 -define(ERLANG_OTP_VERSION_20_FEATURES, true).
+-ifdef(ERLANG_OTP_VERSION_20).
+-else.
+-ifdef(OTP_RELEASE).
+% able to use -if/-elif here
+-if(?OTP_RELEASE >= 23).
+-define(ERLANG_OTP_VERSION_23_FEATURES, true).
+-endif.
+-else.
+-error("Erlang/OTP version invalid").
+-endif.
+-endif.
 -endif.
 
diff --git a/src/external/cloudi_x_nodefinder/src_original/nodefinder.hrl b/src/external/cloudi_x_nodefinder/src_original/nodefinder.hrl
index 2a6e9a55..6018b785 100644
--- a/src/external/cloudi_x_nodefinder/src_original/nodefinder.hrl
+++ b/src/external/cloudi_x_nodefinder/src_original/nodefinder.hrl
@@ -5,5 +5,16 @@
 -ifdef(ERLANG_OTP_VERSION_19).
 -else.
 -define(ERLANG_OTP_VERSION_20_FEATURES, true).
+-ifdef(ERLANG_OTP_VERSION_20).
+-else.
+-ifdef(OTP_RELEASE).
+% able to use -if/-elif here
+-if(?OTP_RELEASE >= 23).
+-define(ERLANG_OTP_VERSION_23_FEATURES, true).
+-endif.
+-else.
+-error("Erlang/OTP version invalid").
+-endif.
+-endif.
 -endif.
 
diff --git a/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_ec2_api_aws.erl b/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_ec2_api_aws.erl
index a5664628..ac6bca86 100644
--- a/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_ec2_api_aws.erl
+++ b/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_ec2_api_aws.erl
@@ -38,6 +38,7 @@
          param_list/2
 ]).
 
+-include("cloudi_x_nodefinder.hrl").
 -include("cloudi_x_nodefinder_ec2_api.hrl").
 
 -define(ERLCLOUD_RETRY_TIMEOUT, 10000).
@@ -309,6 +310,10 @@ format_timestamp({{Yr, Mo, Da}, {H, M, S}}) ->
 sha256(V) ->
     crypto:hash(sha256, V).
 
+-ifdef(ERLANG_OTP_VERSION_23_FEATURES).
+sha256_mac(K, S) ->
+    crypto:mac(hmac, sha256, K, S).
+-else.
 sha256_mac(K, S) ->
     crypto:hmac(sha256, K, S).
-
+-endif.
diff --git a/src/external/cloudi_x_nodefinder/src_original/nodefinder_ec2_api_aws.erl b/src/external/cloudi_x_nodefinder/src_original/nodefinder_ec2_api_aws.erl
index a5664628..ac6bca86 100644
--- a/src/external/cloudi_x_nodefinder/src_original/nodefinder_ec2_api_aws.erl
+++ b/src/external/cloudi_x_nodefinder/src_original/nodefinder_ec2_api_aws.erl
@@ -38,6 +38,7 @@
          param_list/2
 ]).
 
+-include("nodefinder.hrl").
 -include("nodefinder_ec2_api.hrl").
 
 -define(ERLCLOUD_RETRY_TIMEOUT, 10000).
@@ -309,6 +310,10 @@ format_timestamp({{Yr, Mo, Da}, {H, M, S}}) ->
 sha256(V) ->
     crypto:hash(sha256, V).
 
+-ifdef(ERLANG_OTP_VERSION_23_FEATURES).
+sha256_mac(K, S) ->
+    crypto:mac(hmac, sha256, K, S).
+-else.
 sha256_mac(K, S) ->
     crypto:hmac(sha256, K, S).
-
+-endif.
diff --git a/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_multicast.erl b/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_multicast.erl
index 71b6a54d..df957d8e 100644
--- a/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_multicast.erl
+++ b/src/external/cloudi_x_nodefinder/src/cloudi_x_nodefinder_multicast.erl
@@ -223,13 +223,13 @@ process_packet(_Packet, _IP, _State) ->
     ok.
 
 identifier_v4(Message, KeyV4) ->
-    crypto:hmac(sha256, KeyV4, Message).
+    hmac_sha256(KeyV4, Message).
 
 identifier_v3(Message, KeyV3) ->
-    crypto:hmac(sha256, KeyV3, Message).
+    hmac_sha256(KeyV3, Message).
 
 identifier_v2(Message, KeyV2) ->
-    crypto:hmac(sha, KeyV2, Message).
+    hmac_sha(KeyV2, Message).
 
 key_v4() ->
     crypto:hash(sha256, erlang:atom_to_binary(erlang:get_cookie(), utf8)).
@@ -269,3 +269,16 @@ connect_node(visible, Node) ->
 connect_node(hidden, Node) ->
     net_kernel:hidden_connect_node(Node).
 
+-ifdef(ERLANG_OTP_VERSION_23_FEATURES).
+hmac_sha256(Key, Data) ->
+    crypto:mac(hmac, sha256, Key, Data).
+
+hmac_sha(Key, Data) ->
+    crypto:mac(hmac, sha, Key, Data).
+-else.
+hmac_sha256(Key, Data) ->
+    crypto:hmac(sha256, Key, Data).
+
+hmac_sha(Key, Data) ->
+    crypto:hmac(sha, Key, Data).
+-endif.
diff --git a/src/external/cloudi_x_nodefinder/src_original/nodefinder_multicast.erl b/src/external/cloudi_x_nodefinder/src_original/nodefinder_multicast.erl
index 71b6a54d..df957d8e 100644
--- a/src/external/cloudi_x_nodefinder/src_original/nodefinder_multicast.erl
+++ b/src/external/cloudi_x_nodefinder/src_original/nodefinder_multicast.erl
@@ -223,13 +223,13 @@ process_packet(_Packet, _IP, _State) ->
     ok.
 
 identifier_v4(Message, KeyV4) ->
-    crypto:hmac(sha256, KeyV4, Message).
+    hmac_sha256(KeyV4, Message).
 
 identifier_v3(Message, KeyV3) ->
-    crypto:hmac(sha256, KeyV3, Message).
+    hmac_sha256(KeyV3, Message).
 
 identifier_v2(Message, KeyV2) ->
-    crypto:hmac(sha, KeyV2, Message).
+    hmac_sha(KeyV2, Message).
 
 key_v4() ->
     crypto:hash(sha256, erlang:atom_to_binary(erlang:get_cookie(), utf8)).
@@ -269,3 +269,16 @@ connect_node(visible, Node) ->
 connect_node(hidden, Node) ->
     net_kernel:hidden_connect_node(Node).
 
+-ifdef(ERLANG_OTP_VERSION_23_FEATURES).
+hmac_sha256(Key, Data) ->
+    crypto:mac(hmac, sha256, Key, Data).
+
+hmac_sha(Key, Data) ->
+    crypto:mac(hmac, sha, Key, Data).
+-else.
+hmac_sha256(Key, Data) ->
+    crypto:hmac(sha256, Key, Data).
+
+hmac_sha(Key, Data) ->
+    crypto:hmac(sha, Key, Data).
+-endif.
diff --git a/src/lib/cloudi_service_oauth1/src/cloudi_service_oauth1_data.erl b/src/lib/cloudi_service_oauth1/src/cloudi_service_oauth1_data.erl
index 02450526..e9563e9c 100644
--- a/src/lib/cloudi_service_oauth1/src/cloudi_service_oauth1_data.erl
+++ b/src/lib/cloudi_service_oauth1/src/cloudi_service_oauth1_data.erl
@@ -46,6 +46,12 @@
 
 -include_lib("public_key/include/public_key.hrl").
 
+-ifdef(OTP_RELEASE).
+-if(?OTP_RELEASE >= 23).
+-define(ERLANG_OTP_VERSION_23_FEATURES, true).
+-endif.
+-endif.
+
 -spec verify(Signature :: string(),
              HttpMethod :: string(),
              URL :: string(),
@@ -98,8 +104,13 @@ hmac_sha1_verify(Signature, HttpMethod, URL, Params, Consumer, TokenSecret) ->
                                                        Consumer,
                                                        TokenSecret), Signature).
 
+-ifdef(ERLANG_OTP_VERSION_23_FEATURES).
+hmac_sha(Key, Data) ->
+    crypto:mac(hmac, sha, Key, Data).
+-else.
 hmac_sha(Key, Data) ->
     crypto:hmac(sha, Key, Data).
+-endif.
 
 rsa_sha1_verify(Signature, HttpMethod, URL, Params, {_, ConsumerSecret, _}) ->
     BaseString = signature_base_string(HttpMethod, URL, Params),
@@ -127,6 +138,29 @@ params_encode(Params) ->
     Concatenated = [lists:concat([K, "=", V]) || {K, V} <- Sorted],
     cloudi_string:join("&", Concatenated).
 
+-ifdef(ERLANG_OTP_VERSION_23_FEATURES).
+uri_normalize(URI) ->
+    try uri_string:parse(URI) of
+        Values ->
+            Scheme = case maps:get(scheme, Values) of
+                "http" ->
+                    http;
+                "https" ->
+                    https;
+                SchemeStr ->
+                    SchemeStr
+            end,
+            UserInfo = maps:get(userinfo, Values),
+            Host = maps:get(host, Values),
+            Port = maps:get(port, Values),
+            Path = maps:get(path, Values),
+            uri_normalize(Scheme, UserInfo,
+                          cloudi_string:lowercase(Host), Port, [Path])
+    catch
+        ErrorType:Error ->
+            {error, {ErrorType, Error}}
+    end.
+-else.
 uri_normalize(URI) ->
     case http_uri:parse(URI) of
         {ok, {Scheme, UserInfo, Host, Port, Path, _Query}} ->
@@ -135,6 +169,7 @@ uri_normalize(URI) ->
         {error, _} = Error ->
             Error
     end.
+-endif.
 
 uri_normalize(Scheme, [], Acc) ->
   lists:concat([Scheme, "://" | Acc]);

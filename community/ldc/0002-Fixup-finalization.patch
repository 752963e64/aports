From: Ã–mer Faruk IRMAK <omer.irmak@bosagora.io>
Subject: [PATCH] Allocate _tlsRanges in C heap

Similar to the issue fixed here https://github.com/dlang/druntime/pull/1655#issuecomment-279223238, static version of the sections_elf_shared accesses TLS of a dead thread. The simplest fix is to allocate _tlsRanges somewhere that would persist outside of the thread scope, for example the C heap.

This was encountered while porting ldc 1.24.0 to Alpine Linux which uses Musl, but this issue should be affecting other libc implementations as well.
---
 runtime/druntime/src/rt/sections_elf_shared.d | 7 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff -urp a/runtime/druntime/src/rt/sections_elf_shared.d b/runtime/druntime/src/rt/sections_elf_shared.d
--- a/runtime/druntime/src/rt/sections_elf_shared.d	2020-10-24 12:26:27.000000000 +0000
+++ b/runtime/druntime/src/rt/sections_elf_shared.d	2020-12-08 16:52:01.597248340 +0000
@@ -333,6 +333,7 @@ else
     void finiTLSRanges(Array!(void[])* rngs) nothrow @nogc
     {
         rngs.reset();
+        .free(rngs);
     }

     void scanTLSRanges(Array!(void[])* rngs, scope ScanDG dg) nothrow
@@ -416,7 +417,13 @@ else
      * Thread local array that contains TLS memory ranges for each
      * library initialized in this thread.
      */
-    @property ref Array!(void[]) _tlsRanges() @nogc nothrow { static Array!(void[]) x; return x; }
+    @property ref Array!(void[]) _tlsRanges() @nogc nothrow {
+        static Array!(void[])* x = null;
+        if (x is null)
+            x = cast(Array!(void[])*).calloc(1, Array!(void[]).sizeof);
+        assert(x);
+        return *x;
+    }
     //Array!(void[]) _tlsRanges;

     enum _rtLoading = false;

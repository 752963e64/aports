# Contributor: Mathias LANG <pro.mathias.lang@gmail.com>
# Maintainer: Mathias LANG <pro.mathias.lang@gmail.com>
pkgname=ldc
pkgver=1.24.0
pkgrel=0
pkgdesc="The LLVM-based D Compiler"
url="https://github.com/ldc-developers/ldc"
# LDC does not support host compiling on most of the architecture Alpine supports
arch="x86_64 aarch64"
license="BSD-3-Clause AND BSL-1.0 AND ( Artistic-1.0 OR GPL-2.0-or-later ) AND NCSA AND MIT"
depends="libexecinfo tzdata"
makedepends="chrpath cmake curl-dev diffutils gdmd llvm10-dev llvm10-static
	libedit-dev libexecinfo-static zlib-dev"
checkdepends="bash gdb grep llvm10-test-utils"
# A user might want to install the '-runtime' subpackage when they have
# a dynamically-linked D program.
subpackages="
	$pkgname-runtime
	$pkgname-static
	$pkgname-dbg
	$pkgname-bash-completion:bashcomp:noarch"
source="https://github.com/ldc-developers/ldc/releases/download/v$pkgver/ldc-$pkgver-src.tar.gz
	01-conf.patch
	0001-CRuntime_Musl-Support-v1.2.0-for-32-bits.patch
	0002-Fixup-finalization.patch
	0003-Disable-failing-AArch64-test.patch
	"
builddir="$srcdir/ldc-$pkgver-src/"

build() {
	# Note: The CI was running into OOM while building this package
	# See https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/14364#note_122336
	case "$CARCH" in x86*)
		export MAKEFLAGS="$MAKEFLAGS -j$((JOBS<4 ? JOBS : 4))"
		export DFLAGS="$DFLAGS -lowmem"
		;;
	esac
	# First, build LDC using GDC
	mkdir -p "$builddir/stage1"
	if [ "$CBUILD" != "$CHOST" ]; then
		CMAKE_CROSSOPTS="-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_HOST_SYSTEM_NAME=Linux"
	fi
	unset DFLAGS
	cmake \
		-DCMAKE_CXX_FLAGS="$CXXFLAGS" \
		-DCMAKE_C_FLAGS="$CFLAGS" \
		-DD_COMPILER='gdmd' \
		$CMAKE_CROSSOPTS -S "$builddir" -B "$builddir/stage1"
	make -C "$builddir/stage1"

	# Then, self-build
	if [ "$CBUILD" != "$CHOST" ]; then
		CMAKE_CROSSOPTS="-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_HOST_SYSTEM_NAME=Linux"
	fi
	# Don't use None buildtype for now, see
	# https://github.com/ldc-developers/ldc/issues/3386#issuecomment-603370855
	cmake \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_CXX_FLAGS="$CXXFLAGS" \
		-DCMAKE_C_FLAGS="$CFLAGS" \
		-DD_COMPILER="$builddir/stage1/bin/ldmd2" \
		$CMAKE_CROSSOPTS "$builddir"
	make

	# Build the test runners
	make all-test-runners

	# CMake added the rpaths to the shared libs (of stage1!) - strip them
	chrpath -d "$builddir"/lib/*.so*
	chrpath -d \
		"$builddir"/bin/ldc2 \
		"$builddir"/bin/ldmd2 \
		"$builddir"/bin/ldc-build-runtime \
		"$builddir"/bin/ldc-prune-cache
}

check() {
	# Find the libraries we just built as final (not stage1!)
	export LD_LIBRARY_PATH="$builddir"/lib

	case "$CARCH" in
		# Math & numeric related tests fail due to https://github.com/ldc-developers/ldc/issues/3270#issuecomment-613132406
		# druntime-test-thread fails due to https://github.com/ldc-developers/ldc/issues/3403
		aarch64)
			_tests_ignore="|core\.thread\.fiber|std.*math.*|std\.numeric.*|std\.format|std\.algorithm\.sorting.*|druntime-test-thread"
			;;
		# https://github.com/ldc-developers/ldc/issues/3404
		x86)
			_tests_ignore="|druntime-test-thread"
			;;
	esac


	# Note: The testsuite does not parallelize well, as the 'clean' target get run in parallel.
	# Hence '-j${JOBS}' was left out on purpose
	#
	# - dmd-testsuite takes too long to run and has more to do with language checks
	#	which are less relevant to us than platform integration tests
	# - lit-test disabled because 'TEST 'LDC :: debuginfo/print_gdb.d' FAILED'
	#	Something to do with TLS variables not being printable in GDB
	# - 'druntime-test-shared' fails, probably because it is using 'Object.factory'
	# - 'druntime-test-stdcpp' fails for an unknown reason and is temporarily disabled
	# - 'druntime-test-exceptions' fails for an unknown reason and is temporarily disabled
	ctest --output-on-failure -E "dmd-testsuite|lit-tests|druntime-test-exceptions|druntime-test-shared|druntime-test-stdcpp$_tests_ignore"
}

package() {
	depends="$pkgname-static=$pkgver-r$pkgrel"
	# Use -j1, the install is flaky with too many build jobs
	make -j1 DESTDIR="$pkgdir" install

	mkdir -p "$pkgdir"/usr/share/bash-completion
	mv "$pkgdir"/etc/bash_completion.d "$pkgdir"/usr/share/bash-completion/completions
}

runtime() {
	depends="libexecinfo-dev"
	pkgdesc="Dynamic runtime library for D code compiled with $pkgname-$pkgver"

	mkdir -p "$subpkgdir/usr/lib/"
	for libn in "libdruntime" "libphobos2";
	do
		mv "$pkgdir"/usr/lib/$libn-ldc-shared.so* "$subpkgdir/usr/lib/"
	done
	mv "$pkgdir"/usr/lib/libldc-jit.so* "$subpkgdir/usr/lib"

	mv "$pkgdir"/usr/lib/*.so* "$subpkgdir/usr/lib/"
}

static() {
	depends="libexecinfo-static"
	pkgdesc="$pkgdesc (static library)"

	mkdir -p "$subpkgdir/usr/lib/"
	mv "$pkgdir"/usr/lib/*.a "$subpkgdir/usr/lib/"
}

bashcomp() {
	depends=""
	pkgdesc="Bash completions for $pkgname"
	install_if="$pkgname=$pkgver-r$pkgrel bash-completion"

	amove usr/share/bash-completion/completions
}

sha512sums="c6f06d80617e5f7789f9e0e349a21e380d0bb6898983f0c2e2aaaec32e23ea0f69c039b6f0c03b8015782b837c890a6ff1051bfa332a6af7c79fc3479446dfb1  ldc-1.24.0-src.tar.gz
67c805fc5516051a2f803ad41acc80d67e5b2611f718e6e4217b647e7d6978a510bbbf244af39bbd3f83fb316f883842f57d2d45b247a79825423f8353b9dddb  01-conf.patch
88cf871fa3655964e598dc0027c2ee50b5fc033294aa66d5e48326b900ef8467be7b173b59331454bae6dae54968720cc888062192713a5c79dd62194d2ef3e0  0001-CRuntime_Musl-Support-v1.2.0-for-32-bits.patch
28be777056650f5d316550775cf0cf35229416a4b5d563c065841d7e95f2876ba17f20dcc50a6eba4d95702952cda7d6500e5134cfbc7d232a255e09e1894c9e  0002-Fixup-finalization.patch
7f6be8769d8ad42c03e8c3aaa0edc9001c467a096872a56562010b1cbbeae5c6c20fde0945e4007ef073440626a019907c54f7bf36dbefbb7be9646450796018  0003-Disable-failing-AArch64-test.patch"

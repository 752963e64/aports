Patch-Source: https://github.com/libsdl-org/SDL/pull/6084
this is WIP, but nice to fix cmake and get some testing in
---
From 777e067df4a22112ee8fafbfb8beff7540283ee6 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Fri, 19 Aug 2022 18:14:23 +0200
Subject: [PATCH 1/4] cmake: Fix CMake warning message + fix code formatting

---
 VisualC/pkg-support/cmake/sdl2-config-version.cmake | 2 +-
 VisualC/pkg-support/cmake/sdl2-config.cmake         | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/VisualC/pkg-support/cmake/sdl2-config-version.cmake b/VisualC/pkg-support/cmake/sdl2-config-version.cmake
index 42bb6e7431c..b90cf995488 100644
--- a/VisualC/pkg-support/cmake/sdl2-config-version.cmake
+++ b/VisualC/pkg-support/cmake/sdl2-config-version.cmake
@@ -4,7 +4,7 @@
 # This file is meant to be placed in a cmake subfolder of SDL2-devel-2.x.y-VC
 
 if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/../include/SDL_version.h")
-    message(AUTHOR_WARNING "Could not find SDL_version.h. This script is meant to be placed in the root of SDL2-devel-2.x.y-VC")
+    message(AUTHOR_WARNING "Could not find SDL_version.h. This script is meant to be placed in a cmake subfolder of SDL2-devel-2.x.y-VC")
     return()
 endif()
 
diff --git a/VisualC/pkg-support/cmake/sdl2-config.cmake b/VisualC/pkg-support/cmake/sdl2-config.cmake
index 1a25259c0ea..7a4115a29ca 100644
--- a/VisualC/pkg-support/cmake/sdl2-config.cmake
+++ b/VisualC/pkg-support/cmake/sdl2-config.cmake
@@ -82,8 +82,8 @@ if(EXISTS "${_sdl2main_library}")
     if(NOT TARGET SDL2::SDL2main)
         add_library(SDL2::SDL2main STATIC IMPORTED)
         set_target_properties(SDL2::SDL2main
-        PROPERTIES
-            IMPORTED_LOCATION "${_sdl2main_library}"
+            PROPERTIES
+                IMPORTED_LOCATION "${_sdl2main_library}"
         )
     endif()
     set(SDL2_SDL2main_FOUND TRUE)

From 98f28c8aa62d226edc6f214205761a3d40b229fc Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Fri, 19 Aug 2022 19:04:22 +0200
Subject: [PATCH 2/4] project: also check configure in test/versioning.sh

---
 test/versioning.sh | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/test/versioning.sh b/test/versioning.sh
index c82d9572b63..b7daa7ef5ca 100755
--- a/test/versioning.sh
+++ b/test/versioning.sh
@@ -34,6 +34,17 @@ else
     not_ok "configure.ac $version disagrees with SDL_version.h $ref_version"
 fi
 
+major=$(sed -ne 's/^SDL_MAJOR_VERSION=//p' configure)
+minor=$(sed -ne 's/^SDL_MINOR_VERSION=//p' configure)
+micro=$(sed -ne 's/^SDL_MICRO_VERSION=//p' configure)
+version="${major}.${minor}.${micro}"
+
+if [ "$ref_version" = "$version" ]; then
+    ok "configure $version"
+else
+    not_ok "configure $version disagrees with SDL_version.h $ref_version (Run ./autogen.sh to update)"
+fi
+
 major=$(sed -ne 's/^set(SDL_MAJOR_VERSION \([0-9]*\))$/\1/p' CMakeLists.txt)
 minor=$(sed -ne 's/^set(SDL_MINOR_VERSION \([0-9]*\))$/\1/p' CMakeLists.txt)
 micro=$(sed -ne 's/^set(SDL_MICRO_VERSION \([0-9]*\))$/\1/p' CMakeLists.txt)

From 81e133b89ba3c4f7e709392fda41e1ce43e0ee07 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Fri, 19 Aug 2022 19:08:09 +0200
Subject: [PATCH 3/4] project: regenerate configure before running
 test/versioning.sh

---
 docs/release_checklist.md | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/docs/release_checklist.md b/docs/release_checklist.md
index 33769949e01..1e356ed7253 100644
--- a/docs/release_checklist.md
+++ b/docs/release_checklist.md
@@ -25,10 +25,10 @@
         * if backwards compatibility has been broken,
             increase `DYLIB_COMPATIBILITY_VERSION` (?)
 
-* Run test/versioning.sh to verify that everything is consistent
-
 * Regenerate `configure`
 
+* Run test/versioning.sh to verify that everything is consistent
+
 * Do the release
 
 ## New bugfix release
@@ -47,10 +47,10 @@
         `DYLIB_CURRENT_VERSION`, `DYLIB_COMPATIBILITY_VERSION`
         * set second number in `DYLIB_CURRENT_VERSION` to *patchlevel*
 
-* Run test/versioning.sh to verify that everything is consistent
-
 * Regenerate `configure`
 
+* Run test/versioning.sh to verify that everything is consistent
+
 * Do the release
 
 ## After a feature release
@@ -84,8 +84,8 @@
         * if backwards compatibility has been broken,
             increase `DYLIB_COMPATIBILITY_VERSION` (?)
 
-* Run test/versioning.sh to verify that everything is consistent
-
 * Regenerate `configure`
 
+* Run test/versioning.sh to verify that everything is consistent
+
 * Do the release

From 904a5e30f6375b7d5d519bd3d3111f0ec6fca2b2 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Fri, 19 Aug 2022 03:04:21 +0200
Subject: [PATCH 4/4] cmake: find DirectFB through a cmake module + use it in
 installed sdl2 prefix'es

---
 CMakeLists.txt           |  6 ++++
 SDL2Config.cmake.in      | 21 ++++++++++++-
 cmake/FindDirectFB.cmake | 66 ++++++++++++++++++++++++++++++++++++++++
 cmake/macros.cmake       | 19 ++++++++++++
 cmake/sdlchecks.cmake    | 14 ++++++---
 sdl2-config.cmake.in     |  1 +
 6 files changed, 121 insertions(+), 6 deletions(-)
 create mode 100644 cmake/FindDirectFB.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index aa36eb02cf1..7656b420526 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -324,6 +324,9 @@ endif()
 set(SDL_LIBS "-lSDL2")
 set(SDL_CFLAGS )
 
+# Interface libraries
+set(SDL_LINK_LIBRARIES_PRIVATE )
+
 # When building shared lib for Windows with MinGW,
 # avoid the DLL having a "lib" prefix
 if(WINDOWS)
@@ -3097,6 +3100,7 @@ if(SDL_SHARED)
   endif()
   # FIXME: if CMAKE_VERSION >= 3.13, use target_link_options for EXTRA_LDFLAGS
   target_link_libraries(SDL2 PRIVATE ${EXTRA_LIBS} ${EXTRA_LDFLAGS} ${EXTRA_LDFLAGS_BUILD})
+  target_link_libraries(SDL2 INTERFACE ${SDL_LINK_LIBRARIES_PRIVATE})
   target_include_directories(SDL2 PUBLIC
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include>"
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>"
@@ -3133,6 +3137,7 @@ if(SDL_STATIC)
   # TODO: Win32 platforms keep the same suffix .lib for import and static
   # libraries - do we need to consider this?
   target_link_libraries(SDL2-static PRIVATE ${EXTRA_LIBS} ${EXTRA_LDFLAGS})
+  target_link_libraries(SDL2-static PRIVATE ${SDL_LINK_LIBRARIES_PRIVATE})
   target_include_directories(SDL2-static PUBLIC
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include>"
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>"
@@ -3268,6 +3273,7 @@ if(NOT SDL2_DISABLE_INSTALL)
     FILES
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2Config.cmake
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2ConfigVersion.cmake
+      cmake/FindDirectFB.cmake
     DESTINATION ${PKG_PREFIX}
     COMPONENT Devel
   )
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index 8c18aa5d44d..87d916dc4b4 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -1,5 +1,6 @@
 # sdl2 cmake project-config input for CMakeLists.txt script
 
+include(CMakeFindDependencyMacro)
 include(FeatureSummary)
 set_package_properties(SDL2 PROPERTIES
   URL "https://www.libsdl.org/"
@@ -62,4 +63,22 @@ if(TARGET SDL2::SDL2main)
   list(INSERT SDL2_STATIC_LIBRARIES 0 SDL2::SDL2main)
 endif()
 
-set(SDL2TEST_LIBRARY SDL2::SDL2test)
\ No newline at end of file
+set(SDL2TEST_LIBRARY SDL2::SDL2test)
+
+# Find dependencies of SDL2
+
+set(_sdl_cmake_module_path ${CMAKE_MODULE_PATH})
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
+
+set(_sdl_directfb @SDL_DIRECTFB@)
+set(_sdl_directfb_shared @SDL_DIRECTFB_SHARED@)
+if(_sdl_directfb)
+  find_dependency(DirectFB COMPONENTS HEADERS)
+  if(NOT _sdl_directfb_shared)
+    find_dependency(DirectFB COMPONENTS LIBRARY)
+  endif()
+endif()
+unset(_sdl_directfb)
+unset(_sdl_directfb_shared)
+
+set(CMAKE_MODULE_PATH ${_sdl_cmake_module_path})
diff --git a/cmake/FindDirectFB.cmake b/cmake/FindDirectFB.cmake
new file mode 100644
index 00000000000..51cc057876d
--- /dev/null
+++ b/cmake/FindDirectFB.cmake
@@ -0,0 +1,66 @@
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(_directfb_pkgconfig directfb>=1.0.0)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_DIRECTFB "${_directfb_pkgconfig}")
+endif()
+
+find_path(DirectFB_INCLUDE_PATHS
+  NAMES "directfb.h"
+  PATHS ${PKG_DIRECTFB_INCLUDE_DIRS}
+)
+
+find_library(DirectFB_LIBRARY
+  NAMES directfb
+  PATHS ${PKG_DIRECTFB_LIBRARY_DIRS}
+  PATH_SUFFIXES directfb
+)
+
+set(DirectFB_COMPILE_FLAGS "${PKG_DIRECTFB_CFLAGS}" CACHE STRING "Extra compile flags of DirectFB")
+
+set(DirectFB_LINK_LIBRARIES "" CACHE STRING "Extra link libraries of DirectFB")
+
+set(DirectFB_LINK_FLAGS "${PKG_DIRECTFB_LDFLAGS}" CACHE STRING "Extra link flags of DirectFB")
+
+set(_directfb_required_vars )
+
+set(_directfb_library_required 0)
+if(NOT DirectFB_FIND_COMPONENTS OR "LIBRARY" IN_LIST DirectFB_FIND_COMPONENTS)
+  list(APPEND _directfb_required_vars DirectFB_LIBRARY)
+  set(_directfb_library_required 1)
+endif()
+
+set(_directfb_headers_required 0)
+if(NOT DirectFB_FIND_COMPONENTS OR "HEADERS" IN_LIST DirectFB_FIND_COMPONENTS)
+  set(_directfb_headers_required 1)
+endif()
+list(APPEND _directfb_required_vars DirectFB_INCLUDE_PATHS)
+
+find_package_handle_standard_args(DirectFB
+  REQUIRED_VARS ${_directfb_required_vars}
+)
+
+if(DirectFB_FOUND)
+  if(NOT TARGET DirectFB::Headers AND _directfb_headers_required)
+    add_library(DirectFB::Headers INTERFACE IMPORTED)
+    set_target_properties(DirectFB::Headers PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES "${DirectFB_INCLUDE_PATH}"
+      INTERFACE_COMPILE_OPTIONS "${DirectFB_COMPILE_FLAGS}"
+      INTERFACE_PKGCONFIG "${_directfb_pkgconfig}"
+    )
+  endif()
+  if(NOT TARGET DirectFB::DirectFB AND _directfb_library_required)
+    add_library(DirectFB::DirectFB UNKNOWN IMPORTED)
+    set_target_properties(DirectFB::DirectFB PROPERTIES
+      IMPORTED_LOCATION "${DirectFB_LIBRARY}"
+      INTERFACE_INCLUDE_DIRECTORIES "${DirectFB_INCLUDE_PATH}"
+      INTERFACE_COMPILE_OPTIONS "${DirectFB_COMPILE_FLAGS}"
+      INTERFACE_LINK_LIBRARIES "${DirectFB_LINK_LIBRARIES}"
+      INTERFACE_LINK_FLAGS "${DirectFB_LINK_FLAGS}"
+      INTERFACE_PKGCONFIG "${_directfb_pkgconfig}"
+    )
+  endif()
+endif()
diff --git a/cmake/macros.cmake b/cmake/macros.cmake
index 920785bad39..cde9dc08ede 100644
--- a/cmake/macros.cmake
+++ b/cmake/macros.cmake
@@ -111,3 +111,22 @@ if(CMAKE_VERSION VERSION_LESS 3.13.0)
     link_directories(${ARGN})
   endmacro()
 endif()
+
+function(get_cflags_from_target OUTPUT TARGET)
+  get_target_property(incdirs ${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(cflags ${TARGET} INTERFACE_COMPILE_OPTIONS)
+  set(result )
+  foreach(incdir IN LISTS incdirs)
+    list(APPEND result "-I${incdir}")
+  endforeach()
+  list(APPEND result ${cflags})
+  set("${OUTPUT}" "${result}" PARENT_SCOPE)
+endfunction()
+
+function(get_ldflags_from_target OUTPUT TARGET)
+  get_target_property(imploc ${TARGET} IMPORTED_LOCATION)
+  get_target_property(intlibs ${TARGET} INTERFACE_LINK_LIBRARIES)
+  get_target_property(intldflags ${TARGET} INTERFACE_LINK_FLAGS)
+  set(result ${IMPORTED_LOCATION} ${intlibs} ${intldflags})
+  set("${OUTPUT}" "${result}" PARENT_SCOPE)
+endfunction()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index 7e2507505e5..21aecabbe7d 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -761,15 +761,16 @@ endmacro()
 # - HAVE_SDL_LOADSO opt
 macro(CheckDirectFB)
   if(SDL_DIRECTFB)
-    pkg_check_modules(PKG_DIRECTFB directfb>=1.0.0)
-    if(PKG_DIRECTFB_FOUND)
+    find_package(DirectFB)
+    if(DirectFB_FOUND)
       set(HAVE_DIRECTFB TRUE)
       file(GLOB DIRECTFB_SOURCES ${SDL2_SOURCE_DIR}/src/video/directfb/*.c)
       list(APPEND SOURCE_FILES ${DIRECTFB_SOURCES})
       set(SDL_VIDEO_DRIVER_DIRECTFB 1)
       set(SDL_VIDEO_RENDER_DIRECTFB 1)
-      list(APPEND EXTRA_CFLAGS ${PKG_DIRECTFB_CFLAGS})
-      list(APPEND SDL_CFLAGS ${PKG_DIRECTFB_CFLAGS})
+      get_cflags_from_target(directfb_cflags DirectFB::DirectFB)
+      list(APPEND EXTRA_CFLAGS ${directfb_cflags})
+      list(APPEND SDL_CFLAGS ${directfb_cflags})
       if(SDL_DIRECTFB_SHARED AND NOT HAVE_SDL_LOADSO)
         message_warn("You must have SDL_LoadObject() support for dynamic DirectFB loading")
       endif()
@@ -777,8 +778,11 @@ macro(CheckDirectFB)
       if(SDL_DIRECTFB_SHARED AND DIRECTFB_LIB AND HAVE_SDL_LOADSO)
         set(SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC "\"${DIRECTFB_LIB_SONAME}\"")
         set(HAVE_DIRECTFB_SHARED TRUE)
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE DirectFB::Headers)
       else()
-        list(APPEND EXTRA_LDFLAGS ${PKG_DIRECTFB_LDFLAGS})
+        get_ldflags_from_target(directfb_ldflags DirectFB::DirectFB)
+        list(APPEND EXTRA_LDFLAGS ${directfb_ldflags})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE DirectFB::DirectFB)
       endif()
       set(HAVE_SDL_VIDEO TRUE)
     endif()
diff --git a/sdl2-config.cmake.in b/sdl2-config.cmake.in
index db864aab98e..315442b986a 100644
--- a/sdl2-config.cmake.in
+++ b/sdl2-config.cmake.in
@@ -1,5 +1,6 @@
 # sdl2 cmake project-config input for ./configure script
 
+include(CMakeFindDependencyMacro)
 include(FeatureSummary)
 set_package_properties(SDL2 PROPERTIES
     URL "https://www.libsdl.org/"

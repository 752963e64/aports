From e2d8db6b19f2ef6f4b18ef21dc830b4dad988e8d Mon Sep 17 00:00:00 2001
From: itchyny <itchyny@hatena.ne.jp>
Date: Fri, 2 Apr 2021 19:43:50 +0900
Subject: [PATCH] make numeric conversion architecture-independent in modulo
 operator

---
 cli/test.yaml |  4 ++--
 func.go       | 18 +++++++++++-------
 operator.go   |  8 +++-----
 3 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/cli/test.yaml b/cli/test.yaml
index 10d5f9c..810bbf6 100644
--- a/cli/test.yaml
+++ b/cli/test.yaml
@@ -3208,8 +3208,8 @@
     [null,false,false,false]
     [null,false,false,false]
     [0,false,false,false]
-    [0,false,false,false]
-    [0,false,false,false]
+    [-1,false,false,false]
+    [9223372036854775807,false,false,false]
     [0,false,false,false]
     [0,false,false,false]
     [-0,false,false,false]
diff --git a/func.go b/func.go
index dced0ff..829a31f 100644
--- a/func.go
+++ b/func.go
@@ -1591,13 +1591,7 @@ func toInt(x interface{}) (int, bool) {
 	case int:
 		return x, true
 	case float64:
-		if minInt <= x && x <= maxInt {
-			return int(x), true
-		}
-		if x > 0 {
-			return maxInt, true
-		}
-		return minInt, true
+		return floatToInt(x), true
 	case *big.Int:
 		if x.IsInt64() {
 			if i := x.Int64(); minInt <= i && i <= maxInt {
@@ -1613,6 +1607,16 @@ func toInt(x interface{}) (int, bool) {
 	}
 }
 
+func floatToInt(x float64) int {
+	if minInt <= x && x <= maxInt {
+		return int(x)
+	}
+	if x > 0 {
+		return maxInt
+	}
+	return minInt
+}
+
 func toFloat(x interface{}) (float64, bool) {
 	switch x := x.(type) {
 	case int:
diff --git a/operator.go b/operator.go
index a9f61c8..0135922 100644
--- a/operator.go
+++ b/operator.go
@@ -478,13 +478,11 @@ func funcOpMod(_, l, r interface{}) interface{} {
 			return l % r
 		},
 		func(l, r float64) interface{} {
-			if int(r) == 0 {
-				if r < -1.0 || 1.0 < r { // int(math.Inf(1)) == 0 on some architectures
-					return int(l) % minInt
-				}
+			ri := floatToInt(r)
+			if ri == 0 {
 				return &zeroModuloError{l, r}
 			}
-			return int(l) % int(r)
+			return floatToInt(l) % ri
 		},
 		func(l, r *big.Int) interface{} {
 			if r.Sign() == 0 {

From 3c9fdffa2244c1aa82394d05f8fa4c09b0f84200 Mon Sep 17 00:00:00 2001
From: itchyny <itchyny@hatena.ne.jp>
Date: Fri, 2 Apr 2021 19:50:01 +0900
Subject: [PATCH] make modulo tests independent from the number of bits for
 integer

---
 cli/test.yaml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/cli/test.yaml b/cli/test.yaml
index 810bbf6..2ab26df 100644
--- a/cli/test.yaml
+++ b/cli/test.yaml
@@ -3186,7 +3186,7 @@
 - name: infinite function
   args:
     - -c
-    - '[infinite, -infinite] | (.[], .[]+.[], .[]-.[], .[]*.[], .[]/.[], .[]%.[], 1/.[], -1/.[], .[]-1e300, .[]+1e300) | [., . == infinite, . == -infinite, contains(infinite)]'
+    - '[infinite, -infinite] | (.[], .[]+.[], .[]-.[], .[]*.[], .[]/.[], .[]%.[]%256, 1/.[], -1/.[], .[]-1e300, .[]+1e300) | [., . == infinite, . == -infinite, contains(infinite)]'
   input: 'null'
   expected: |
     [1.7976931348623157e+308,true,false,true]
@@ -3209,7 +3209,7 @@
     [null,false,false,false]
     [0,false,false,false]
     [-1,false,false,false]
-    [9223372036854775807,false,false,false]
+    [255,false,false,false]
     [0,false,false,false]
     [0,false,false,false]
     [-0,false,false,false]

Add dependency to libexecinfo and the associated version for backtraces.
Also adds a workaround for the runtime missing a vfork definition.

diff -Nurp a/dmd/src/dmd/link.d b/dmd/src/dmd/link.d
--- a/dmd/src/dmd/link.d
+++ b/dmd/src/dmd/link.d
@@ -34,6 +34,7 @@
 version (Windows) extern (C) int spawnlp(int, const char*, const char*, const char*, const char*);
 version (Windows) extern (C) int spawnl(int, const char*, const char*, const char*, const char*);
 version (Windows) extern (C) int spawnv(int, const char*, const char**);
+version (CRuntime_Musl) extern(C) pid_t vfork();
 version (CRuntime_Microsoft)
 {
   // until the new windows bindings are available when building dmd.
@@ -746,6 +747,8 @@
             argv.push("-lrt");
             // Link against libdl for phobos usage of dlopen
             argv.push("-ldl");
+            // Musl
+            argv.push("-lexecinfo");
         }
         if (global.params.verbose)
         {
diff -Nurp a/dmd/src/dmd/mars.d b/dmd/src/dmd/mars.d
--- a/dmd/src/dmd/mars.d
+++ b/dmd/src/dmd/mars.d
@@ -1194,7 +1194,10 @@ void addDefaultVersionIdentifiers(const ref Param params)
         // See https://github.com/dlang/dmd/pull/8020
         // And https://wiki.osdev.org/Target_Triplet
         version (CRuntime_Musl)
+        {
             VersionCondition.addPredefinedGlobalIdent("CRuntime_Musl");
+            VersionCondition.addPredefinedGlobalIdent("ExtExecinfo_BSDFmt");
+        }
         else
             VersionCondition.addPredefinedGlobalIdent("CRuntime_Glibc");
         VersionCondition.addPredefinedGlobalIdent("CppRuntime_Gcc");

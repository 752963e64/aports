From be152f1b496517b10a590573ca7694924c2c3175 Mon Sep 17 00:00:00 2001
From: Geod24 <pro.mathias.lang@gmail.com>
Date: Sat, 2 Jan 2021 11:40:21 +0900
Subject: Encapsulate backtrace-buffering into its own struct

This makes it reusable by other backtrace providers,
and just generally makes the code easier to follow.
---
 src/core/internal/backtrace/dwarf.d | 73 +++++++++++++++++++----------
 1 file changed, 48 insertions(+), 25 deletions(-)

diff --git a/src/core/internal/backtrace/dwarf.d b/src/core/internal/backtrace/dwarf.d
index dc1425a7d..ba059db30 100644
--- a/druntime/src/core/internal/backtrace/dwarf.d
+++ b/druntime/src/core/internal/backtrace/dwarf.d
@@ -183,34 +183,13 @@ int traceHandlerOpApplyImpl(const(void*)[] callstack, scope int delegate(ref siz
         if (debugLineSectionData)
             resolveAddresses(debugLineSectionData, locations[], image.baseAddress);
 
-        char[1536] buffer = void;
-        size_t bufferLength;
-        scope sink = (scope const char[] data) {
-                // We cannot write anymore
-                if (bufferLength > buffer.length)
-                    return;
-
-                if (bufferLength + data.length > buffer.length)
-                {
-                    buffer[bufferLength .. $] = data[0 .. buffer.length - bufferLength];
-                    buffer[$ - 3 .. $] = "...";
-                    // +1 is a marker for the '...', otherwise if the symbol
-                    // name was to exactly fill the buffer,
-                    // we'd discard anything else without printing the '...'.
-                    bufferLength = buffer.length + 1;
-                    return;
-                }
-
-                buffer[bufferLength .. bufferLength + data.length] = data;
-                bufferLength += data.length;
-        };
-
+        TraceInfoBuffer buffer;
         foreach (idx, const ref loc; locations)
         {
-            bufferLength = 0;
-            loc.toString(sink);
+            buffer.reset();
+            loc.toString(&buffer.put);
 
-            auto lvalue = buffer[0 .. bufferLength > $ ? $ : bufferLength];
+            auto lvalue = buffer[];
             if (auto ret = dg(idx, lvalue))
                 return ret;
 
@@ -226,6 +205,50 @@ int traceHandlerOpApplyImpl(const(void*)[] callstack, scope int delegate(ref siz
         : processCallstack(null);
 }
 
+struct TraceInfoBuffer
+{
+    private char[1536] buf = void;
+    private size_t position;
+
+    // BUG: https://issues.dlang.org/show_bug.cgi?id=21285
+    @safe pure nothrow @nogc
+    {
+        ///
+        inout(char)[] opSlice() inout return
+        {
+            return this.buf[0 .. this.position > $ ? $ : this.position];
+        }
+
+        ///
+        void reset()
+        {
+            this.position = 0;
+        }
+    }
+
+    /// Used as `sink` argument to `Location.toString`
+    void put(scope const char[] data)
+    {
+        // We cannot write anymore
+        if (this.position > this.buf.length)
+            return;
+
+        if (this.position + data.length > this.buf.length)
+        {
+            this.buf[this.position .. $] = data[0 .. this.buf.length - this.position];
+            this.buf[$ - 3 .. $] = "...";
+            // +1 is a marker for the '...', otherwise if the symbol
+            // name was to exactly fill the buffer,
+            // we'd discard anything else without printing the '...'.
+            this.position = this.buf.length + 1;
+            return;
+        }
+
+        this.buf[this.position .. this.position + data.length] = data;
+        this.position += data.length;
+    }
+}
+
 private:
 
 // the lifetime of the Location data is bound to the lifetime of debugLineSectionData
-- 
2.24.3 (Apple Git-128)


From e0698ab30245a2b4a1ef8da904c03e5336e0746b Mon Sep 17 00:00:00 2001
From: Geod24 <pro.mathias.lang@gmail.com>
Date: Tue, 1 Dec 2020 17:11:51 +0100
Subject: Add internal bindings for libunwind

As mentioned in the module DDOC, those bindings are only intended
to be used internally for the backtracing code,
hence only a couple functions and the related types were added.
---
 mak/COPY                                |   1 +
 mak/DOCS                                |   1 +
 mak/SRCS                                |   1 +
 src/core/internal/backtrace/libunwind.d | 281 ++++++++++++++++++++++++
 4 files changed, 284 insertions(+)
 create mode 100644 src/core/internal/backtrace/libunwind.d

diff --git a/mak/COPY b/mak/COPY
index 6e70fafcb..fa97e1207 100644
--- a/druntime/mak/COPY
+++ b/druntime/mak/COPY
@@ -53,6 +53,7 @@ COPY=\
 	\
 	$(IMPDIR)\core\internal\backtrace\dwarf.d \
 	$(IMPDIR)\core\internal\backtrace\elf.d \
+	$(IMPDIR)\core\internal\backtrace\libunwind.d \
 	$(IMPDIR)\core\internal\backtrace\macho.d \
 	\
 	$(IMPDIR)\core\internal\elf\dl.d \
diff --git a/mak/DOCS b/mak/DOCS
index 164464815..90b16a19e 100644
--- a/druntime/mak/DOCS
+++ b/druntime/mak/DOCS
@@ -87,6 +87,7 @@ DOCS=\
 	\
 	$(DOCDIR)\core_internal_backtrace_dwarf.html \
 	$(DOCDIR)\core_internal_backtrace_elf.html \
+	$(DOCDIR)\core_internal_backtrace_libunwind.html \
 	$(DOCDIR)\core_internal_backtrace_macho.html \
 	\
 	$(DOCDIR)\core_internal_container_array.html \
diff --git a/mak/SRCS b/mak/SRCS
index 9d08ddad5..05cb923e1 100644
--- a/druntime/mak/SRCS
+++ b/druntime/mak/SRCS
@@ -53,6 +53,7 @@ SRCS=\
 	\
 	src\core\internal\backtrace\dwarf.d \
 	src\core\internal\backtrace\elf.d \
+	src\core\internal\backtrace\libunwind.d \
 	src\core\internal\backtrace\macho.d \
 	\
 	src\core\internal\container\array.d \
diff --git a/src/core/internal/backtrace/libunwind.d b/src/core/internal/backtrace/libunwind.d
new file mode 100644
index 000000000..fff25bb11
--- /dev/null
+++ b/druntime/src/core/internal/backtrace/libunwind.d
@@ -0,0 +1,281 @@
+/**
+ * Basic D language bindings for libunwind
+ *
+ * There are two available libunwind: The "upstream" one, inherited
+ * from HP, which is maintained as a GNU project,
+ * and the LLVM one, part of llvm-project, and the default on Mac OSX.
+ *
+ * They offer a similar interface for C[++] users, but this is based on
+ * defines and other header attributes which we cannot reproduce in D.
+ * Thus, this header contains bindings for both libraries, and the right
+ * version needs to be selected when compiling Druntime.
+ *
+ * Authors: Mathias 'Geod24' Lang
+ * Copyright: D Language Foundation - 2020
+ * See_Also:
+ *   - https://www.nongnu.org/libunwind/man/libunwind(3).html
+ *   - https://clang.llvm.org/docs/Toolchain.html#unwind-library
+ */
+module core.internal.backtrace.libunwind;
+
+// Libunwind supports Windows as well, but we currently use a different
+// mechanism for Windows, so the bindings haven't been brought in yet.
+version (Posix):
+
+import core.stdc.inttypes;
+
+version (OSX)
+    version = Darwin;
+else version (iOS)
+    version = Darwin;
+else version (TVOS)
+    version = Darwin;
+else version (WatchOS)
+    version = Darwin;
+
+version (Darwin)
+    version = DRuntime_Use_LLVM_Libunwind;
+
+extern(C):
+@system:
+@nogc:
+nothrow:
+
+/*
+ * Bindings for libunwind.h
+ */
+alias unw_word_t = uintptr_t;
+
+///
+struct unw_context_t
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+        ulong[_LIBUNWIND_CONTEXT_SIZE] data = void;
+    else
+        unw_word_t[UNW_TDEP_CURSOR_LEN] opaque = void;
+}
+
+///
+struct unw_cursor_t
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+        ulong[_LIBUNWIND_CURSOR_SIZE] data = void;
+    else
+        unw_tdep_context_t opaque = void;
+}
+
+///
+struct unw_proc_info_t
+{
+    unw_word_t  start_ip;         /* start address of function */
+    unw_word_t  end_ip;           /* address after end of function */
+    unw_word_t  lsda;             /* address of language specific data area, */
+    /*  or zero if not used */
+    unw_word_t  handler;          /* personality routine, or zero if not used */
+    unw_word_t  gp;               /* not used */
+    unw_word_t  flags;            /* not used */
+    uint        format;           /* compact unwind encoding, or zero if none */
+    uint        unwind_info_size; /* size of DWARF unwind info, or zero if none */
+    // Note: It's a `void*` with LLVM and a `unw_word_t` with upstream
+    unw_word_t  unwind_info;      /* address of DWARF unwind info, or zero */
+    // Note: upstream might not have this member at all, or it might be a single
+    // byte, however we never pass an array of this type, so this is safe to
+    // just use the bigger (LLVM's) value.
+    unw_word_t  extra;            /* mach_header of mach-o image containing func */
+}
+
+/// Initialize the context at the current call site
+int unw_getcontext(unw_context_t*);
+/// Initialize a cursor at the call site
+int unw_init_local(unw_cursor_t*, unw_context_t*);
+/// Goes one level up in the call chain
+int unw_step(unw_cursor_t*);
+/// Get infos about the current procedure (function)
+int unw_get_proc_info(unw_cursor_t*, unw_proc_info_t*);
+/// Get the name of the current procedure (function)
+int unw_get_proc_name(unw_cursor_t*, char*, size_t, unw_word_t*);
+
+private:
+
+// The API between libunwind and llvm-libunwind is almost the same,
+// at least for our use case, and only the struct size change,
+// so handle the difference here.
+// Upstream: https://github.com/libunwind/libunwind/tree/master/include
+// LLVM: https://github.com/llvm/llvm-project/blob/20c926e0797e074bfb946d2c8ce002888ebc2bcd/libunwind/include/__libunwind_config.h#L29-L141
+version (X86)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        enum _LIBUNWIND_CONTEXT_SIZE = 8;
+        enum _LIBUNWIND_CURSOR_SIZE = 15;
+    }
+    else
+    {
+        import core.sys.posix.ucontext;
+        alias unw_tdep_context_t = ucontext_t;
+        enum UNW_TDEP_CURSOR_LEN = 127;
+    }
+}
+else version (X86_64)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        version (Win64)
+        {
+            enum _LIBUNWIND_CONTEXT_SIZE = 54;
+// #    ifdef __SEH__
+// #      define _LIBUNWIND_CURSOR_SIZE 204
+            enum _LIBUNWIND_CURSOR_SIZE = 66;
+        } else {
+            enum _LIBUNWIND_CONTEXT_SIZE = 21;
+            enum _LIBUNWIND_CURSOR_SIZE = 33;
+        }
+    }
+    else
+    {
+        import core.sys.posix.ucontext;
+        alias unw_tdep_context_t = ucontext_t;
+        enum UNW_TDEP_CURSOR_LEN = 127;
+    }
+}
+else version (PPC64)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        enum _LIBUNWIND_CONTEXT_SIZE = 167;
+        enum _LIBUNWIND_CURSOR_SIZE = 179;
+    }
+    else
+    {
+        import core.sys.posix.ucontext;
+        alias unw_tdep_context_t = ucontext_t;
+        enum UNW_TDEP_CURSOR_LEN = 280;
+    }
+}
+else version (PPC)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        enum _LIBUNWIND_CONTEXT_SIZE = 117;
+        enum _LIBUNWIND_CURSOR_SIZE = 124;
+    }
+    else
+    {
+        import core.sys.posix.ucontext;
+        alias unw_tdep_context_t = ucontext_t;
+        enum UNW_TDEP_CURSOR_LEN = 280;
+    }
+}
+else version (AArch64)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        enum _LIBUNWIND_CONTEXT_SIZE = 66;
+// #  if defined(__SEH__)
+// #    define _LIBUNWIND_CURSOR_SIZE 164
+        enum _LIBUNWIND_CURSOR_SIZE = 78;
+    }
+    else
+    {
+        enum UNW_TDEP_CURSOR_LEN = 250;
+
+        version (linux)
+        {
+            import core.sys.posix.signal : sigset_t, stack_t;
+
+            // libunwind has some special tweaking to reduce
+            // the size of ucontext_t on Linux.
+            struct unw_sigcontext
+            {
+                ulong fault_address;
+                ulong[31] regs;
+                ulong sp;
+                ulong pc;
+                ulong pstate;
+                align(16) ubyte[(66 * 8)] reserved;
+            }
+
+            struct unw_tdep_context_t
+            {
+                c_ulong uc_flags;
+                void* uc_link;
+                stack_t uc_stack;
+                sigset_t uc_sigmask;
+                unw_sigcontext uc_mcontext;
+            }
+        }
+        else
+        {
+            import core.sys.posix.ucontext;
+            alias unw_tdep_context_t = ucontext_t;
+        }
+    }
+}
+else version (ARM)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+// #  if defined(__SEH__)
+// #    define _LIBUNWIND_CONTEXT_SIZE 42
+// #    define _LIBUNWIND_CURSOR_SIZE 80
+// #  elif defined(__ARM_WMMX)
+// #    define _LIBUNWIND_CONTEXT_SIZE 61
+// #    define _LIBUNWIND_CURSOR_SIZE 68
+        enum _LIBUNWIND_CONTEXT_SIZE = 42;
+        enum _LIBUNWIND_CURSOR_SIZE = 49;
+    }
+    else
+    {
+        struct unw_tdep_context_t
+        {
+            c_ulong[16] regs;
+        }
+        enum UNW_TDEP_CURSOR_LEN = 4096;
+    }
+}
+else version (SPARC)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        enum _LIBUNWIND_CONTEXT_SIZE = 16;
+        enum _LIBUNWIND_CURSOR_SIZE = 23;
+    }
+    else
+    {
+        static assert(0, "SPARC not supported on libunwind upstream, use LLVM's");
+    }
+}
+else version (RISCV64) // 32 is not supported
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        enum _LIBUNWIND_CONTEXT_SIZE = 64;
+        enum _LIBUNWIND_CURSOR_SIZE = 76;
+    }
+    else
+    {
+        static assert(0, "RISCV64 not supported on libunwind upstream, use LLVM's");
+    }
+}
+else version (SystemZ)
+{
+    version (DRuntime_Use_LLVM_Libunwind)
+    {
+        static assert(0, "s390x/SystemZ not supported on LLVM's libunwind, use upstream's");
+    }
+    else
+    {
+        import core.sys.posix.ucontext;
+        alias unw_tdep_context_t = ucontext_t;
+        enum UNW_TDEP_CURSOR_LEN = 384;
+    }
+}
+else
+    /*
+     * Libunwind also support OpenRISC 1000 (or1k), hexagon, and MIPS
+     * at the time of writing (December 2020).
+     */
+    static assert(0, "Platform not supported");
+
+// Just a fail-safe in case the combinations above missed something
+static assert(is(typeof(UNW_TDEP_CURSOR_LEN)) || is(typeof(_LIBUNWIND_CURSOR_SIZE)));
-- 
2.24.3 (Apple Git-128)


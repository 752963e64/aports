From 9d2ac4c4035083b94f2517fccfd13722b637f453 Mon Sep 17 00:00:00 2001
From: Geod24 <pro.mathias.lang@gmail.com>
Date: Mon, 4 Jan 2021 22:08:36 +0900
Subject: Only encapsulate the call to backtrace in 'hasExecInfo'

The execinfo functionality really only concerns itself with backtrace,
which provide addresses and function names.
However, the general ability to iterate over locations and fill them
with file/line informations, as well as the utilities tied to it
(e.g. TraceInfoBuffer) can be used by other implementations.
---
 src/core/internal/backtrace/dwarf.d | 42 +++++++++++++++--------------
 1 file changed, 22 insertions(+), 20 deletions(-)

diff --git a/src/core/internal/backtrace/dwarf.d b/src/core/internal/backtrace/dwarf.d
index dfecc7eab..8f082c783 100644
--- a/druntime/src/core/internal/backtrace/dwarf.d
+++ b/druntime/src/core/internal/backtrace/dwarf.d
@@ -52,8 +52,6 @@ module core.internal.backtrace.dwarf;
 import core.internal.execinfo;
 import core.internal.string;
 
-static if (hasExecinfo):
-
 version (OSX)
     version = Darwin;
 else version (iOS)
@@ -159,30 +157,34 @@ struct Location
     }
 }
 
-int traceHandlerOpApplyImpl(const(void*)[] callstack, scope int delegate(ref size_t, ref const(char[])) dg)
+static if (hasExecinfo)
 {
-    import core.stdc.stdio : snprintf;
-    import core.sys.posix.stdlib : free;
+    int traceHandlerOpApplyImpl(const(void*)[] callstack,
+                                scope int delegate(ref size_t, ref const(char[])) dg)
+    {
+        import core.stdc.stdio : snprintf;
+        import core.sys.posix.stdlib : free;
 
-    const char** frameList = backtrace_symbols(callstack.ptr, cast(int) callstack.length);
-    scope(exit) free(cast(void*) frameList);
+        const char** frameList = backtrace_symbols(callstack.ptr, cast(int) callstack.length);
+        scope(exit) free(cast(void*) frameList);
 
-    auto image = Image.openSelf();
+        auto image = Image.openSelf();
 
-    // find address -> file, line mapping using dwarf debug_line
-    Array!Location locations;
-    locations.length = callstack.length;
-    foreach (size_t i; 0 .. callstack.length)
-    {
-        locations[i].address = callstack[i];
-        locations[i].procedure = getMangledSymbolName(frameList[i][0 .. strlen(frameList[i])]);
-    }
+        // find address -> file, line mapping using dwarf debug_line
+        Array!Location locations;
+        locations.length = callstack.length;
+        foreach (size_t i; 0 .. callstack.length)
+        {
+            locations[i].address = callstack[i];
+            locations[i].procedure = getMangledSymbolName(frameList[i][0 .. strlen(frameList[i])]);
+        }
 
-    if (!image.isValid())
-        return locations[].processCallstack(null, image.baseAddress, dg);
+        if (!image.isValid())
+            return locations[].processCallstack(null, image.baseAddress, dg);
 
-    return image.processDebugLineSectionData(
-        (line) => locations[].processCallstack(line, image.baseAddress, dg));
+        return image.processDebugLineSectionData(
+            (line) => locations[].processCallstack(line, image.baseAddress, dg));
+    }
 }
 
 struct TraceInfoBuffer
-- 
2.24.3 (Apple Git-128)


diff --git a/CMakeLists.txt b/CMakeLists.txt
index ecdf04e..8ad1961 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -64,6 +64,8 @@ plasma_install_package(lookandfeel org.kde.plasma.mycroft.bigscreen look-and-fee
 
 
 install(FILES bin/mycroft-skill-launcher.py DESTINATION ${BIN_INSTALL_DIR})
+install(FILES bin/cec-daemon.py DESTINATION ${BIN_INSTALL_DIR})
+install(FILES bin/40-uinput.rules DESTINATION ${LIB_INSTALL_DIR}/udev/rules.d)
 
 if(ECM_VERSION VERSION_GREATER_EQUAL 5.79)
     include(KDEClangFormat)
diff --git a/bin/40-uinput.rules b/bin/40-uinput.rules
new file mode 100644
index 0000000..918e0a7
--- /dev/null
+++ b/bin/40-uinput.rules
@@ -0,0 +1 @@
+SUBSYSTEM=="misc", KERNEL=="uinput", MODE="0660", GROUP="video"
diff --git a/bin/CMakeLists.txt b/bin/CMakeLists.txt
index 2f1bb3b..85eee3b 100644
--- a/bin/CMakeLists.txt
+++ b/bin/CMakeLists.txt
@@ -1,6 +1,12 @@
 configure_file(plasma-bigscreen-wayland.in ${CMAKE_CURRENT_BINARY_DIR}/plasma-bigscreen-wayland)
 install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/plasma-bigscreen-wayland DESTINATION ${BIN_INSTALL_DIR})
 
+configure_file(cec-daemon.desktop.cmake ${CMAKE_CURRENT_BINARY_DIR}/cec-daemon.desktop)
+install(FILES
+	${CMAKE_CURRENT_BINARY_DIR}/cec-daemon.desktop
+	DESTINATION ${KDE_INSTALL_SYSCONFDIR}/xdg/autostart
+)
+
 configure_file(plasma-bigscreen-wayland.desktop.cmake ${CMAKE_CURRENT_BINARY_DIR}/plasma-bigscreen-wayland.desktop)
 install(FILES
         ${CMAKE_CURRENT_BINARY_DIR}/plasma-bigscreen-wayland.desktop
diff --git a/bin/cec-daemon.desktop.cmake b/bin/cec-daemon.desktop.cmake
new file mode 100644
index 0000000..2435539
--- /dev/null
+++ b/bin/cec-daemon.desktop.cmake
@@ -0,0 +1,5 @@
+[Desktop Entry]
+Exec=${CMAKE_INSTALL_FULL_BINDIR}/cec-daemon.py
+Name=CEC Daemon
+Description=Allows input using TV remote controls through the CEC protocol
+X-KDE-PluginInfo-Version=${PROJECT_VERSION}
diff --git a/bin/cec-daemon.py b/bin/cec-daemon.py
new file mode 100755
index 0000000..b731970
--- /dev/null
+++ b/bin/cec-daemon.py
@@ -0,0 +1,95 @@
+#!/usr/bin/python3
+
+import cec
+import uinput
+import time
+import psutil
+
+u = uinput
+
+KEYMAP = {
+   0: u.KEY_ENTER,
+   1: u.KEY_UP,
+   2: u.KEY_DOWN,
+   3: u.KEY_LEFT,
+   4: u.KEY_RIGHT,
+   9: u.KEY_HOMEPAGE,
+   10: u.KEY_MENU,
+   13: u.KEY_BACK,
+   44: u.KEY_HOMEPAGE,
+   68: u.KEY_PLAY,
+   69: u.KEY_STOP,
+   70: u.KEY_PAUSE,
+   75: u.KEY_FASTFORWARD,
+   76: u.KEY_REWIND,
+   103: u.KEY_HOMEPAGE,
+   113: u.KEY_BLUE,
+   114: u.KEY_RED,
+   115: u.KEY_YELLOW,
+   116: u.KEY_GREEN
+}
+
+device = uinput.Device(KEYMAP.values())
+
+keystate = None
+override = False
+
+
+def check_override():
+    global override
+    if "kodi-x11" in (p.name() for p in psutil.process_iter()):
+        override = True
+    else:
+        override = False
+
+
+def init_cec():
+    cecconfig = cec.libcec_configuration()
+    cecconfig.strDeviceName = "libcec"
+    cecconfig.bActivateSource = 0
+    cecconfig.deviceTypes.Add(cec.CEC_DEVICE_TYPE_RECORDING_DEVICE)
+    cecconfig.clientVersion = cec.LIBCEC_VERSION_CURRENT
+
+    cecconfig.SetKeyPressCallback(keypress_callback)
+
+    lib = cec.ICECAdapter.Create(cecconfig)
+    adapters = lib.DetectAdapters()
+    returned_adapter = None
+
+    # Wait till we get a CEC device
+    while returned_adapter is None:
+        for adapter in adapters:
+            print("Found a CEC adapter:")
+            print("Port:    " + adapter.strComName)
+            print("Vendor:  " + hex(adapter.iVendorId))
+            print("Product: " + hex(adapter.iProductId))
+            returned_adapter = adapter.strComName
+
+    if lib.Open(returned_adapter):
+        print("Connection opened")
+
+        main_loop()
+
+
+def main_loop():
+    while True:
+        # Just make sure we live forever
+        time.sleep(9e9)
+
+
+def keypress_callback(key, duration):
+    global keystate
+
+    if override:
+        return
+
+    if keystate is None:
+        device.emit(KEYMAP[key], 1)
+        keystate = "down"
+    else:
+        device.emit(KEYMAP[key], 0)
+        keystate = None
+
+
+if __name__ == '__main__':
+    init_cec()

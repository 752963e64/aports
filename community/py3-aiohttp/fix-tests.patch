pytest.warns(None) was deprecated - use the alternative suggested by pytest:
https://docs.pytest.org/en/latest/how-to/capture-warnings.html#additional-use-cases-of-warnings-in-tests

diff --git a/tests/test_client_functional.py b/tests/test_client_functional.py
index 77126e1..72901f7 100644
--- a/tests/test_client_functional.py
+++ b/tests/test_client_functional.py
@@ -11,6 +11,7 @@ import ssl
 from unittest import mock
 
 import pytest
+import warnings
 from async_generator import async_generator, yield_
 from multidict import MultiDict
 from yarl import URL
@@ -2428,19 +2429,19 @@ async def test_drop_auth_on_redirect_to_other_host(
 
 
 async def test_async_with_session() -> None:
-    with pytest.warns(None) as cm:
+    with warnings.catch_warnings():
+        warnings.simplefilter("error")
         async with aiohttp.ClientSession() as session:
             pass
-    assert len(cm.list) == 0
 
     assert session.closed
 
 
 async def test_session_close_awaitable() -> None:
     session = aiohttp.ClientSession()
-    with pytest.warns(None) as cm:
+    with warnings.catch_warnings():
+        warnings.simplefilter("error")
         await session.close()
-    assert len(cm.list) == 0
 
     assert session.closed
 
@@ -2448,11 +2449,10 @@ async def test_session_close_awaitable() -> None:
 async def test_close_run_until_complete_not_deprecated() -> None:
     session = aiohttp.ClientSession()
 
-    with pytest.warns(None) as cm:
+    with warnings.catch_warnings():
+        warnings.simplefilter("error")
         await session.close()
 
-    assert len(cm.list) == 0
-
 
 async def test_close_resp_on_error_async_with_session(aiohttp_server) -> None:
     async def handler(request):

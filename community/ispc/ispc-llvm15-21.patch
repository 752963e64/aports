From 6cebf2946f3d9834950c413a0efb04981ca297a6 Mon Sep 17 00:00:00 2001
From: Arina Neshlyaeva <arina.neshlyaeva@intel.com>
Date: Tue, 20 Sep 2022 16:54:05 -0700
Subject: [PATCH] Eliminate getPointerElementType in CallInst

Modified to work
---
 src/ctx.cpp | 37 +++++++++++++++++++++++++------------
 1 file changed, 25 insertions(+), 12 deletions(-)

diff --git a/src/ctx.cpp b/src/ctx.cpp
index 3a75046..9911e1d 100644
--- a/src/ctx.cpp
+++ b/src/ctx.cpp
@@ -3276,20 +3276,25 @@ llvm::Instruction *FunctionEmitContext::SelectInst(llvm::Value *test, llvm::Valu
     pointer to a function to be called, figure out how many arguments the
     function has. */
 static unsigned int lCalleeArgCount(llvm::Value *callee, const FunctionType *funcType) {
-    llvm::FunctionType *ft = llvm::dyn_cast<llvm::FunctionType>(callee->getType());
+    llvm::Function *calleeFunc = llvm::dyn_cast<llvm::Function>(callee);
+    // Easy function type callee
+    if (calleeFunc) {
+        return calleeFunc->getFunctionType()->getNumParams();
+    } else {
+        // Uniform or varying function pointer must have funcType != NULL
+        Assert(funcType != nullptr);
+        // These calls are always unmasked, others have mask
+        if (funcType->isExternC || funcType->isUnmasked)
+            return funcType->GetNumParameters();
+        // It cannot be task on Xe target
+        else {
+            if (g->target->isXeTarget()) {
+                Assert(funcType->isTask == false);
+            }
 
-    if (ft == NULL) {
-        llvm::PointerType *pt = llvm::dyn_cast<llvm::PointerType>(callee->getType());
-        if (pt == NULL) {
-            // varying--in this case, it must be the version of the
-            // function that takes a mask
             return funcType->GetNumParameters() + 1;
         }
-        ft = llvm::dyn_cast<llvm::FunctionType>(pt->PTR_ELT_TYPE());
     }
-
-    Assert(ft != NULL);
-    return ft->getNumParams();
 }
 
 llvm::Value *FunctionEmitContext::CallInst(llvm::Value *func, const FunctionType *funcType,
@@ -3341,8 +3346,17 @@ llvm::Value *FunctionEmitContext::CallInst(llvm::Value *func, const FunctionType
         // Regular 'uniform' function call--just one function or function
         // pointer, so just emit the IR directly.
 #if ISPC_LLVM_VERSION >= ISPC_LLVM_11_0
-        llvm::PointerType *func_ptr_type = llvm::dyn_cast<llvm::PointerType>(func->getType());
-        llvm::FunctionType *func_type = llvm::dyn_cast<llvm::FunctionType>(func_ptr_type->getPointerElementType());
+        llvm::FunctionType *func_type = nullptr;
+
+        // Easy function type callee
+        if (llvm::Function *f = llvm::dyn_cast<llvm::Function>(func)) {
+            func_type = f->getFunctionType();
+        } else {
+            // In case of uniform function pointer get the signature from funcType
+            Assert(funcType != nullptr);
+            bool disableMask = args.size() == calleeArgCount;
+            func_type = funcType->LLVMFunctionType(g->ctx, disableMask);
+        }
         llvm::CallInst *callinst = llvm::CallInst::Create(func_type, func, argVals, name, bblock);
 #else
         llvm::CallInst *callinst = llvm::CallInst::Create(func, argVals, name, bblock);
-- 
2.38.0


From 42801e2a736f362ae851b7962b4aa1d4f4b2d424 Mon Sep 17 00:00:00 2001
From: Alexander Shalamov <alexander.shalamov@mapbox.com>
Date: Mon, 24 Aug 2020 11:49:27 +0300
Subject: [PATCH] Fix template argument evaluation for hash offset values

Use 64 and 32 bit unsigned integers explicitly to avoid compilers throwing narrowing errors.
---
 include/mapbox/eternal.hpp | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/include/mapbox/eternal.hpp b/include/mapbox/eternal.hpp
index e02a569..10c2f82 100644
--- a/include/mapbox/eternal.hpp
+++ b/include/mapbox/eternal.hpp
@@ -340,12 +340,12 @@ namespace impl {
 // Use different constants for 32 bit vs. 64 bit size_t
 constexpr std::size_t hash_offset =
     std::conditional_t<sizeof(std::size_t) < 8,
-                       std::integral_constant<std::size_t, 0x811C9DC5>,
-                       std::integral_constant<std::size_t, 0xCBF29CE484222325>>::value;
+                       std::integral_constant<std::uint32_t, 0x811C9DC5>,
+                       std::integral_constant<std::uint64_t, 0xCBF29CE484222325>>::value;
 constexpr std::size_t hash_prime =
     std::conditional_t<sizeof(std::size_t) < 8,
-                       std::integral_constant<std::size_t, 0x1000193>,
-                       std::integral_constant<std::size_t, 0x100000001B3>>::value;
+                       std::integral_constant<std::uint32_t, 0x1000193>,
+                       std::integral_constant<std::uint64_t, 0x100000001B3>>::value;
 
 // FNV-1a hash
 constexpr static std::size_t str_hash(const char* str,

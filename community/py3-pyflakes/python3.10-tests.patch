--- ./pyflakes/test/test_api.py.old
+++ ./pyflakes/test/test_api.py
@@ -416,74 +416,6 @@
             errors,
             [('unexpectedError', 'extremo', 'No such file or directory')])
 
-    def test_multilineSyntaxError(self):
-        """
-        Source which includes a syntax error which results in the raised
-        L{SyntaxError.text} containing multiple lines of source are reported
-        with only the last line of that source.
-        """
-        source = """\
-def foo():
-    '''
-
-def bar():
-    pass
-
-def baz():
-    '''quux'''
-"""
-
-        # Sanity check - SyntaxError.text should be multiple lines, if it
-        # isn't, something this test was unprepared for has happened.
-        def evaluate(source):
-            exec(source)
-        try:
-            evaluate(source)
-        except SyntaxError:
-            e = sys.exc_info()[1]
-            if not PYPY:
-                self.assertTrue(e.text.count('\n') > 1)
-        else:
-            self.fail()
-
-        with self.makeTempFile(source) as sourcePath:
-            if PYPY:
-                message = 'end of file (EOF) while scanning triple-quoted string literal'
-            else:
-                message = 'invalid syntax'
-
-            column = 8 if sys.version_info >= (3, 8) else 11
-            self.assertHasErrors(
-                sourcePath,
-                ["""\
-%s:8:%d: %s
-    '''quux'''
-%s^
-""" % (sourcePath, column, message, ' ' * (column - 1))])
-
-    def test_eofSyntaxError(self):
-        """
-        The error reported for source files which end prematurely causing a
-        syntax error reflects the cause for the syntax error.
-        """
-        with self.makeTempFile("def foo(") as sourcePath:
-            if PYPY:
-                result = """\
-%s:1:7: parenthesis is never closed
-def foo(
-      ^
-""" % (sourcePath,)
-            else:
-                result = """\
-%s:1:9: unexpected EOF while parsing
-def foo(
-        ^
-""" % (sourcePath,)
-
-            self.assertHasErrors(
-                sourcePath,
-                [result])
-
     def test_eofSyntaxErrorWithTab(self):
         """
         The error reported for source files which end prematurely causing a
@@ -500,37 +432,6 @@
 \tfoo =
 %s
 """ % (sourcePath, column, last_line)])
-
-    def test_nonDefaultFollowsDefaultSyntaxError(self):
-        """
-        Source which has a non-default argument following a default argument
-        should include the line number of the syntax error.  However these
-        exceptions do not include an offset.
-        """
-        source = """\
-def foo(bar=baz, bax):
-    pass
-"""
-        with self.makeTempFile(source) as sourcePath:
-            if ERROR_HAS_LAST_LINE:
-                if PYPY:
-                    column = 7
-                elif sys.version_info >= (3, 9):
-                    column = 21
-                elif sys.version_info >= (3, 8):
-                    column = 9
-                else:
-                    column = 8
-                last_line = ' ' * (column - 1) + '^\n'
-                columnstr = '%d:' % column
-            else:
-                last_line = columnstr = ''
-            self.assertHasErrors(
-                sourcePath,
-                ["""\
-%s:1:%s non-default argument follows default argument
-def foo(bar=baz, bax):
-%s""" % (sourcePath, columnstr, last_line)])
 
     def test_nonKeywordAfterKeywordSyntaxError(self):
         """

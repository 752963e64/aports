--- ./pytest.ini.orig
+++ ./pytest.ini
@@ -5,3 +5,10 @@
 testpaths = lib
 python_files = test_*.py
 junit_family = xunit2
+markers =
+	nonfunctional
+	x86
+	ppc64le
+	s390x
+	armhf
+	armv7
--- ./lib/matplotlib/tests/test_axes.py.orig
+++ ./lib/matplotlib/tests/test_axes.py
@@ -5057,6 +5059,9 @@
         plt.specgram(signal, origin='lower')
 
 
+@pytest.mark.x86
+@pytest.mark.armv7
+@pytest.mark.armhf
 @image_comparison(
     ["psd_freqs.png", "csd_freqs.png", "psd_noise.png", "csd_noise.png"],
     remove_text=True, tol=0.002)
--- ./lib/matplotlib/tests/test_colorbar.py.orig
+++ ./lib/matplotlib/tests/test_colorbar.py
@@ -231,6 +231,7 @@
     assert ax.get_anchor() == 'E'
 
 
+@pytest.mark.x86
 @image_comparison(['contour_colorbar.png'], remove_text=True)
 def test_contour_colorbar():
     fig, ax = plt.subplots(figsize=(4, 2))
--- ./lib/matplotlib/tests/test_image.py.orig
+++ ./lib/matplotlib/tests/test_image.py
@@ -878,6 +878,7 @@
     ax2.imshow(Z.astype('>f8'), **kwargs)
 
 
+@pytest.mark.x86
 @image_comparison(['imshow_masked_interpolation'],
                   tol=0 if platform.machine() == 'x86_64' else 0.01,
                   remove_text=True, style='mpl20')
--- ./lib/matplotlib/tests/test_figure.py.orig
+++ ./lib/matplotlib/tests/test_figure.py
@@ -1328,6 +1328,7 @@
     plt.close()
 
 
+@pytest.mark.x86
 def test_ginput(recwarn):  # recwarn undoes warn filters at exit.
     warnings.filterwarnings("ignore", "cannot show the figure")
     fig, ax = plt.subplots()
--- ./lib/matplotlib/tests/test_polar.py.orig
+++ ./lib/matplotlib/tests/test_polar.py
@@ -415,6 +415,7 @@
     assert ax.get_ylim() == (0, .2)
 
 
+@pytest.mark.x86
 def test_cursor_precision():
     ax = plt.subplot(projection="polar")
     # Higher radii correspond to higher theta-precisions.
--- ./lib/matplotlib/tests/test_widgets.py.orig
+++ ./lib/matplotlib/tests/test_widgets.py
@@ -1064,6 +1064,7 @@
     assert slider.val == 5.5
 
 
+@pytest.mark.x86
 def test_slider_horizontal_vertical():
     fig, ax = plt.subplots()
     slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=24,
@@ -1137,6 +1138,7 @@
     assert_allclose(handle_positions(slider), (0.1, 0.34))
 
 
+@pytest.mark.x86
 @pytest.mark.parametrize("orientation", ["horizontal", "vertical"])
 def test_range_slider_same_init_values(orientation):
     if orientation == "vertical":

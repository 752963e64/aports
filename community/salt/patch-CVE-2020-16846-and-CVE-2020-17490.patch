#Patches for CVE-2020-16846 and CVE-2020-17490
#https://www.saltstack.com/blog/on-november-3-2020-saltstack-publicly-disclosed-three-new-cves/
diff --git a/salt/client/ssh/shell.py b/salt/client/ssh/shell.py
index d62aa8f11a..a78c1426e3 100644
--- a/salt/client/ssh/shell.py
+++ b/salt/client/ssh/shell.py
@@ -10,6 +10,8 @@ import os
 # Import python libs
 import re
 import subprocess
+import os
+import shlex
 import sys
 import time
 
@@ -43,10 +45,10 @@ def gen_key(path):
     """
     Generate a key for use with salt-ssh
     """
-    cmd = 'ssh-keygen -P "" -f {0} -t rsa -q'.format(path)
+    cmd = ["ssh-keygen", "-P", '""', "-f", path, "-t", "rsa", "-q"]
     if not os.path.isdir(os.path.dirname(path)):
         os.makedirs(os.path.dirname(path))
-    subprocess.call(cmd, shell=True)
+    subprocess.call(cmd)
 
 
 def gen_shell(opts, **kwargs):
@@ -298,7 +300,7 @@ class Shell(object):
         """
         try:
             proc = salt.utils.nb_popen.NonBlockingPopen(
-                cmd, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE,
+                self._split_cmd(cmd), stderr=subprocess.PIPE, stdout=subprocess.PIPE,
             )
             while True:
                 time.sleep(0.1)
@@ -375,6 +377,21 @@ class Shell(object):
 
         return self._run_cmd(cmd)
 
+    def _split_cmd(self, cmd):
+        """
+        Split a command string so that it is suitable to pass to Popen without
+        shell=True. This prevents shell injection attacks in the options passed
+        to ssh or some other command.
+        """
+        try:
+            ssh_part, cmd_part = cmd.split("/bin/sh")
+        except ValueError:
+            cmd_lst = shlex.split(cmd)
+        else:
+            cmd_lst = shlex.split(ssh_part)
+            cmd_lst.append("/bin/sh {}".format(cmd_part))
+        return cmd_lst
+
     def _run_cmd(self, cmd, key_accept=False, passwd_retries=3):
         """
         Execute a shell command via VT. This is blocking and assumes that ssh
@@ -384,8 +401,7 @@ class Shell(object):
             return "", "No command or passphrase", 245
 
         term = salt.utils.vt.Terminal(
-            cmd,
-            shell=True,
+            self._split_cmd(cmd),
             log_stdout=True,
             log_stdout_level="trace",
             log_stderr=True,
diff --git a/salt/modules/tls.py b/salt/modules/tls.py
index e1fefe2fd1..08be6178c3 100644
--- a/salt/modules/tls.py
+++ b/salt/modules/tls.py
@@ -839,11 +839,12 @@ def create_ca(
                 write_key = False
             else:
                 log.info("Saving old CA ssl key in %s", bck)
-                with salt.utils.files.fopen(bck, "w") as bckf:
+                fp = os.open(bck, os.O_CREAT | os.O_RDWR, 0o600)
+                with os.fdopen(fp, "w") as bckf:
                     bckf.write(old_key)
-                    os.chmod(bck, 0o600)
     if write_key:
-        with salt.utils.files.fopen(ca_keyp, "wb") as ca_key:
+        fp = os.open(ca_keyp, os.O_CREAT | os.O_RDWR, 0o600)
+        with os.fdopen(fp, "wb") as ca_key:
             ca_key.write(salt.utils.stringutils.to_bytes(keycontent))
 
     with salt.utils.files.fopen(certp, "wb") as ca_crt:
@@ -1163,9 +1164,9 @@ def create_csr(
     req.sign(key, salt.utils.stringutils.to_str(digest))
 
     # Write private key and request
-    with salt.utils.files.fopen(
-        "{0}/{1}.key".format(csr_path, csr_filename), "wb+"
-    ) as priv_key:
+    priv_keyp = "{0}/{1}.key".format(csr_path, csr_filename)
+    fp = os.open(priv_keyp, os.O_CREAT | os.O_RDWR, 0o600)
+    with os.fdopen(fp, "wb+") as priv_key:
         priv_key.write(
             salt.utils.stringutils.to_bytes(
                 OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, key)
@@ -1305,7 +1306,8 @@ def create_self_signed_cert(
     priv_key_path = "{0}/{1}/certs/{2}.key".format(
         cert_base_path(), tls_dir, cert_filename
     )
-    with salt.utils.files.fopen(priv_key_path, "wb+") as priv_key:
+    fp = os.open(priv_key_path, os.O_CREAT | os.O_RDWR, 0o600)
+    with os.fdopen(fp, "wb+") as priv_key:
         priv_key.write(
             salt.utils.stringutils.to_bytes(
                 OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, key)

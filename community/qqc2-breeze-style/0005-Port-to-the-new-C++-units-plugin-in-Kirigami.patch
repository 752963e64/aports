From b6524b613d43e0ee42205d6ce82148dd1d341e41 Mon Sep 17 00:00:00 2001
From: Arjen Hiemstra <ahiemstra@heimr.nl>
Date: Wed, 11 Aug 2021 17:00:51 +0200
Subject: [PATCH] Port to the new C++ units plugin in Kirigami

This adds a C++ Kirigami Units instance. It also moves the Units.qml
file that from the Kirigami directory to the impl directory, adjusts it
to be based on Kirigami.Units and then adjusts all files to make use of
the Units in impl. This is done to avoid having to add all the custom
properties to the C++ plugin.
---
 .../CMakeLists.txt                            |   1 +
 .../kirigamiplasmafactory.cpp                 |   9 +-
 .../kirigamiplasmafactory.h                   |   3 +-
 kirigami-plasmadesktop-integration/units.cpp  |  58 ++++++++++
 kirigami-plasmadesktop-integration/units.h    |  30 +++++
 style/impl/BackgroundGradient.qml             |   6 +-
 style/impl/ButtonBackground.qml               |  12 +-
 style/impl/CMakeLists.txt                     |   4 +-
 style/impl/CheckIndicator.qml                 |  16 +--
 style/impl/ComboBoxBackground.qml             |  12 +-
 style/impl/CursorDelegate.qml                 |   6 +-
 style/impl/CursorHandle.qml                   |  10 +-
 style/impl/DelegateBackground.qml             |  12 +-
 style/impl/FocusRect.qml                      |   4 +-
 style/impl/IconLabelContent.qml               |  10 +-
 style/impl/IconLabelShortcutContent.qml       |   2 +
 style/impl/InlineIconLabelContent.qml         |   4 +-
 style/impl/LargeShadow.qml                    |   6 +-
 style/impl/ListViewHighlight.qml              |   8 +-
 style/impl/MediumShadow.qml                   |   6 +-
 style/impl/MenuItemBackground.qml             |  12 +-
 style/impl/OverlayDimBackground.qml           |   4 +-
 style/impl/OverlayModalBackground.qml         |   4 +-
 style/impl/RadioIndicator.qml                 |  12 +-
 style/impl/ScrollHandle.qml                   |  10 +-
 style/impl/SliderGroove.qml                   |  46 ++++----
 style/impl/SliderHandle.qml                   |  12 +-
 style/impl/SmallShadow.qml                    |   6 +-
 style/impl/SpinBoxIndicator.qml               |  22 ++--
 style/impl/SwitchIndicator.qml                |  14 ++-
 style/impl/TextEditBackground.qml             |  10 +-
 style/{kirigami => impl}/Units.qml            | 105 +++++++-----------
 style/impl/qmldir                             |   3 +-
 style/qtquickcontrols/BusyIndicator.qml       |  18 +--
 style/qtquickcontrols/Button.qml              |  21 ++--
 style/qtquickcontrols/CheckBox.qml            |  17 +--
 style/qtquickcontrols/CheckDelegate.qml       |  21 ++--
 style/qtquickcontrols/ComboBox.qml            |  27 ++---
 style/qtquickcontrols/DelayButton.qml         |  21 ++--
 style/qtquickcontrols/Dial.qml                |  20 ++--
 style/qtquickcontrols/Dialog.qml              |  20 ++--
 style/qtquickcontrols/DialogButtonBox.qml     |  10 +-
 style/qtquickcontrols/Drawer.qml              |  10 +-
 style/qtquickcontrols/Frame.qml               |   8 +-
 style/qtquickcontrols/GroupBox.qml            |   6 +-
 style/qtquickcontrols/ItemDelegate.qml        |  19 ++--
 style/qtquickcontrols/Menu.qml                |  21 ++--
 style/qtquickcontrols/MenuBarItem.qml         |  12 +-
 style/qtquickcontrols/MenuItem.qml            |  24 ++--
 .../MobileTextActionsToolBar.qml              |   4 +-
 style/qtquickcontrols/PageIndicator.qml       |  10 +-
 style/qtquickcontrols/Pane.qml                |   4 +-
 style/qtquickcontrols/Popup.qml               |  22 ++--
 style/qtquickcontrols/ProgressBar.qml         |  14 +--
 style/qtquickcontrols/RadioButton.qml         |  16 +--
 style/qtquickcontrols/RadioDelegate.qml       |  20 ++--
 style/qtquickcontrols/RangeSlider.qml         |  10 +-
 style/qtquickcontrols/RoundButton.qml         |  14 +--
 style/qtquickcontrols/ScrollBar.qml           |   7 +-
 style/qtquickcontrols/ScrollIndicator.qml     |   7 +-
 style/qtquickcontrols/Slider.qml              |   8 +-
 style/qtquickcontrols/SpinBox.qml             |  16 +--
 style/qtquickcontrols/SwipeDelegate.qml       |  19 ++--
 style/qtquickcontrols/Switch.qml              |  16 +--
 style/qtquickcontrols/SwitchDelegate.qml      |  20 ++--
 style/qtquickcontrols/TabBar.qml              |   4 +-
 style/qtquickcontrols/TabButton.qml           |  30 ++---
 style/qtquickcontrols/TextArea.qml            |  14 +--
 style/qtquickcontrols/TextField.qml           |  16 +--
 style/qtquickcontrols/ToolBar.qml             |   8 +-
 style/qtquickcontrols/ToolButton.qml          |  18 +--
 style/qtquickcontrols/ToolSeparator.qml       |   4 +-
 style/qtquickcontrols/ToolTip.qml             |  26 ++---
 style/qtquickcontrols/qmldir                  |   2 -
 74 files changed, 618 insertions(+), 465 deletions(-)
 create mode 100644 kirigami-plasmadesktop-integration/units.cpp
 create mode 100644 kirigami-plasmadesktop-integration/units.h
 rename style/{kirigami => impl}/Units.qml (71%)

diff --git a/kirigami-plasmadesktop-integration/CMakeLists.txt b/kirigami-plasmadesktop-integration/CMakeLists.txt
index 2201c98..8d53dd8 100644
--- a/kirigami-plasmadesktop-integration/CMakeLists.txt
+++ b/kirigami-plasmadesktop-integration/CMakeLists.txt
@@ -3,6 +3,7 @@
 set(org.kde.breeze_SRCS
     plasmadesktoptheme.cpp
     kirigamiplasmafactory.cpp
+    units.cpp
 )
 
 kcoreaddons_add_plugin(org.kde.breeze SOURCES ${org.kde.breeze_SRCS} INSTALL_NAMESPACE "kf5/kirigami" JSON kirigamiplasmaintegration.json)
diff --git a/kirigami-plasmadesktop-integration/kirigamiplasmafactory.cpp b/kirigami-plasmadesktop-integration/kirigamiplasmafactory.cpp
index abd3393..0353e82 100644
--- a/kirigami-plasmadesktop-integration/kirigamiplasmafactory.cpp
+++ b/kirigami-plasmadesktop-integration/kirigamiplasmafactory.cpp
@@ -6,9 +6,10 @@
 
 #include "kirigamiplasmafactory.h"
 #include "plasmadesktoptheme.h"
+#include "units.h"
 
 KirigamiPlasmaFactory::KirigamiPlasmaFactory(QObject *parent)
-    : Kirigami::KirigamiPluginFactory(parent)
+    : Kirigami::KirigamiPluginFactoryV2(parent)
 {
 }
 
@@ -20,4 +21,10 @@ Kirigami::PlatformTheme *KirigamiPlasmaFactory::createPlatformTheme(QObject *par
     return new PlasmaDesktopTheme(parent);
 }
 
+Kirigami::Units *KirigamiPlasmaFactory::createUnits(QObject *parent)
+{
+    Q_ASSERT(parent);
+    return new Units(parent);
+}
+
 #include "moc_kirigamiplasmafactory.cpp"
diff --git a/kirigami-plasmadesktop-integration/kirigamiplasmafactory.h b/kirigami-plasmadesktop-integration/kirigamiplasmafactory.h
index 9ed009a..31ca760 100644
--- a/kirigami-plasmadesktop-integration/kirigamiplasmafactory.h
+++ b/kirigami-plasmadesktop-integration/kirigamiplasmafactory.h
@@ -10,7 +10,7 @@
 #include <Kirigami2/KirigamiPluginFactory>
 #include <QObject>
 
-class KirigamiPlasmaFactory : public Kirigami::KirigamiPluginFactory
+class KirigamiPlasmaFactory : public Kirigami::KirigamiPluginFactoryV2
 {
     Q_OBJECT
 
@@ -23,6 +23,7 @@ public:
     ~KirigamiPlasmaFactory() override;
 
     Kirigami::PlatformTheme *createPlatformTheme(QObject *parent) override;
+    Kirigami::Units *createUnits(QObject *parent) override;
 };
 
 #endif // KIRIGAMIPLASMAFACTORY_H
diff --git a/kirigami-plasmadesktop-integration/units.cpp b/kirigami-plasmadesktop-integration/units.cpp
new file mode 100644
index 0000000..63a74fb
--- /dev/null
+++ b/kirigami-plasmadesktop-integration/units.cpp
@@ -0,0 +1,58 @@
+/*
+    SPDX-FileCopyrightText: 2013 Marco Martin <mart@kde.org>
+    SPDX-FileCopyrightText: 2014 Sebastian Kügler <sebas@kde.org>
+    SPDX-FileCopyrightText: 2014 David Edmundson <davidedmunsdon@kde.org>
+    SPDX-FileCopyrightText: 2021 Jonah Brüchert <jbb@kaidan.im>
+    SPDX-FileCopyrightText: 2021 Arjen Hiemstra <ahiemstra@heimr.nl>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+
+*/
+
+#include "units.h"
+
+#include <KConfigGroup>
+#include <KSharedConfig>
+
+#include <cmath>
+
+constexpr int defaultLongDuration = 200;
+
+Units::Units(QObject *parent)
+    : Kirigami::Units(parent)
+    , m_animationSpeedWatcher(KConfigWatcher::create(KSharedConfig::openConfig()))
+{
+    connect(m_animationSpeedWatcher.data(), &KConfigWatcher::configChanged, this, [this](const KConfigGroup &group, const QByteArrayList &names) {
+        if (group.name() == QLatin1String("KDE") && names.contains(QByteArrayLiteral("AnimationDurationFactor"))) {
+            updateAnimationSpeed();
+        }
+    });
+
+    updateAnimationSpeed();
+
+    setGridUnit(gridUnit() + std::fmod(gridUnit(), 2));
+    setSmallSpacing(4);
+    setLargeSpacing(8);
+}
+
+// Copy from plasma-framework/src/declarativeimports/core/units.cpp, since we don't want to depend on plasma-framework here
+void Units::updateAnimationSpeed()
+{
+    KConfigGroup generalCfg = KConfigGroup(KSharedConfig::openConfig(), QStringLiteral("KDE"));
+    const qreal animationSpeedModifier = qMax(0.0, generalCfg.readEntry("AnimationDurationFactor", 1.0));
+
+    // Read the old longDuration value for compatibility
+    KConfigGroup cfg = KConfigGroup(KSharedConfig::openConfig(QStringLiteral("plasmarc")), QStringLiteral("Units"));
+    int longDuration = cfg.readEntry("longDuration", defaultLongDuration);
+
+    longDuration = qRound(longDuration * animationSpeedModifier);
+
+    // Animators with a duration of 0 do not fire reliably
+    // see Bug 357532 and QTBUG-39766
+    longDuration = qMax(1, longDuration);
+
+    setVeryShortDuration(longDuration / 4);
+    setShortDuration(longDuration / 2);
+    setLongDuration(longDuration);
+    setVeryLongDuration(longDuration * 2);
+}
diff --git a/kirigami-plasmadesktop-integration/units.h b/kirigami-plasmadesktop-integration/units.h
new file mode 100644
index 0000000..c22def0
--- /dev/null
+++ b/kirigami-plasmadesktop-integration/units.h
@@ -0,0 +1,30 @@
+/*
+    SPDX-FileCopyrightText: 2021 Jonah Brüchert <jbb@kaidan.im>
+    SPDX-FileCopyrightText: 2021 Arjen Hiemstra <ahiemstra@heimr.nl>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#ifndef UNITS_H
+#define UNITS_H
+
+#include <QObject>
+
+#include <Kirigami2/Units>
+
+#include <KConfigWatcher>
+
+class Units : public Kirigami::Units
+{
+    Q_OBJECT
+
+public:
+    explicit Units(QObject *parent = nullptr);
+
+    void updateAnimationSpeed();
+
+private:
+    KConfigWatcher::Ptr m_animationSpeedWatcher;
+};
+
+#endif
diff --git a/style/impl/BackgroundGradient.qml b/style/impl/BackgroundGradient.qml
index 035b997..69d2a29 100644
--- a/style/impl/BackgroundGradient.qml
+++ b/style/impl/BackgroundGradient.qml
@@ -5,9 +5,11 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
-    property real radius: Kirigami.Units.smallRadius
+    property real radius: Impl.Units.smallRadius
     active: visible
     anchors.fill: parent
     sourceComponent: Component {
@@ -28,7 +30,7 @@ Loader {
             opacity: parent.opacity
             Behavior on opacity {
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
             }
diff --git a/style/impl/ButtonBackground.qml b/style/impl/ButtonBackground.qml
index c3ac481..4629201 100644
--- a/style/impl/ButtonBackground.qml
+++ b/style/impl/ButtonBackground.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 // TODO: Maybe use a loader here one day. Make sure nothing breaks.
 // Kirigami ShadowedRectangle doesn't have a gradient property, which could be an issue in some cases
 Kirigami.ShadowedRectangle {
@@ -31,7 +33,7 @@ Kirigami.ShadowedRectangle {
     property bool highlightBackground: control.down || control.checked
     property bool highlightBorder: control.enabled && control.down || control.checked || control.highlighted || control.visualFocus || control.hovered
 
-    radius: Kirigami.Units.smallRadius
+    radius: Impl.Units.smallRadius
     corners {
         topLeftRadius: leftRadius
         topRightRadius: rightRadius
@@ -40,7 +42,7 @@ Kirigami.ShadowedRectangle {
     }
 
     implicitWidth: implicitHeight
-    implicitHeight: Kirigami.Units.mediumControlHeight
+    implicitHeight: Impl.Units.mediumControlHeight
 
     visible: !control.flat || control.editable || control.down || control.checked || control.highlighted || control.visualFocus || control.hovered
 
@@ -62,20 +64,20 @@ Kirigami.ShadowedRectangle {
                 return Kirigami.Theme.separatorColor
             }
         }
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
     }
 
     Behavior on color {
         enabled: highlightBackground
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
     Behavior on border.color {
         enabled: highlightBorder
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
diff --git a/style/impl/CMakeLists.txt b/style/impl/CMakeLists.txt
index 0ff78ca..a1f2a03 100644
--- a/style/impl/CMakeLists.txt
+++ b/style/impl/CMakeLists.txt
@@ -5,7 +5,9 @@ file(GLOB qmlfiles
     CONFIGURE_DEPENDS
     "*.qml"
 )
-install(FILES qmldir DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/breeze/impl)
+install(FILES qmldir DESTINATION ${KDE_INSTALL_QMLDIR}/QtQuick/Controls.2/org.kde.breeze/impl)
 install(FILES ${qmlfiles} DESTINATION ${KDE_INSTALL_QMLDIR}/QtQuick/Controls.2/org.kde.breeze/impl)
+install(FILES qmldir DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/kirigami.2/styles/org.kde.breeze/impl)
 install(FILES ${qmlfiles} DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/kirigami.2/styles/org.kde.breeze/impl)
+install(FILES qmldir DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/breeze/impl)
 install(FILES ${qmlfiles} DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/breeze/impl)
diff --git a/style/impl/CheckIndicator.qml b/style/impl/CheckIndicator.qml
index 4252d51..e91d801 100644
--- a/style/impl/CheckIndicator.qml
+++ b/style/impl/CheckIndicator.qml
@@ -7,12 +7,14 @@ import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 import org.kde.breeze 1.0
 
+import "." as Impl
+
 Rectangle {
     id: root
 
     property T.AbstractButton control: root.parent
     property int checkState: control.checkState
-    property int symbolSize: Kirigami.Units.symbolSize(Math.min(width, height))
+    property int symbolSize: Impl.Units.symbolSize(Math.min(width, height))
     property bool mirrored: control.mirrored
     readonly property bool controlHasContent: control.contentItem && control.contentItem.width > 0
 
@@ -25,16 +27,16 @@ Rectangle {
     y: control.topPadding + (control.availableHeight - height) / 2
 
     implicitWidth: implicitHeight
-    implicitHeight: Kirigami.Units.inlineControlHeight
+    implicitHeight: Impl.Units.inlineControlHeight
 
     Kirigami.Theme.colorSet: Kirigami.Theme.Button
     Kirigami.Theme.inherit: false
     color: highlightBackground ? Kirigami.Theme.alternateBackgroundColor : Kirigami.Theme.backgroundColor
 
-    radius: Kirigami.Units.smallRadius
+    radius: Impl.Units.smallRadius
 
     border {
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
         color: highlightBorder ?
             Kirigami.Theme.focusColor : Kirigami.Theme.separatorColor
             //Kirigami.ColorUtils.tintWithAlpha(root.color, Kirigami.Theme.textColor, 0.3)
@@ -43,14 +45,14 @@ Rectangle {
     Behavior on color {
         enabled: highlightBackground
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
     Behavior on border.color {
         enabled: highlightBorder
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
@@ -147,7 +149,7 @@ Rectangle {
         property: "width"
         from: checkmark.width
         to: 0
-        duration: Kirigami.Units.shortDuration
+        duration: Impl.Units.shortDuration
         //Intentionally not using an easing curve
     }
 
diff --git a/style/impl/ComboBoxBackground.qml b/style/impl/ComboBoxBackground.qml
index 339dd25..1a02d96 100644
--- a/style/impl/ComboBoxBackground.qml
+++ b/style/impl/ComboBoxBackground.qml
@@ -14,6 +14,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     id: mainBackground
 
@@ -29,7 +31,7 @@ Rectangle {
     property bool highlightBorder: control.down || control.visualFocus || control.hovered
 
     implicitWidth: 200
-    implicitHeight: Kirigami.Units.mediumControlHeight
+    implicitHeight: Impl.Units.mediumControlHeight
 
     visible: !control.flat || control.editable || control.down || control.visualFocus || control.hovered
 
@@ -46,25 +48,25 @@ Rectangle {
     border {
         color: highlightBorder ?
             Kirigami.Theme.focusColor : Kirigami.Theme.buttonSeparatorColor
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
     }
 
     Behavior on color {
         enabled: highlightBackground
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
     Behavior on border.color {
         enabled: highlightBorder
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
 
-    radius: Kirigami.Units.smallRadius
+    radius: Impl.Units.smallRadius
 
     SmallShadow {
         id: shadow
diff --git a/style/impl/CursorDelegate.qml b/style/impl/CursorDelegate.qml
index da94ed1..eb480fb 100644
--- a/style/impl/CursorDelegate.qml
+++ b/style/impl/CursorDelegate.qml
@@ -8,6 +8,8 @@ import QtQuick.Window 2.15
 import QtQuick.Templates 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Item {
     id: root
     property alias target: root.parent
@@ -57,14 +59,14 @@ Item {
             SmoothedAnimation {
                 velocity: 200
                 reversingMode: SmoothedAnimation.Immediate
-                duration: Kirigami.Settings.tabletMode ? Kirigami.Units.shortDuration : 0//Kirigami.Units.veryShortDuration
+                duration: Kirigami.Settings.tabletMode ? Impl.Units.shortDuration : 0//Impl.Units.veryShortDuration
             }
         }
         Behavior on y {
             SmoothedAnimation {
                 velocity: 200
                 reversingMode: SmoothedAnimation.Immediate
-                duration: Kirigami.Settings.tabletMode ? Kirigami.Units.shortDuration : 0//Kirigami.Units.veryShortDuration
+                duration: Kirigami.Settings.tabletMode ? Impl.Units.shortDuration : 0//Impl.Units.veryShortDuration
             }
         }
         */
diff --git a/style/impl/CursorHandle.qml b/style/impl/CursorHandle.qml
index 864184f..fa0751d 100644
--- a/style/impl/CursorHandle.qml
+++ b/style/impl/CursorHandle.qml
@@ -8,6 +8,8 @@ import QtQuick.Window 2.15
 import QtQuick.Templates 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
     property Item target
@@ -31,7 +33,7 @@ Loader {
 
         //opacity: target.activeFocus ? 1 : 0
         implicitHeight: {
-            let h = Kirigami.Units.gridUnit
+            let h = Impl.Units.gridUnit
             return h - (h % 2 == 0 ? 1 : 0)
         }
         implicitWidth: implicitHeight
@@ -60,7 +62,7 @@ Loader {
             id: inner
             visible: target.selectionStart !== target.selectionEnd && (handle.y < selectionStartY || handle.y < selectionEndY)
             anchors.fill: parent
-            anchors.margins: Kirigami.Units.smallBorder
+            anchors.margins: Impl.Units.smallBorder
             color: target.selectedTextColor
             radius: height/2
             Rectangle {
@@ -102,7 +104,7 @@ Loader {
             SmoothedAnimation {
                 velocity: 200
                 reversingMode: SmoothedAnimation.Immediate
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
             }
         }
         Behavior on y {
@@ -110,7 +112,7 @@ Loader {
             SmoothedAnimation {
                 velocity: 200
                 reversingMode: SmoothedAnimation.Immediate
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
             }
         }
 
diff --git a/style/impl/DelegateBackground.qml b/style/impl/DelegateBackground.qml
index d13e892..6d579fc 100644
--- a/style/impl/DelegateBackground.qml
+++ b/style/impl/DelegateBackground.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 // TODO: I'm currently unsatisfied with the appearance of this
 Loader {
     id: root
@@ -28,9 +30,9 @@ Loader {
             return normalColor
         }
     }
-    property real radius: Kirigami.Units.smallRadius
+    property real radius: Impl.Units.smallRadius
     property QtObject border: QtObject {
-        property real width: highlightBorder ? Kirigami.Units.smallBorder : 0
+        property real width: highlightBorder ? Impl.Units.smallBorder : 0
         property color color: Kirigami.Theme.focusColor
     }
 
@@ -43,7 +45,7 @@ Loader {
         Kirigami.ShadowedRectangle {
             id: mainBackground
 
-            implicitHeight: Kirigami.Units.mediumControlHeight
+            implicitHeight: Impl.Units.mediumControlHeight
 
             radius: root.radius
 
@@ -57,7 +59,7 @@ Loader {
             Behavior on color {
                 enabled: control.down
                 ColorAnimation {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                     onRunningChanged: root.backgroundAnimationRunning = running
                 }
@@ -65,7 +67,7 @@ Loader {
             Behavior on border.color {
                 enabled: highlightBorder
                 ColorAnimation {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                     onRunningChanged: root.borderAnimationRunning = running
                 }
diff --git a/style/impl/FocusRect.qml b/style/impl/FocusRect.qml
index 070a3d6..8160232 100644
--- a/style/impl/FocusRect.qml
+++ b/style/impl/FocusRect.qml
@@ -5,6 +5,8 @@
 import QtQuick 2.6
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
     property real baseRadius: 0
@@ -25,7 +27,7 @@ Loader {
                 Kirigami.Theme.focusColor.b,
                 0.42
             )
-            border.width: Kirigami.Units.mediumBorder/2
+            border.width: Impl.Units.mediumBorder/2
 
             Rectangle {
                 id: outerRing
diff --git a/style/impl/IconLabelContent.qml b/style/impl/IconLabelContent.qml
index 1f64320..e7b3ec3 100644
--- a/style/impl/IconLabelContent.qml
+++ b/style/impl/IconLabelContent.qml
@@ -7,6 +7,8 @@ import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 import org.kde.breeze 1.0
 
+import "." as Impl
+
 IconLabelLayout {
     id: root
     // NOTE: Remember to use root.mirrored, not control.mirrored in this file
@@ -73,7 +75,7 @@ IconLabelLayout {
             Behavior on opacity {
                 enabled: firstLayoutCompleted
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                 }
             }
         }
@@ -91,19 +93,19 @@ IconLabelLayout {
             Behavior on x {
                 enabled: firstLayoutCompleted
                 XAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                 }
             }
             Behavior on y {
                 enabled: firstLayoutCompleted
                 YAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                 }
             }
             Behavior on opacity {
                 enabled: firstLayoutCompleted
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                 }
             }
         }
diff --git a/style/impl/IconLabelShortcutContent.qml b/style/impl/IconLabelShortcutContent.qml
index 7346ddc..80690ce 100644
--- a/style/impl/IconLabelShortcutContent.qml
+++ b/style/impl/IconLabelShortcutContent.qml
@@ -7,6 +7,8 @@ import QtQuick.Layouts 1.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 IconLabelContent {
     id: root
 
diff --git a/style/impl/InlineIconLabelContent.qml b/style/impl/InlineIconLabelContent.qml
index 4c2c849..ebc4c17 100644
--- a/style/impl/InlineIconLabelContent.qml
+++ b/style/impl/InlineIconLabelContent.qml
@@ -5,6 +5,8 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 IconLabelContent {
     id: root
     Rectangle {
@@ -12,7 +14,7 @@ IconLabelContent {
         x: root.labelRect.x
         y: root.labelRect.y + root.labelRect.height - height
         width: root.labelRect.width//root.hasIcon && root.hasLabel ? root.availableWidth - root.icon.width - root.spacing : root.availableWidth
-        height: Kirigami.Units.focusUnderlineThickness
+        height: Impl.Units.focusUnderlineThickness
         visible: control.visualFocus
         color: Kirigami.Theme.focusColor
     }
diff --git a/style/impl/LargeShadow.qml b/style/impl/LargeShadow.qml
index 45f5eaf..0a46255 100644
--- a/style/impl/LargeShadow.qml
+++ b/style/impl/LargeShadow.qml
@@ -5,9 +5,11 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
-    property real radius: Kirigami.Units.smallRadius
+    property real radius: Impl.Units.smallRadius
     anchors.fill: parent
     z: -1
     active: visible && !Kirigami.Theme.lowPowerHardware
@@ -24,7 +26,7 @@ Loader {
             opacity: parent.opacity
             Behavior on opacity {
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
             }
diff --git a/style/impl/ListViewHighlight.qml b/style/impl/ListViewHighlight.qml
index f7971c6..a359f83 100644
--- a/style/impl/ListViewHighlight.qml
+++ b/style/impl/ListViewHighlight.qml
@@ -5,12 +5,14 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Kirigami.ShadowedRectangle {
     id: root
     property int currentIndex: -1
     property int count: 0
-    readonly property real topRadius: root.currentIndex == 0 ? Kirigami.Units.smallRadius : 0
-    readonly property real bottomRadius: root.currentIndex == Math.max(root.count-1, 0) ? Kirigami.Units.smallRadius : 0
+    readonly property real topRadius: root.currentIndex == 0 ? Impl.Units.smallRadius : 0
+    readonly property real bottomRadius: root.currentIndex == Math.max(root.count-1, 0) ? Impl.Units.smallRadius : 0
 
     Kirigami.Theme.colorSet: Kirigami.Theme.Selection
     Kirigami.Theme.inherit: false
@@ -24,7 +26,7 @@ Kirigami.ShadowedRectangle {
 
     color: Kirigami.Theme.alternateBackgroundColor
     border {
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
         color: Kirigami.Theme.focusColor
     }
 }
diff --git a/style/impl/MediumShadow.qml b/style/impl/MediumShadow.qml
index 1acd771..42342b7 100644
--- a/style/impl/MediumShadow.qml
+++ b/style/impl/MediumShadow.qml
@@ -5,9 +5,11 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
-    property real radius: Kirigami.Units.smallRadius
+    property real radius: Impl.Units.smallRadius
     anchors.fill: parent
     z: -1
     active: visible && !Kirigami.Theme.lowPowerHardware
@@ -24,7 +26,7 @@ Loader {
             opacity: parent.opacity
             Behavior on opacity {
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
             }
diff --git a/style/impl/MenuItemBackground.qml b/style/impl/MenuItemBackground.qml
index 27b8ed6..8664df1 100644
--- a/style/impl/MenuItemBackground.qml
+++ b/style/impl/MenuItemBackground.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
     property T.MenuItem control: root.parent
@@ -30,9 +32,9 @@ Loader {
             return normalColor
         }
     }
-    property real radius: Kirigami.Units.smallRadius
+    property real radius: Impl.Units.smallRadius
     property QtObject border: QtObject {
-        property real width: highlightBackground ? Kirigami.Units.smallBorder : 0
+        property real width: highlightBackground ? Impl.Units.smallBorder : 0
         property color color: Kirigami.Theme.focusColor
     }
 
@@ -49,7 +51,7 @@ Loader {
 //             readonly property int count: root.isInListView ? control.ListView.view.count : 0
             readonly property bool horizontalListView: root.isInListView && control.ListView.view.orientation === ListView.Horizontal
 
-            implicitHeight: Kirigami.Units.mediumControlHeight
+            implicitHeight: Impl.Units.mediumControlHeight
 
             radius: root.radius
             readonly property real topRadius: !root.isInListView || (isCurrentItem && currentIndex == 0) ? radius : 0
@@ -72,7 +74,7 @@ Loader {
             Behavior on color {
                 enabled: highlightBackground
                 ColorAnimation {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                     onRunningChanged: root.backgroundAnimationRunning = running
                 }
@@ -80,7 +82,7 @@ Loader {
             Behavior on border.color {
                 enabled: highlightBackground
                 ColorAnimation {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                     onRunningChanged: root.borderAnimationRunning = running
                 }
diff --git a/style/impl/OverlayDimBackground.qml b/style/impl/OverlayDimBackground.qml
index c24a0ca..50c2c0d 100644
--- a/style/impl/OverlayDimBackground.qml
+++ b/style/impl/OverlayDimBackground.qml
@@ -5,11 +5,13 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     color: Qt.rgba(0,0,0,0.2)
     Behavior on opacity {
         OpacityAnimator {
-            duration: Kirigami.Units.longDuration
+            duration: Impl.Units.longDuration
         }
     }
 }
diff --git a/style/impl/OverlayModalBackground.qml b/style/impl/OverlayModalBackground.qml
index d87d10c..19e2591 100644
--- a/style/impl/OverlayModalBackground.qml
+++ b/style/impl/OverlayModalBackground.qml
@@ -5,11 +5,13 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     color: Qt.rgba(0,0,0,0.4)
     Behavior on opacity {
         OpacityAnimator {
-            duration: Kirigami.Units.longDuration
+            duration: Impl.Units.longDuration
         }
     }
 }
diff --git a/style/impl/RadioIndicator.qml b/style/impl/RadioIndicator.qml
index e00a277..c9e8956 100644
--- a/style/impl/RadioIndicator.qml
+++ b/style/impl/RadioIndicator.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 // TODO: replace with ShadowedRectangle because it produces smoother circles.
 // Unfortunately I can't do it now because batching issues can cause all radio
 // buttons to show hover effects when only one is hovered
@@ -17,7 +19,7 @@ Rectangle {
     readonly property bool controlHasContent: control.contentItem && control.contentItem.width > 0
 
     implicitWidth: implicitHeight
-    implicitHeight: Kirigami.Units.inlineControlHeight
+    implicitHeight: Impl.Units.inlineControlHeight
 
     x: controlHasContent ? (root.mirrored ? control.width - width - control.rightPadding : control.leftPadding) : control.leftPadding + (control.availableWidth - width) / 2
     y: control.topPadding + (control.availableHeight - height) / 2
@@ -29,14 +31,14 @@ Rectangle {
     color: control.down || control.checked ? Kirigami.Theme.alternateBackgroundColor : Kirigami.Theme.backgroundColor
 
     border {
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
         color: control.down || control.checked || control.visualFocus || control.hovered ? Kirigami.Theme.focusColor : Kirigami.Theme.separatorColor
     }
 
     Behavior on color {
         enabled: control.down || control.checked
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
@@ -44,7 +46,7 @@ Rectangle {
     Behavior on border.color {
         enabled: control.down || control.checked || control.visualFocus || control.hovered
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
@@ -112,7 +114,7 @@ Rectangle {
             from: "unchecked"
             to: "checked"
             ScaleAnimator {
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
                 easing.type: Easing.OutQuad
             }
         }
diff --git a/style/impl/ScrollHandle.qml b/style/impl/ScrollHandle.qml
index da87f56..06fde58 100644
--- a/style/impl/ScrollHandle.qml
+++ b/style/impl/ScrollHandle.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     id: root
     property T.Control control: root.parent
@@ -16,7 +18,7 @@ Rectangle {
 
     visible: control.size < 1 && root.policy !== T.ScrollBar.AlwaysOff
 
-    implicitWidth: Kirigami.Units.grooveHeight
+    implicitWidth: Impl.Units.grooveHeight
     implicitHeight: implicitWidth
 
     radius: width / 2
@@ -30,7 +32,7 @@ Rectangle {
     Behavior on color {
         enabled: root.pressed
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
@@ -47,9 +49,9 @@ Rectangle {
     transitions: Transition {
         from: "active"
         SequentialAnimation {
-            PauseAnimation { duration: Kirigami.Units.veryLongDuration }
+            PauseAnimation { duration: Impl.Units.veryLongDuration }
             OpacityAnimator {
-                duration: Kirigami.Units.longDuration
+                duration: Impl.Units.longDuration
                 to: 0.0
             }
         }
diff --git a/style/impl/SliderGroove.qml b/style/impl/SliderGroove.qml
index 1d53b20..602ca52 100644
--- a/style/impl/SliderGroove.qml
+++ b/style/impl/SliderGroove.qml
@@ -7,6 +7,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as Templates
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     id: root
 
@@ -25,25 +27,25 @@ Rectangle {
     readonly property bool vertical: root.control.vertical
 
 
-    implicitWidth: root.horizontal ? 200 : Kirigami.Units.grooveHeight
-    implicitHeight: root.vertical ? 200 : Kirigami.Units.grooveHeight
+    implicitWidth: root.horizontal ? 200 : Impl.Units.grooveHeight
+    implicitHeight: root.vertical ? 200 : Impl.Units.grooveHeight
 
 
     //NOTE: Manually setting x,y,width,height because that's what the Basic, Fusion and Material QQC2 styles do.
     // Inset would be more idiomatic for QQC2, but this is easier to deal with for now since the behavior is expected by app devs.
 
-    width: root.horizontal ? control.availableWidth - root.handleWidth/2 - secondHandleWidth/2 + Kirigami.Units.grooveHeight : implicitWidth
-    height: root.vertical ? control.availableHeight - root.handleHeight/2 - secondHandleHeight/2 + Kirigami.Units.grooveHeight : implicitHeight
+    width: root.horizontal ? control.availableWidth - root.handleWidth/2 - secondHandleWidth/2 + Impl.Units.grooveHeight : implicitWidth
+    height: root.vertical ? control.availableHeight - root.handleHeight/2 - secondHandleHeight/2 + Impl.Units.grooveHeight : implicitHeight
 
     x: control.leftPadding + (root.horizontal ?
         (control.mirrored ? root.secondHandleWidth/2 : root.handleWidth/2) - radius
         : (control.availableWidth - width) / 2)
     y: control.topPadding + (root.vertical ? root.secondHandleHeight/2 - radius : (control.availableHeight - height) / 2)
 
-    radius: Kirigami.Units.grooveHeight/2
+    radius: Impl.Units.grooveHeight/2
     color: Kirigami.Theme.backgroundColor
     border {
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
         color: Kirigami.Theme.separatorColor
     }
 
@@ -51,23 +53,23 @@ Rectangle {
         id: fill
         anchors {
             fill: parent
-            leftMargin: root.horizontal ? root.startPosition * parent.width - (root.startPosition * Kirigami.Units.grooveHeight) : 0
-            rightMargin: root.horizontal ? (1-root.endPosition) * parent.width - ((1-root.endPosition) * Kirigami.Units.grooveHeight) : 0
-            topMargin: root.vertical ? (1-root.endPosition) * parent.height - ((1-root.endPosition) * Kirigami.Units.grooveHeight) : 0
-            bottomMargin: root.vertical ? root.startPosition * parent.height - (root.startPosition * Kirigami.Units.grooveHeight) : 0
+            leftMargin: root.horizontal ? root.startPosition * parent.width - (root.startPosition * Impl.Units.grooveHeight) : 0
+            rightMargin: root.horizontal ? (1-root.endPosition) * parent.width - ((1-root.endPosition) * Impl.Units.grooveHeight) : 0
+            topMargin: root.vertical ? (1-root.endPosition) * parent.height - ((1-root.endPosition) * Impl.Units.grooveHeight) : 0
+            bottomMargin: root.vertical ? root.startPosition * parent.height - (root.startPosition * Impl.Units.grooveHeight) : 0
         }
 
         radius: parent.radius
         color: Kirigami.Theme.alternateBackgroundColor
         border {
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             color: Kirigami.Theme.focusColor
         }
 
         Behavior on anchors.leftMargin {
             enabled: fill.loaded && !Kirigami.Settings.hasTransientTouchInput
             SmoothedAnimation {
-                duration: Kirigami.Units.longDuration
+                duration: Impl.Units.longDuration
                 velocity: 800
                 //SmoothedAnimations have a hardcoded InOutQuad easing
             }
@@ -75,21 +77,21 @@ Rectangle {
         Behavior on anchors.rightMargin {
             enabled: fill.loaded && !Kirigami.Settings.hasTransientTouchInput
             SmoothedAnimation {
-                duration: Kirigami.Units.longDuration
+                duration: Impl.Units.longDuration
                 velocity: 800
             }
         }
         Behavior on anchors.topMargin {
             enabled: fill.loaded && !Kirigami.Settings.hasTransientTouchInput
             SmoothedAnimation {
-                duration: Kirigami.Units.longDuration
+                duration: Impl.Units.longDuration
                 velocity: 800
             }
         }
         Behavior on anchors.bottomMargin {
             enabled: fill.loaded && !Kirigami.Settings.hasTransientTouchInput
             SmoothedAnimation {
-                duration: Kirigami.Units.longDuration
+                duration: Impl.Units.longDuration
                 velocity: 800
             }
         }
@@ -117,8 +119,8 @@ Rectangle {
         anchors {
             left: root.horizontal ? parent.left : parent.right
             top: root.vertical ? parent.top : parent.bottom
-            leftMargin: root.horizontal ? parent.radius : Kirigami.Units.smallBorder
-            topMargin: root.vertical ? parent.radius : Kirigami.Units.smallBorder
+            leftMargin: root.horizontal ? parent.radius : Impl.Units.smallBorder
+            topMargin: root.vertical ? parent.radius : Impl.Units.smallBorder
         }
         width: root.vertical ? implicitWidth : root.width - parent.radius
         height: root.horizontal ? implicitHeight : root.height - parent.radius
@@ -132,8 +134,8 @@ Rectangle {
         anchors {
             left: parent.left
             top: parent.top
-            leftMargin: root.horizontal ? parent.radius : -width - Kirigami.Units.smallBorder
-            topMargin: root.vertical ? parent.radius : -height - Kirigami.Units.smallBorder
+            leftMargin: root.horizontal ? parent.radius : -width - Impl.Units.smallBorder
+            topMargin: root.vertical ? parent.radius : -height - Impl.Units.smallBorder
         }
         width: tickmarkLoader.width
         height: tickmarkLoader.height
@@ -146,13 +148,13 @@ Rectangle {
             id: markGrid
             rows: root.vertical ? markRepeater.model : 1
             columns: root.horizontal ? markRepeater.model : 1
-            spacing: (root.vertical ? height/(markRepeater.model-1) : width/(markRepeater.model-1)) - Kirigami.Units.smallBorder*2
+            spacing: (root.vertical ? height/(markRepeater.model-1) : width/(markRepeater.model-1)) - Impl.Units.smallBorder*2
             Repeater {
                 id: markRepeater
                 model: (root.control.to - root.control.from)/root.control.stepSize + 1
                 delegate: Rectangle {
-                    implicitWidth: root.vertical ? root.x - Kirigami.Units.smallBorder : Kirigami.Units.smallBorder
-                    implicitHeight: root.horizontal ? root.y - Kirigami.Units.smallBorder : Kirigami.Units.smallBorder
+                    implicitWidth: root.vertical ? root.x - Impl.Units.smallBorder : Impl.Units.smallBorder
+                    implicitHeight: root.horizontal ? root.y - Impl.Units.smallBorder : Impl.Units.smallBorder
                     color: (root.horizontal && x >= fill.x && x <= fill.x + fill.width)
                         || (root.vertical && y >= fill.y && y <= fill.y + fill.height)
                         ? Kirigami.Theme.focusColor
diff --git a/style/impl/SliderHandle.qml b/style/impl/SliderHandle.qml
index 5cba7f8..174c214 100644
--- a/style/impl/SliderHandle.qml
+++ b/style/impl/SliderHandle.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     id: root
 
@@ -19,7 +21,7 @@ Rectangle {
     property bool usePreciseHandle: false
 
     implicitWidth: implicitHeight
-    implicitHeight: Kirigami.Units.inlineControlHeight
+    implicitHeight: Impl.Units.inlineControlHeight
 
     // It's not necessary here. Not sure if it would swap leftPadding with
     // rightPadding in the x position calculation, but there's no risk to
@@ -51,14 +53,14 @@ Rectangle {
     radius: height / 2
     color: Kirigami.Theme.backgroundColor
     border {
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
         color: root.pressed || root.visualFocus || root.hovered ? Kirigami.Theme.focusColor : Kirigami.Theme.separatorColor
     }
 
     Behavior on border.color {
         enabled: root.pressed || root.visualFocus || root.hovered
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
@@ -66,7 +68,7 @@ Rectangle {
     Behavior on x {
         enabled: root.loaded && !Kirigami.Settings.hasTransientTouchInput
         SmoothedAnimation {
-            duration: Kirigami.Units.longDuration
+            duration: Impl.Units.longDuration
             velocity: 800
             //SmoothedAnimations have a hardcoded InOutQuad easing
         }
@@ -74,7 +76,7 @@ Rectangle {
     Behavior on y {
         enabled: root.loaded && !Kirigami.Settings.hasTransientTouchInput
         SmoothedAnimation {
-            duration: Kirigami.Units.longDuration
+            duration: Impl.Units.longDuration
             velocity: 800
         }
     }
diff --git a/style/impl/SmallShadow.qml b/style/impl/SmallShadow.qml
index 8bbce74..c443a09 100644
--- a/style/impl/SmallShadow.qml
+++ b/style/impl/SmallShadow.qml
@@ -5,9 +5,11 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Loader {
     id: root
-    property real radius: Kirigami.Units.smallRadius
+    property real radius: Impl.Units.smallRadius
     anchors.fill: parent
     z: -1
     active: visible && !Kirigami.Theme.lowPowerHardware
@@ -24,7 +26,7 @@ Loader {
             opacity: parent.opacity
             Behavior on opacity {
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
             }
diff --git a/style/impl/SpinBoxIndicator.qml b/style/impl/SpinBoxIndicator.qml
index 47b2c57..410bb68 100644
--- a/style/impl/SpinBoxIndicator.qml
+++ b/style/impl/SpinBoxIndicator.qml
@@ -5,6 +5,8 @@
 import QtQuick 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Item {
     id: root
 
@@ -16,7 +18,7 @@ Item {
     property real leftRadius: {
         if ((leftAligned && !mirrored)
             || (rightAligned && mirrored)) {
-            return Kirigami.Units.smallRadius
+            return Impl.Units.smallRadius
         } else {
             return 0
         }
@@ -24,7 +26,7 @@ Item {
     property real rightRadius: {
         if ((rightAligned && !mirrored)
             || (leftAligned && mirrored)) {
-            return Kirigami.Units.smallRadius
+            return Impl.Units.smallRadius
         } else {
             return 0
         }
@@ -41,11 +43,11 @@ Item {
     height: parent.height
 
     implicitWidth: implicitHeight
-    implicitHeight: Kirigami.Units.mediumControlHeight
+    implicitHeight: Impl.Units.mediumControlHeight
 
     Rectangle {
         id: separator
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
         x: {
             if ((leftAligned && !mirrored)
                 || (rightAligned && mirrored)) {
@@ -57,8 +59,8 @@ Item {
         anchors {
             top: parent.top
             bottom: parent.bottom
-            topMargin: Kirigami.Units.smallSpacing
-            bottomMargin: Kirigami.Units.smallSpacing
+            topMargin: Impl.Units.smallSpacing
+            bottomMargin: Impl.Units.smallSpacing
         }
 
         color: button.pressed || button.hovered ? Kirigami.Theme.focusColor : Kirigami.Theme.separatorColor
@@ -66,7 +68,7 @@ Item {
         Behavior on color {
             enabled: button.pressed || button.hovered
             ColorAnimation {
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
                 easing.type: Easing.OutCubic
             }
         }
@@ -86,7 +88,7 @@ Item {
             bottomRightRadius: root.rightRadius
         }
         border.color: Kirigami.Theme.focusColor
-        border.width: Kirigami.Units.smallBorder
+        border.width: Impl.Units.smallBorder
 
         states: State {
             name: "pressed"
@@ -102,7 +104,7 @@ Item {
             to: ""
             SequentialAnimation {
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
                 PropertyAction {
@@ -115,7 +117,7 @@ Item {
     }
 
     Kirigami.Icon {
-        implicitHeight: Kirigami.Units.iconSizes.auto
+        implicitHeight: Impl.Units.iconSizes.auto
         implicitWidth: implicitHeight
         anchors {
             centerIn: parent
diff --git a/style/impl/SwitchIndicator.qml b/style/impl/SwitchIndicator.qml
index 0bb3fb8..15807ea 100644
--- a/style/impl/SwitchIndicator.qml
+++ b/style/impl/SwitchIndicator.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Item {
     id: root
 
@@ -14,7 +16,7 @@ Item {
     readonly property bool controlHasContent: control.contentItem && control.contentItem.width > 0
 
     implicitWidth: implicitHeight*2
-    implicitHeight: Kirigami.Units.inlineControlHeight
+    implicitHeight: Impl.Units.inlineControlHeight
 
     x: controlHasContent ? (root.mirrored ? control.width - width - control.rightPadding : control.leftPadding) : control.leftPadding + (control.availableWidth - width) / 2
     y: control.topPadding + (control.availableHeight - height) / 2
@@ -31,7 +33,7 @@ Item {
         radius: height / 2
         color: Kirigami.Theme.backgroundColor
         border {
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             color: Kirigami.Theme.separatorColor
         }
     }
@@ -41,7 +43,7 @@ Item {
         visible: width > handle.width/2
         color: Kirigami.Theme.alternateBackgroundColor
         border {
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             color: Kirigami.Theme.focusColor
         }
         radius: height/2
@@ -77,7 +79,7 @@ Item {
         radius: height / 2
         color: Kirigami.Theme.backgroundColor
         border {
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             color: control.down || control.visualFocus || control.hovered ?
                 Kirigami.Theme.focusColor : Kirigami.Theme.separatorColor
         }
@@ -85,7 +87,7 @@ Item {
         Behavior on border.color {
             enabled: control.down || control.visualFocus || control.hovered
             ColorAnimation {
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
                 easing.type: Easing.OutCubic
             }
         }
@@ -94,7 +96,7 @@ Item {
             enabled: handle.loaded// && !Kirigami.Settings.hasTransientTouchInput
             // Using SmoothedAnimation because the fill effect is anchored to the handle.
             SmoothedAnimation {
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
                 //SmoothedAnimations have a hardcoded InOutQuad easing
             }
         }
diff --git a/style/impl/TextEditBackground.qml b/style/impl/TextEditBackground.qml
index c29520c..ea58d3f 100644
--- a/style/impl/TextEditBackground.qml
+++ b/style/impl/TextEditBackground.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "." as Impl
+
 Rectangle {
     id: root
 
@@ -17,14 +19,14 @@ Rectangle {
     )
 
     implicitWidth: implicitHeight
-    implicitHeight: Kirigami.Units.mediumControlHeight
+    implicitHeight: Impl.Units.mediumControlHeight
 
     color: Kirigami.Theme.backgroundColor
-    radius: Kirigami.Units.smallRadius
+    radius: Impl.Units.smallRadius
     border {
         color: control.activeFocus || control.hovered ?
             Kirigami.Theme.focusColor : Kirigami.Theme.buttonSeparatorColor
-        width: Kirigami.Units.smallBorder
+        width: Impl.Units.smallBorder
     }
 
     FocusRect {
@@ -35,7 +37,7 @@ Rectangle {
     Behavior on border.color {
         enabled: control.activeFocus || control.hovered
         ColorAnimation {
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
             easing.type: Easing.OutCubic
         }
     }
diff --git a/style/kirigami/Units.qml b/style/impl/Units.qml
similarity index 71%
rename from style/kirigami/Units.qml
rename to style/impl/Units.qml
index 7359590..a91d8b9 100644
--- a/style/kirigami/Units.qml
+++ b/style/impl/Units.qml
@@ -11,6 +11,8 @@ import QtQuick.Window 2.15
 import QtQuick.Controls 1.4 as QtQuickControls
 import QtQuick.Controls.Private 1.0 as QtQuickControlsPrivate
 
+import org.kde.kirigami 2.14 as Kirigami
+
 pragma Singleton
 
 /**
@@ -25,7 +27,7 @@ QtObject {
      * Given the screen has an accurate DPI settings, it corresponds to a width of
      * the capital letter M
      */
-    property int gridUnit: fontMetrics.height + fontMetrics.height % 2
+    property int gridUnit: Kirigami.Units.gridUnit
 
     /**
      * units.iconSizes provides access to platform-dependent icon sizing
@@ -46,26 +48,26 @@ QtObject {
      */
     property QtObject iconSizes: QtObject {
         // Breeze
-        property int sizeForLabels: units.iconSizes.auto
-        property int auto: fontMetrics.roundedIconSize(fontMetrics.height)
-        property int tiny: fontMetrics.roundedIconSize(8 * devicePixelRatio)
-        property int tinySmall: fontMetrics.roundedIconSize(12 * devicePixelRatio)
+        property int sizeForLabels: Kirigami.Units.iconSizes.sizeForLabels
+        property int auto: Kirigami.Units.iconSizes.sizeForLabels
+        property int tiny: Kirigami.Units.iconSizes.small * 0.5
+        property int tinySmall: Kirigami.Units.iconSizes.small * 0.75
         // Breeze
-        property int small: fontMetrics.roundedIconSize(16 * devicePixelRatio)
-        property int smallMedium: fontMetrics.roundedIconSize(22 * devicePixelRatio)
-        property int medium: fontMetrics.roundedIconSize(32 * devicePixelRatio)
-        property int large: fontMetrics.roundedIconSize(48 * devicePixelRatio)
-        property int huge: fontMetrics.roundedIconSize(64 * devicePixelRatio)
-        property int enormous: 128 * devicePixelRatio
+        property int small: Kirigami.Units.iconSizes.small
+        property int smallMedium: Kirigami.Units.iconSizes.smallMedium
+        property int medium: Kirigami.Units.iconSizes.medium
+        property int large: Kirigami.Units.iconSizes.large
+        property int huge: Kirigami.Units.iconSizes.huge
+        property int enormous: Kirigami.Units.iconSizes.enormous
     }
 
     //BEGIN Breeze Units
     // The default border width
     property int smallBorder: 1
     // Used for the focus ring
-    property int mediumBorder: smallBorder*2
+    property int mediumBorder: smallBorder * 2
     // Usually for highlights on larger surfaces like Cards
-    property int largeBorder: smallBorder*4
+    property int largeBorder: smallBorder * 4
 
     // The default corner radius
     property int smallRadius: 3
@@ -78,13 +80,13 @@ QtObject {
     property int highlightLineThickness: smallRadius
 
     property int grooveHeight: {
-        let h = Math.floor(gridUnit/3);
+        let h = Math.floor(gridUnit / 3);
         h += h % 2;
         return h;
     }
 
     property int thickGrooveHeight: {
-        let h = Math.floor(gridUnit/1.5);
+        let h = Math.floor(gridUnit / 1.5);
         h += h % 2;
         return h;
     }
@@ -93,15 +95,15 @@ QtObject {
     property int inlineControlHeight: gridUnit
 
     // For small controls with a small amount of vertical padding
-    property int smallControlHeight: gridUnit + units.smallSpacing*2
+    property int smallControlHeight: gridUnit + units.smallSpacing * 2
 
     // For medium controls with a medium amount of vertical padding
-    property int mediumControlHeight: gridUnit + units.mediumSpacing*2
+    property int mediumControlHeight: gridUnit + units.mediumSpacing * 2
 
     // For large controls with a large amount of vertical padding
-    property int largeControlHeight: gridUnit + units.largeSpacing*2
+    property int largeControlHeight: gridUnit + units.largeSpacing * 2
 
-    property real horizontalPaddingRatio: Math.max(fontMetrics.height/fontMetrics.fullWidthCharWidth, 1)
+    property real horizontalPaddingRatio: Math.max(fontMetrics.height / fontMetrics.fullWidthCharWidth, 1)
 
     property int verySmallHorizontalPadding: Math.round(horizontalPaddingRatio * units.verySmallSpacing)
 
@@ -146,7 +148,7 @@ QtObject {
      * the default font as rendered on the screen, so it takes user-configured font size and DPI
      * into account.
      */
-    property int verySmallSpacing: 2
+    property int verySmallSpacing: Kirigami.Units.smallSpacing * 0.5
 
     /**
      * Units.smallSpacing is the amount of spacing that should be used around smaller UI elements,
@@ -154,12 +156,12 @@ QtObject {
      * the default font as rendered on the screen, so it takes user-configured font size and DPI
      * into account.
      */
-    property int smallSpacing: 4
+    property int smallSpacing: Kirigami.Units.smallSpacing
 
     /**
      * Units.mediumSpacing is the amount of spacing that should be used around medium UI elements
      */
-    property int mediumSpacing: 6
+    property int mediumSpacing: Kirigami.Units.smallSpacing * 1.5
 
     /**
      * Units.largeSpacing is the amount of spacing that should be used inside bigger UI elements,
@@ -167,99 +169,70 @@ QtObject {
      * the size of the default font as rendered on the screen, so it takes user-configured font
      * size and DPI into account.
      */
-    property int largeSpacing: 8
+    property int largeSpacing: Kirigami.Units.largeSpacing
 
     /**
      * Units.veryLargeSpacing is the amount of spacing that should be used inside very big UI elements
      */
-    property int veryLargeSpacing: 12
+    property int veryLargeSpacing: Kirigami.Units.largeSpacing * 1.5
 
     /**
      * The ratio between physical and device-independent pixels. This value does not depend on the \
      * size of the configured font. If you want to take font sizes into account when scaling elements,
      * use theme.mSize(theme.defaultFont), units.smallSpacing and units.largeSpacing.
      * The devicePixelRatio follows the definition of "device independent pixel" by Microsoft.
+     *
+     * @deprecated See Kirigami.Units.devicePixelRatio
      */
-    property real devicePixelRatio: Math.max(1, (fontMetrics.font.pixelSize*0.75) / fontMetrics.font.pointSize)
+    property real devicePixelRatio: Kirigami.Units.devicePixelRatio
 
     /**
      * units.shortDuration should be used for short animations, such as accentuating a UI event,
      * hover events, etc..
      */
-    property int veryShortDuration: 50
+    property int veryShortDuration: Kirigami.Units.veryShortDuration
 
     /**
      * units.shortDuration should be used for short animations, such as accentuating a UI event,
      * hover events, etc..
      */
-    property int shortDuration: 100
+    property int shortDuration: Kirigami.Units.shortDuration
     
     /**
      * units.shortDuration should be used for short animations, such as accentuating a UI event,
      * hover events, etc..
      */
-    property int mediumDuration: 150
+    property int mediumDuration: Kirigami.Units.longDuration * 0.75 // Was 150
 
     /**
      * units.longDuration should be used for longer, screen-covering animations, for opening and
      * closing of dialogs and other "not too small" animations
      */
-    property int longDuration: 200
+    property int longDuration: Kirigami.Units.longDuration
 
     /**
      * units.veryLongDuration should be used for specialty animations that benefit
      * from being even longer than longDuration.
      */
-    property int veryLongDuration: 400
+    property int veryLongDuration: Kirigami.Units.veryLongDuration
 
     /**
      * time in ms by which the display of tooltips will be delayed.
      *
      * @sa ToolTip.delay property
      */
-    property int toolTipDelay: 700
-    
+    property int toolTipDelay: Kirigami.Units.toolTipDelay
+
     /**
-     * Time in milliseconds equivalent to the theoretical human moment, which can be used
-     * to determine whether how long to wait until the user should be informed of something,
-     * or can be used as the limit for how long something should wait before being
-     * automatically initiated.
-     *
-     * Some examples:
-     *
-     * - When the user types text in a search field, wait no longer than this duration after
-     *   the user completes typing before starting the search
-     * - When loading data which would commonly arrive rapidly enough to not require interaction,
-     *   wait this long before showing a spinner
-     *
-     * This might seem an arbitrary number, but given the psychological effect that three
-     * seconds seems to be what humans consider a moment (and in the case of waiting for
-     * something to happen, a moment is that time when you think "this is taking a bit long,
-     * isn't it?"), the idea is to postpone for just before such a conceptual moment. The reason
-     * for the two seconds, rather than three, is to function as a middle ground: Not long enough
-     * that the user would think that something has taken too long, for also not so fast as to
-     * happen too soon.
-     *
-     * See also
-     * https://www.psychologytoday.com/blog/all-about-addiction/201101/tick-tock-tick-hugs-and-life-in-3-second-intervals
-     * (the actual paper is hidden behind an academic paywall and consequently not readily
-     * available to us, so the source will have to be the blog entry above)
-     *
-     * \note This should __not__ be used as an animation duration, as it is deliberately not scaled according
-     * to the animation settings. This is specifically for determining when something has taken too long and
-     * the user should expect some kind of feedback. See veryShortDuration, shortDuration, longDuration, and
-     * veryLongDuration for animation duration choices.
-     *
-     * @since 5.81
-     * @since org.kde.kirigami 2.16
+     * See Kirigami.Units.humanMoment
      */
-    property int humanMoment: 2000
+    property int humanMoment: Kirigami.Units.humanMoment
 
     /**
      * How much the mouse scroll wheel scrolls, expressed in lines of text.
      * Note: this is strictly for classical mouse wheels, touchpads 2 figer scrolling won't be affected
      */
-    readonly property int wheelScrollLines: 3
+    readonly property int wheelScrollLines: Kirigami.Units.wheelScrollLines
 
     /**
      * metrics used by the default font
diff --git a/style/impl/qmldir b/style/impl/qmldir
index d69467c..ac1e565 100644
--- a/style/impl/qmldir
+++ b/style/impl/qmldir
@@ -21,7 +21,6 @@ InlineIconLabelContent 1.0 InlineIconLabelContent.qml
 LargeShadow 1.0 LargeShadow.qml
 ListViewHighlight 1.0 ListViewHighlight.qml
 MediumShadow 1.0 MediumShadow.qml
-MobileCursor 1.0 MobileCursor.qml
 RadioIndicator 1.0 RadioIndicator.qml
 ScrollHandle 1.0 ScrollHandle.qml
 SliderGroove 1.0 SliderGroove.qml
@@ -30,3 +29,5 @@ SmallShadow 1.0 SmallShadow.qml
 SpinBoxIndicator 1.0 SpinBoxIndicator.qml
 SwitchIndicator 1.0 SwitchIndicator.qml
 TextEditBackground 1.0 TextEditBackground.qml
+
+singleton Units 1.0 Units.qml
diff --git a/style/qtquickcontrols/BusyIndicator.qml b/style/qtquickcontrols/BusyIndicator.qml
index 21ee43e..310fe2b 100644
--- a/style/qtquickcontrols/BusyIndicator.qml
+++ b/style/qtquickcontrols/BusyIndicator.qml
@@ -7,6 +7,8 @@ import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 import org.kde.quickcharts 1.0 as Charts
 
+import "impl" as Impl
+
 T.BusyIndicator {
     id: control
 
@@ -17,7 +19,7 @@ T.BusyIndicator {
 
     hoverEnabled: false
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
 
     ListModel {
         id: pieModel
@@ -55,13 +57,13 @@ T.BusyIndicator {
         id: lowPowerSpinnerComponent
         Kirigami.Icon {
             id: lowPowerSpinner
-            implicitWidth: Kirigami.Units.iconSizes.auto
-            implicitHeight: Kirigami.Units.iconSizes.auto
+            implicitWidth: Impl.Units.iconSizes.auto
+            implicitHeight: Impl.Units.iconSizes.auto
             source: "view-refresh"
 
             opacity: control.visible && control.enabled && control.running ? 1 : 0
             Behavior on opacity {
-                OpacityAnimator { duration: Kirigami.Units.shortDuration }
+                OpacityAnimator { duration: Impl.Units.shortDuration }
             }
 
             smooth: true
@@ -80,12 +82,12 @@ T.BusyIndicator {
         id: fancySpinnerComponent
         Charts.PieChart {
             id: fancySpinner
-            implicitWidth: Kirigami.Units.gridUnit
-            implicitHeight: Kirigami.Units.gridUnit
+            implicitWidth: Impl.Units.gridUnit
+            implicitHeight: Impl.Units.gridUnit
 
             opacity: control.visible && control.enabled && control.running ? 1 : 0
             Behavior on opacity {
-                OpacityAnimator { duration: Kirigami.Units.shortDuration }
+                OpacityAnimator { duration: Impl.Units.shortDuration }
             }
 
             valueSources: Charts.ModelSource { roleName: "value"; model: pieModel }
@@ -93,7 +95,7 @@ T.BusyIndicator {
 
             fromAngle: 0
             toAngle: 360
-            thickness: Math.max(Kirigami.Units.smallRadius * 2, Math.floor(Math.min(width, height)/6))
+            thickness: Math.max(Impl.Units.smallRadius * 2, Math.floor(Math.min(width, height)/6))
             filled: false
             //smoothEnds: true // Turns the segments into aesthetically pleasing round dots, but breaks the connected appearance when the ends meet :(
 
diff --git a/style/qtquickcontrols/Button.qml b/style/qtquickcontrols/Button.qml
index fd7da18..80a2ebd 100644
--- a/style/qtquickcontrols/Button.qml
+++ b/style/qtquickcontrols/Button.qml
@@ -5,7 +5,8 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.Button {
     id: control
@@ -21,6 +22,8 @@ T.Button {
 
     palette: Kirigami.Theme.palette
 
+    hoverEnabled: true
+
     Kirigami.Theme.colorSet: /*control.highlighted ? Kirigami.Theme.Selection :*/ Kirigami.Theme.Button
     Kirigami.Theme.inherit: false//control.flat && !control.down && !control.checked
     // Absolutely terrible HACK:
@@ -30,28 +33,28 @@ T.Button {
         Kirigami.Theme.inherit = false//Qt.binding(() => control.flat && !(control.down || control.checked))
     }
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
     rightPadding: {
         if (contentItem.hasLabel && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.MnemonicData.enabled: control.enabled && control.visible
     Kirigami.MnemonicData.controlType: Kirigami.MnemonicData.ActionElement
@@ -63,12 +66,12 @@ T.Button {
         onActivated: control.clicked()
     }
 
-    contentItem: IconLabelContent {
+    contentItem: Impl.IconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
     }
 
-    background: ButtonBackground {
+    background: Impl.ButtonBackground {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/CheckBox.qml b/style/qtquickcontrols/CheckBox.qml
index df4e232..74337fd 100644
--- a/style/qtquickcontrols/CheckBox.qml
+++ b/style/qtquickcontrols/CheckBox.qml
@@ -6,7 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.CheckBox {
     id: control
@@ -18,15 +19,15 @@ T.CheckBox {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.verySmallSpacing
-    horizontalPadding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.verySmallSpacing
+    horizontalPadding: Impl.Units.mediumSpacing
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
-    indicator: CheckIndicator {
+    indicator: Impl.CheckIndicator {
         control: control
     }
 
@@ -40,7 +41,7 @@ T.CheckBox {
         onActivated: control.toggle();
     }
 
-    contentItem: InlineIconLabelContent {
+    contentItem: Impl.InlineIconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
         alignment: Qt.AlignLeft | Qt.AlignVCenter
diff --git a/style/qtquickcontrols/CheckDelegate.qml b/style/qtquickcontrols/CheckDelegate.qml
index 6159b37..ad2ac22 100644
--- a/style/qtquickcontrols/CheckDelegate.qml
+++ b/style/qtquickcontrols/CheckDelegate.qml
@@ -6,7 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.CheckDelegate {
     id: control
@@ -18,12 +19,12 @@ T.CheckDelegate {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
@@ -32,32 +33,32 @@ T.CheckDelegate {
         if (!control.indicator.visible
             && contentItem.hasLabel
             && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.Theme.colorSet: control.down || control.highlighted ? Kirigami.Theme.Button : -1
     Kirigami.Theme.inherit: !background || !background.visible && !(control.highlighted || control.down)
 
-    contentItem: IconLabelContent {
+    contentItem: Impl.IconLabelContent {
         control: control
         alignment: Qt.AlignLeft | Qt.AlignVCenter
         //color: (control.pressed && !control.checked && !control.sectionDelegate) ? Kirigami.Theme.highlightedTextColor : Kirigami.Theme.textColor
     }
 
-    indicator: CheckIndicator {
+    indicator: Impl.CheckIndicator {
         control: control
         mirrored: !control.mirrored
     }
 
-    background: DelegateBackground {
+    background: Impl.DelegateBackground {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/ComboBox.qml b/style/qtquickcontrols/ComboBox.qml
index 6e7751f..e14020d 100644
--- a/style/qtquickcontrols/ComboBox.qml
+++ b/style/qtquickcontrols/ComboBox.qml
@@ -9,7 +9,8 @@ import QtQuick.Window 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.ComboBox {
     id: control
@@ -28,7 +29,7 @@ T.ComboBox {
     Kirigami.Theme.colorSet: control.editable ? Kirigami.Theme.View : Kirigami.Theme.Button
     Kirigami.Theme.inherit: false
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
     leftPadding: horizontalPadding + (!control.mirrored ? 0 : __indicatorMargin)
     rightPadding: horizontalPadding + (control.mirrored ? 0 : __indicatorMargin)
@@ -37,8 +38,8 @@ T.ComboBox {
         id: textField
         palette: control.palette
         // TextField padding doesn't automatically mirror
-        leftPadding: control.mirrored ? 0 : Kirigami.Units.mediumHorizontalPadding
-        rightPadding: !control.mirrored ? 0 : Kirigami.Units.mediumHorizontalPadding
+        leftPadding: control.mirrored ? 0 : Impl.Units.mediumHorizontalPadding
+        rightPadding: !control.mirrored ? 0 : Impl.Units.mediumHorizontalPadding
 
         text: control.editable ? control.editText : control.displayText
 
@@ -57,20 +58,20 @@ T.ComboBox {
     }
 
     indicator: Kirigami.Icon {
-        implicitHeight: Kirigami.Units.iconSizes.sizeForLabels
+        implicitHeight: Impl.Units.iconSizes.sizeForLabels
         implicitWidth: implicitHeight
         x: control.mirrored ? control.leftPadding : control.leftPadding + control.availableWidth + control.spacing
         y: control.topPadding + (control.availableHeight - height) / 2
         source: "arrow-down"
     }
 
-    background: ComboBoxBackground {
+    background: Impl.ComboBoxBackground {
         control: control
 
         Rectangle {
             id: separator
             visible: control.editable
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             anchors {
                 right: parent.right
                 top: parent.top
@@ -88,7 +89,7 @@ T.ComboBox {
             Behavior on color {
                 enabled: control.down || control.hovered
                 ColorAnimation {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
             }
@@ -120,7 +121,7 @@ T.ComboBox {
             }
 
             border.color: Kirigami.Theme.focusColor
-            border.width: Kirigami.Units.smallBorder
+            border.width: Impl.Units.smallBorder
 
             opacity: 0
 
@@ -138,7 +139,7 @@ T.ComboBox {
                 to: ""
                 SequentialAnimation {
                     OpacityAnimator {
-                        duration: Kirigami.Units.shortDuration
+                        duration: Impl.Units.shortDuration
                         easing.type: Easing.OutCubic
                     }
                     PropertyAction {
@@ -180,9 +181,9 @@ T.ComboBox {
             implicitWidth: contentWidth
             model: control.delegateModel // Why isn't this in the ComboBox documentation?
             currentIndex: control.highlightedIndex
-            highlightMoveDuration: Kirigami.Units.shortDuration
-            highlightMoveVelocity: Kirigami.Units.gridUnit * 20
-            highlight: ListViewHighlight {
+            highlightMoveDuration: Impl.Units.shortDuration
+            highlightMoveVelocity: Impl.Units.gridUnit * 20
+            highlight: Impl.ListViewHighlight {
                 currentIndex: control.highlightedIndex
                 count: control.count
             }
diff --git a/style/qtquickcontrols/DelayButton.qml b/style/qtquickcontrols/DelayButton.qml
index 4b988c8..ddf347a 100644
--- a/style/qtquickcontrols/DelayButton.qml
+++ b/style/qtquickcontrols/DelayButton.qml
@@ -5,7 +5,8 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.DelayButton {
     id: control
@@ -20,25 +21,25 @@ T.DelayButton {
     Kirigami.Theme.colorSet: control.highlighted ? Kirigami.Theme.Selection : Kirigami.Theme.Button
     Kirigami.Theme.inherit: false
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
     rightPadding: {
         if (contentItem.hasLabel && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
     transition: Transition {
         NumberAnimation {
@@ -46,8 +47,8 @@ T.DelayButton {
         }
     }
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.MnemonicData.enabled: control.enabled && control.visible
     Kirigami.MnemonicData.controlType: Kirigami.MnemonicData.ActionElement
@@ -59,19 +60,19 @@ T.DelayButton {
         onActivated: control.clicked()
     }
 
-    contentItem: IconLabelContent {
+    contentItem: Impl.IconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
     }
 
-    background: ButtonBackground {
+    background: Impl.ButtonBackground {
         control: control
         color: control.palette.button
 
         Kirigami.ShadowedRectangle {
             id: progressFillRect
             property real radiusThreshold: parent.width - leftRadius
-            property real leftRadius: Kirigami.Units.smallRadius
+            property real leftRadius: Impl.Units.smallRadius
             property real rightRadius: width > radiusThreshold ? width - radiusThreshold : 0
 
             visible: width > 0
diff --git a/style/qtquickcontrols/Dial.qml b/style/qtquickcontrols/Dial.qml
index 9ef6344..5f755d8 100644
--- a/style/qtquickcontrols/Dial.qml
+++ b/style/qtquickcontrols/Dial.qml
@@ -8,7 +8,7 @@ import QtQuick.Controls.impl 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 import org.kde.breeze 1.0
-import "impl"
+import "impl" as Impl
 
 T.Dial {
     id: control
@@ -31,11 +31,11 @@ T.Dial {
         fillBorderColor: Kirigami.Theme.focusColor
         fillColor: Kirigami.Theme.alternateBackgroundColor
         angle: control.angle
-        grooveThickness: Kirigami.Units.grooveHeight
+        grooveThickness: Impl.Units.grooveHeight
         Behavior on angle {
             enabled: !Kirigami.Settings.hasTransientTouchInput
             SmoothedAnimation {
-                duration: Kirigami.Units.longDuration
+                duration: Impl.Units.longDuration
                 velocity: 800
                 //SmoothedAnimations have a hardcoded InOutQuad easing
             }
@@ -55,7 +55,7 @@ T.Dial {
         color: Kirigami.Theme.backgroundColor
 
         border {
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             color: control.pressed || control.visualFocus || control.hovered
                 ? Kirigami.Theme.focusColor : Kirigami.Theme.separatorColor
         }
@@ -76,7 +76,7 @@ T.Dial {
             Behavior on rotation {
                 enabled: !Kirigami.Settings.hasTransientTouchInput
                 SmoothedAnimation {
-                    duration: Kirigami.Units.longDuration
+                    duration: Impl.Units.longDuration
                     velocity: 800
                     //SmoothedAnimations have a hardcoded InOutQuad easing
                 }
@@ -127,7 +127,7 @@ T.Dial {
         Behavior on border.color {
             enabled: control.pressed || control.visualFocus || control.hovered
             ColorAnimation {
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
                 easing.type: Easing.OutCubic
             }
         }
@@ -135,12 +135,12 @@ T.Dial {
         Behavior on shadow.color {
             enabled: control.pressed
             ColorAnimation {
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
                 easing.type: Easing.OutCubic
             }
         }
 
-        FocusRect {
+        Impl.FocusRect {
             z: -1
             baseRadius: parent.radius
             visible: control.visualFocus
@@ -164,7 +164,7 @@ T.Dial {
             }
             Behavior on opacity {
                 OpacityAnimator {
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                     easing.type: Easing.OutCubic
                 }
             }
diff --git a/style/qtquickcontrols/Dialog.qml b/style/qtquickcontrols/Dialog.qml
index 33f89e7..c8619e1 100644
--- a/style/qtquickcontrols/Dialog.qml
+++ b/style/qtquickcontrols/Dialog.qml
@@ -5,7 +5,7 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.Dialog {
     id: control
@@ -19,7 +19,7 @@ T.Dialog {
                              + (implicitHeaderHeight > 0 ? implicitHeaderHeight + spacing : 0)
                              + (implicitFooterHeight > 0 ? implicitFooterHeight + spacing : 0))
 
-    padding: Kirigami.Units.gridUnit
+    padding: Impl.Units.gridUnit
 
 //     anchors.centerIn: T.Overlay.overlay
 
@@ -29,7 +29,7 @@ T.Dialog {
             from: 0
             to: 1
             easing.type: Easing.InOutQuad
-            duration: Kirigami.Units.longDuration
+            duration: Impl.Units.longDuration
         }
     }
 
@@ -39,17 +39,17 @@ T.Dialog {
             from: 1
             to: 0
             easing.type: Easing.InOutQuad
-            duration: Kirigami.Units.longDuration
+            duration: Impl.Units.longDuration
         }
     }
 
     background: Rectangle {
-        radius: Kirigami.Units.smallRadius
+        radius: Impl.Units.smallRadius
         color: Kirigami.Theme.backgroundColor
         border.color: Kirigami.Theme.separatorColor
-        border.width: control.dim ? 0 : Kirigami.Units.smallBorder
+        border.width: control.dim ? 0 : Impl.Units.smallBorder
 
-        LargeShadow {
+        Impl.LargeShadow {
             radius: parent.radius
         }
     }
@@ -59,7 +59,7 @@ T.Dialog {
         level: 2
         visible: control.title
         elide: Label.ElideRight
-        padding: Kirigami.Units.gridUnit
+        padding: Impl.Units.gridUnit
         bottomPadding: 0
     }
 
@@ -67,6 +67,6 @@ T.Dialog {
         visible: count > 0
     }
 
-    T.Overlay.modal: OverlayModalBackground {}
-    T.Overlay.modeless: OverlayDimBackground {}
+    T.Overlay.modal: Impl.OverlayModalBackground {}
+    T.Overlay.modeless: Impl.OverlayDimBackground {}
 }
diff --git a/style/qtquickcontrols/DialogButtonBox.qml b/style/qtquickcontrols/DialogButtonBox.qml
index e1d006c..37a1305 100644
--- a/style/qtquickcontrols/DialogButtonBox.qml
+++ b/style/qtquickcontrols/DialogButtonBox.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.DialogButtonBox {
     id: control
 
@@ -21,9 +23,9 @@ T.DialogButtonBox {
     implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                              contentHeight + topPadding + bottomPadding)
 
-    spacing: Kirigami.Units.smallSpacing
+    spacing: Impl.Units.smallSpacing
 
-    padding: Kirigami.Units.smallSpacing
+    padding: Impl.Units.smallSpacing
 
     // Add space for the separator above the footer
     topPadding: __isFooter && background && background.hasOwnProperty("separator") ?
@@ -51,7 +53,7 @@ T.DialogButtonBox {
     background: Kirigami.ShadowedRectangle {
         property real topRadius: control.__isHeader ? radius : 0
         property real bottomRadius: control.__isFooter ? radius : 0
-        radius: control.__isInPopup ? Kirigami.Units.smallRadius : 0
+        radius: control.__isInPopup ? Impl.Units.smallRadius : 0
         corners {
             topLeftRadius: topRadius
             topRightRadius: topRadius
@@ -59,7 +61,7 @@ T.DialogButtonBox {
             bottomRightRadius: bottomRadius
         }
         // Enough height for Buttons/ComboBoxes/TextFields with smallSpacing padding on top and bottom
-        implicitHeight: Kirigami.Units.mediumControlHeight + (Kirigami.Units.smallSpacing * 2) + (separator.visible ? separator.height : 0)
+        implicitHeight: Impl.Units.mediumControlHeight + (Impl.Units.smallSpacing * 2) + (separator.visible ? separator.height : 0)
         color: control.__isInPopup ? "transparent" : Kirigami.Theme.backgroundColor
         property Item separator: Kirigami.Separator {
             parent: background
diff --git a/style/qtquickcontrols/Drawer.qml b/style/qtquickcontrols/Drawer.qml
index a8281fb..63d1abe 100644
--- a/style/qtquickcontrols/Drawer.qml
+++ b/style/qtquickcontrols/Drawer.qml
@@ -9,7 +9,7 @@ import QtQuick 2.15
 import QtQuick.Controls 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.Drawer {
     id: control
@@ -34,8 +34,8 @@ T.Drawer {
         }
         Kirigami.Separator {
             readonly property bool horizontal: control.edge === Qt.LeftEdge || control.edge === Qt.RightEdge
-            width: horizontal ? Kirigami.Units.smallBorder : parent.width
-            height: horizontal ? parent.height : Kirigami.Units.smallBorder
+            width: horizontal ? Impl.Units.smallBorder : parent.width
+            height: horizontal ? parent.height : Impl.Units.smallBorder
             x: control.edge === Qt.LeftEdge ? parent.width - 1 : 0
             y: control.edge === Qt.TopEdge ? parent.height - 1 : 0
             visible: !control.dim
@@ -53,6 +53,6 @@ T.Drawer {
         }
     }
 
-    T.Overlay.modal: OverlayModalBackground {}
-    T.Overlay.modeless: OverlayDimBackground {}
+    T.Overlay.modal: Impl.OverlayModalBackground {}
+    T.Overlay.modeless: Impl.OverlayDimBackground {}
 }
diff --git a/style/qtquickcontrols/Frame.qml b/style/qtquickcontrols/Frame.qml
index a84d6fb..665cde3 100644
--- a/style/qtquickcontrols/Frame.qml
+++ b/style/qtquickcontrols/Frame.qml
@@ -7,6 +7,8 @@ import QtQuick.Controls 2.15 as Controls
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.Frame {
     id: control
 
@@ -18,12 +20,12 @@ T.Frame {
 //     contentWidth: contentItem.implicitWidth || (contentChildren.length === 1 ? contentChildren[0].implicitWidth : 0)
     //contentHeight: contentItem.implicitHeight || (contentChildren.length === 1 ? contentChildren[0].implicitHeight : 0)
 
-    padding: Kirigami.Units.veryLargeSpacing + Kirigami.Units.smallBorder
+    padding: Impl.Units.veryLargeSpacing + Impl.Units.smallBorder
 
     background: Rectangle {
         color: Kirigami.Theme.backgroundColor
-        radius: Kirigami.Units.smallRadius
+        radius: Impl.Units.smallRadius
         border.color: Kirigami.Theme.separatorColor
-        border.width: Kirigami.Units.smallBorder
+        border.width: Impl.Units.smallBorder
     }
 }
diff --git a/style/qtquickcontrols/GroupBox.qml b/style/qtquickcontrols/GroupBox.qml
index db01aff..86a0661 100644
--- a/style/qtquickcontrols/GroupBox.qml
+++ b/style/qtquickcontrols/GroupBox.qml
@@ -8,6 +8,8 @@ import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.GroupBox {
     id: control
 
@@ -20,8 +22,8 @@ T.GroupBox {
 //     contentWidth: contentItem.implicitWidth || (contentChildren.length === 1 ? contentChildren[0].implicitWidth : 0)
     //contentHeight: contentItem.implicitHeight || (contentChildren.length === 1 ? contentChildren[0].implicitHeight : 0)
 
-    spacing: Kirigami.Units.mediumSpacing
-    padding: Kirigami.Units.veryLargeSpacing
+    spacing: Impl.Units.mediumSpacing
+    padding: Impl.Units.veryLargeSpacing
     topPadding: padding + (implicitLabelWidth > 0 ? implicitLabelHeight + spacing : 0)
 
     label: Controls.Label {
diff --git a/style/qtquickcontrols/ItemDelegate.qml b/style/qtquickcontrols/ItemDelegate.qml
index ff9a6ae..6177b94 100644
--- a/style/qtquickcontrols/ItemDelegate.qml
+++ b/style/qtquickcontrols/ItemDelegate.qml
@@ -6,7 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.ItemDelegate {
     id: control
@@ -18,39 +19,39 @@ T.ItemDelegate {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
 
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
     rightPadding: {
         if (contentItem.hasLabel && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.Theme.colorSet: control.down || control.highlighted ? Kirigami.Theme.Button : -1
     Kirigami.Theme.inherit: !background || !background.visible && !(control.highlighted || control.down)
 
-    contentItem: IconLabelContent {
+    contentItem: Impl.IconLabelContent {
         control: control
         alignment: Qt.AlignLeft | Qt.AlignVCenter
     }
 
-    background: DelegateBackground {
+    background: Impl.DelegateBackground {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/Menu.qml b/style/qtquickcontrols/Menu.qml
index 39ab7fe..9238e34 100644
--- a/style/qtquickcontrols/Menu.qml
+++ b/style/qtquickcontrols/Menu.qml
@@ -13,7 +13,8 @@ import QtQuick.Controls 2.15 as Controls
 import QtQuick.Controls.impl 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.Menu {
     id: control
@@ -39,9 +40,9 @@ T.Menu {
         implicitHeight: contentHeight
         implicitWidth: contentWidth
         model: control.contentModel
-        highlightMoveDuration: Kirigami.Units.shortDuration
+        highlightMoveDuration: Impl.Units.shortDuration
         highlightMoveVelocity: 800
-        highlight: ListViewHighlight {
+        highlight: Impl.ListViewHighlight {
             currentIndex: control.currentIndex
             count: control.count
         }
@@ -64,7 +65,7 @@ T.Menu {
                 from: 0
                 to: 1
                 easing.type: Easing.OutCubic
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
             }
         }
     }
@@ -76,23 +77,23 @@ T.Menu {
                 from: 1
                 to: 0
                 easing.type: Easing.InCubic
-                duration: Kirigami.Units.shortDuration
+                duration: Impl.Units.shortDuration
             }
         }
     }
 
     background: Rectangle {
-        radius: Kirigami.Units.smallRadius
-        implicitHeight: Kirigami.Units.mediumControlHeight
-        implicitWidth: Kirigami.Units.gridUnit * 15
+        radius: Impl.Units.smallRadius
+        implicitHeight: Impl.Units.mediumControlHeight
+        implicitWidth: Impl.Units.gridUnit * 15
         color: Kirigami.Theme.backgroundColor
 
         border {
             color: Kirigami.Theme.separatorColor
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
         }
 
-        LargeShadow {
+        Impl.LargeShadow {
             radius: parent.radius
         }
     }
diff --git a/style/qtquickcontrols/MenuBarItem.qml b/style/qtquickcontrols/MenuBarItem.qml
index 1ca62e1..672d45f 100644
--- a/style/qtquickcontrols/MenuBarItem.qml
+++ b/style/qtquickcontrols/MenuBarItem.qml
@@ -12,7 +12,7 @@ import QtQuick.Layouts 1.12
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.MenuBarItem {
     id: controlRoot
@@ -23,10 +23,10 @@ T.MenuBarItem {
     baselineOffset: contentItem.y + contentItem.baselineOffset
 
     Layout.fillWidth: true
-    leftPadding: Kirigami.Units.largeSpacing
-    rightPadding: Kirigami.Units.largeSpacing
-    topPadding: Kirigami.Units.smallSpacing
-    bottomPadding: Kirigami.Units.smallSpacing
+    leftPadding: Impl.Units.largeSpacing
+    rightPadding: Impl.Units.largeSpacing
+    topPadding: Impl.Units.smallSpacing
+    bottomPadding: Impl.Units.smallSpacing
     hoverEnabled: true
 
     Kirigami.MnemonicData.enabled: controlRoot.enabled && controlRoot.visible
@@ -52,7 +52,7 @@ T.MenuBarItem {
 
     background: Item {
         anchors.fill: parent
-        implicitWidth: Kirigami.Units.gridUnit * 8
+        implicitWidth: Impl.Units.gridUnit * 8
 
         Rectangle {
             anchors.fill: parent
diff --git a/style/qtquickcontrols/MenuItem.qml b/style/qtquickcontrols/MenuItem.qml
index 7974436..cfe60a9 100644
--- a/style/qtquickcontrols/MenuItem.qml
+++ b/style/qtquickcontrols/MenuItem.qml
@@ -9,7 +9,7 @@ import QtQuick.Layouts 1.12
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.MenuItem {
     id: control
@@ -49,19 +49,19 @@ T.MenuItem {
 
 //     width: parent ? parent.width : implicitWidth
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Layout.fillWidth: true
 
-    spacing: Kirigami.Units.mediumSpacing
-    padding: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if (!control.indicator.visible
             && ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
                 || display == T.AbstractButton.TextOnly
                 || display == T.AbstractButton.TextUnderIcon)) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
@@ -70,7 +70,7 @@ T.MenuItem {
         if (!control.arrow.visible
             && contentItem.hasLabel // False if contentItem has been replaced
             && display != T.AbstractButton.IconOnly) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
@@ -92,7 +92,7 @@ T.MenuItem {
         }
     }
 
-    indicator: CheckIndicator {
+    indicator: Impl.CheckIndicator {
         visible: control.checkable
         control: control
         checkState: control.checked ? Qt.Checked : Qt.Unchecked
@@ -105,12 +105,12 @@ T.MenuItem {
             verticalCenter: control.verticalCenter
         }
         source: control.mirrored ? "arrow-left" : "arrow-right"
-        implicitWidth: Kirigami.Units.iconSizes.auto
-        implicitHeight: Kirigami.Units.iconSizes.auto
+        implicitWidth: Impl.Units.iconSizes.auto
+        implicitHeight: Impl.Units.iconSizes.auto
         visible: control.subMenu
     }
 
-    contentItem: IconLabelShortcutContent {
+    contentItem: Impl.IconLabelShortcutContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
         alignment: Qt.AlignLeft | Qt.AlignVCenter
@@ -119,7 +119,7 @@ T.MenuItem {
         reserveSpaceForArrow: control.__reserveSpaceForArrow
     }
 
-    background: MenuItemBackground {
+    background: Impl.MenuItemBackground {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/MobileTextActionsToolBar.qml b/style/qtquickcontrols/MobileTextActionsToolBar.qml
index 2d9347b..e493614 100644
--- a/style/qtquickcontrols/MobileTextActionsToolBar.qml
+++ b/style/qtquickcontrols/MobileTextActionsToolBar.qml
@@ -9,6 +9,8 @@ import QtQuick.Window 2.15
 import QtQuick.Controls 2.15
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 Loader {
     id: root
     property Item target
@@ -24,7 +26,7 @@ Loader {
         parent: Overlay.overlay
         modal: false
         focus: false
-        margins: Kirigami.Units.verySmallSpacing
+        margins: Impl.Units.verySmallSpacing
         padding: 0
 
         x: xAlignHCenter
diff --git a/style/qtquickcontrols/PageIndicator.qml b/style/qtquickcontrols/PageIndicator.qml
index 8001315..35f2f40 100644
--- a/style/qtquickcontrols/PageIndicator.qml
+++ b/style/qtquickcontrols/PageIndicator.qml
@@ -7,6 +7,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.PageIndicator {
     id: control
 
@@ -15,14 +17,14 @@ T.PageIndicator {
     implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                              implicitContentHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
-    spacing: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
     // Using ShadowedRectangle because it makes smoother circles than Rectangle
     delegate: Kirigami.ShadowedRectangle {
         implicitWidth: implicitHeight
         implicitHeight: {
-            let h = Kirigami.Units.inlineControlHeight/2
+            let h = Impl.Units.inlineControlHeight/2
             h -= h % 2
             return h
         }
@@ -31,7 +33,7 @@ T.PageIndicator {
         color: Kirigami.Theme.textColor
 
         opacity: index === currentIndex ? 1 : pressed ? 0.67 : 0.33
-        Behavior on opacity { OpacityAnimator { duration: Kirigami.Units.shortDuration } }
+        Behavior on opacity { OpacityAnimator { duration: Impl.Units.shortDuration } }
     }
 
     contentItem: Row {
diff --git a/style/qtquickcontrols/Pane.qml b/style/qtquickcontrols/Pane.qml
index 9a7d807..43de0ba 100644
--- a/style/qtquickcontrols/Pane.qml
+++ b/style/qtquickcontrols/Pane.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.Pane {
     id: control
 
@@ -17,7 +19,7 @@ T.Pane {
     // Not confident about this value.
     // Why do Qt QQC2 styles use large padding for this
     // and no padding for Pages?
-    padding: Kirigami.Units.veryLargeSpacing
+    padding: Impl.Units.veryLargeSpacing
 
     background: Rectangle {
         color: Kirigami.Theme.backgroundColor
diff --git a/style/qtquickcontrols/Popup.qml b/style/qtquickcontrols/Popup.qml
index df3afde..1add253 100644
--- a/style/qtquickcontrols/Popup.qml
+++ b/style/qtquickcontrols/Popup.qml
@@ -8,7 +8,7 @@
 import QtQuick 2.6
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.Popup {
     id: control
@@ -18,7 +18,7 @@ T.Popup {
     implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                              contentHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.veryLargeSpacing
+    padding: Impl.Units.veryLargeSpacing
 //     clip: true
 
     enter: Transition {
@@ -27,7 +27,7 @@ T.Popup {
             from: 0
             to: 1
             easing.type: Easing.InOutQuad
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
         }
     }
 
@@ -37,26 +37,26 @@ T.Popup {
             from: 1
             to: 0
             easing.type: Easing.InOutQuad
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
         }
     }
 
     background: Rectangle {
-        radius: Kirigami.Units.smallRadius
-//         implicitHeight: Kirigami.Units.smallControlHeight
-        //implicitWidth: Kirigami.Units.gridUnit * 12
+        radius: Impl.Units.smallRadius
+//         implicitHeight: Impl.Units.smallControlHeight
+        //implicitWidth: Impl.Units.gridUnit * 12
         color: Kirigami.Theme.backgroundColor
 
         border {
             color: Kirigami.Theme.separatorColor
-            width: control.dim ? 0 : Kirigami.Units.smallBorder
+            width: control.dim ? 0 : Impl.Units.smallBorder
         }
 
-        MediumShadow {
+        Impl.MediumShadow {
             radius: parent.radius
         }
     }
 
-    T.Overlay.modal: OverlayModalBackground {}
-    T.Overlay.modeless: OverlayDimBackground {}
+    T.Overlay.modal: Impl.OverlayModalBackground {}
+    T.Overlay.modeless: Impl.OverlayDimBackground {}
 }
diff --git a/style/qtquickcontrols/ProgressBar.qml b/style/qtquickcontrols/ProgressBar.qml
index 0fbd86d..ffc0045 100644
--- a/style/qtquickcontrols/ProgressBar.qml
+++ b/style/qtquickcontrols/ProgressBar.qml
@@ -5,7 +5,7 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.ProgressBar {
     id: control
@@ -20,7 +20,7 @@ T.ProgressBar {
 
     contentItem: Item {
         implicitWidth: 200
-        implicitHeight: Kirigami.Units.grooveHeight
+        implicitHeight: Impl.Units.grooveHeight
         clip: true
         Rectangle {
             id: progressFill
@@ -32,10 +32,10 @@ T.ProgressBar {
             }
             width: control.position * parent.width
 
-            radius: Kirigami.Units.grooveHeight/2
+            radius: Impl.Units.grooveHeight/2
             color: Kirigami.Theme.alternateBackgroundColor
             border {
-                width: Kirigami.Units.smallBorder
+                width: Impl.Units.smallBorder
                 color: Kirigami.Theme.focusColor
             }
         }
@@ -49,12 +49,12 @@ T.ProgressBar {
 
     background: Rectangle {
         implicitWidth: 200
-        implicitHeight: Kirigami.Units.grooveHeight
+        implicitHeight: Impl.Units.grooveHeight
 
-        radius: Kirigami.Units.grooveHeight/2
+        radius: Impl.Units.grooveHeight/2
         color: Kirigami.Theme.backgroundColor
         border {
-            width: Kirigami.Units.smallBorder
+            width: Impl.Units.smallBorder
             color: Kirigami.Theme.separatorColor
         }
     }
diff --git a/style/qtquickcontrols/RadioButton.qml b/style/qtquickcontrols/RadioButton.qml
index 41677d8..1e4f609 100644
--- a/style/qtquickcontrols/RadioButton.qml
+++ b/style/qtquickcontrols/RadioButton.qml
@@ -6,7 +6,7 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.RadioButton {
     id: control
@@ -18,15 +18,15 @@ T.RadioButton {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.verySmallSpacing
-    horizontalPadding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.verySmallSpacing
+    horizontalPadding: Impl.Units.mediumSpacing
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
-    indicator: RadioIndicator {
+    indicator: Impl.RadioIndicator {
         control: control
     }
 
@@ -40,7 +40,7 @@ T.RadioButton {
         onActivated: control.checked = true
     }
 
-    contentItem: InlineIconLabelContent {
+    contentItem: Impl.InlineIconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
         alignment: Qt.AlignLeft | Qt.AlignVCenter
diff --git a/style/qtquickcontrols/RadioDelegate.qml b/style/qtquickcontrols/RadioDelegate.qml
index 53bfd52..8c7c1d7 100644
--- a/style/qtquickcontrols/RadioDelegate.qml
+++ b/style/qtquickcontrols/RadioDelegate.qml
@@ -6,7 +6,7 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.RadioDelegate {
     id: control
@@ -18,12 +18,12 @@ T.RadioDelegate {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
@@ -32,32 +32,32 @@ T.RadioDelegate {
         if (!control.indicator.visible
             && contentItem.hasLabel
             && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.Theme.colorSet: control.down || control.highlighted ? Kirigami.Theme.Button : -1
     Kirigami.Theme.inherit: !background || !background.visible && !(control.highlighted || control.down)
 
-    contentItem: IconLabelContent {
+    contentItem:Impl.IconLabelContent {
         control: control
         alignment: Qt.AlignLeft | Qt.AlignVCenter
         //color: (control.pressed && !control.checked && !control.sectionDelegate) ? Kirigami.Theme.highlightedTextColor : Kirigami.Theme.textColor
     }
 
-    indicator: RadioIndicator {
+    indicator: Impl.RadioIndicator {
         control: control
         mirrored: !control.mirrored
     }
 
-    background: DelegateBackground {
+    background: Impl.DelegateBackground {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/RangeSlider.qml b/style/qtquickcontrols/RangeSlider.qml
index 479eab0..02970c4 100644
--- a/style/qtquickcontrols/RangeSlider.qml
+++ b/style/qtquickcontrols/RangeSlider.qml
@@ -8,7 +8,7 @@ import QtQuick 2.15
 import QtQuick.Controls 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.RangeSlider {
     id: control
@@ -23,9 +23,9 @@ T.RangeSlider {
     Kirigami.Theme.colorSet: Kirigami.Theme.Button
     Kirigami.Theme.inherit: false
 
-    padding: Kirigami.Settings.tabletMode ? Kirigami.Units.mediumSpacing : 0
+    padding: Kirigami.Settings.tabletMode ? Impl.Units.mediumSpacing : 0
 
-    first.handle: SliderHandle {
+    first.handle: Impl.SliderHandle {
         control: control
         position: control.first.position
         visualPosition: control.first.visualPosition
@@ -35,7 +35,7 @@ T.RangeSlider {
         visualFocus: activeFocus
     }
 
-    second.handle: SliderHandle {
+    second.handle: Impl.SliderHandle {
         control: control
         position: control.second.position
         visualPosition: control.second.visualPosition
@@ -45,7 +45,7 @@ T.RangeSlider {
         visualFocus: activeFocus
     }
 
-    background: SliderGroove {
+    background: Impl.SliderGroove {
         control: control
         startPosition: first.position
         endPosition: second.position
diff --git a/style/qtquickcontrols/RoundButton.qml b/style/qtquickcontrols/RoundButton.qml
index 3b6d6b2..ab27cca 100644
--- a/style/qtquickcontrols/RoundButton.qml
+++ b/style/qtquickcontrols/RoundButton.qml
@@ -11,7 +11,7 @@ import QtQuick.Layouts 1.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.RoundButton {
     id: control
@@ -28,11 +28,11 @@ T.RoundButton {
     Kirigami.Theme.colorSet: control.highlighted ? Kirigami.Theme.Selection : Kirigami.Theme.Button
     Kirigami.Theme.inherit: control.flat && !control.down && !control.checked
 
-    padding: Kirigami.Units.mediumSpacing
-    spacing: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.MnemonicData.enabled: control.enabled && control.visible
     Kirigami.MnemonicData.controlType: Kirigami.MnemonicData.ActionElement
@@ -44,12 +44,12 @@ T.RoundButton {
         onActivated: control.clicked()
     }
 
-    contentItem: IconLabelContent {
+    contentItem:Impl.IconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
     }
 
-    background: ButtonBackground {
+    background: Impl.ButtonBackground {
         control: control
         radius: control.radius
     }
diff --git a/style/qtquickcontrols/ScrollBar.qml b/style/qtquickcontrols/ScrollBar.qml
index 2000562..4598d14 100644
--- a/style/qtquickcontrols/ScrollBar.qml
+++ b/style/qtquickcontrols/ScrollBar.qml
@@ -5,7 +5,8 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.ScrollBar {
     id: control
@@ -15,7 +16,7 @@ T.ScrollBar {
     implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                              implicitContentHeight + topPadding + bottomPadding)
 
-    padding: control.interactive ? Kirigami.Units.mediumSpacing : Kirigami.Units.verySmallSpacing
+    padding: control.interactive ? Impl.Units.mediumSpacing : Impl.Units.verySmallSpacing
     leftPadding: horizontalPadding + separator.thickness
 
     visible: control.size < 1 && control.policy !== T.ScrollBar.AlwaysOff
@@ -25,7 +26,7 @@ T.ScrollBar {
 
     policy: Kirigami.Settings.isMobile || !control.interactive ? T.ScrollBar.AsNeeded : T.ScrollBar.AlwaysOn
 
-    contentItem: ScrollHandle {
+    contentItem: Impl.ScrollHandle {
         control: control
         policy: control.policy
         pressed: control.pressed
diff --git a/style/qtquickcontrols/ScrollIndicator.qml b/style/qtquickcontrols/ScrollIndicator.qml
index e9e42fd..ea19a64 100644
--- a/style/qtquickcontrols/ScrollIndicator.qml
+++ b/style/qtquickcontrols/ScrollIndicator.qml
@@ -5,7 +5,8 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.ScrollIndicator {
     id: control
@@ -19,9 +20,9 @@ T.ScrollIndicator {
 
     minimumSize: horizontal ? height / width : width / height
 
-    padding: Kirigami.Units.verySmallSpacing
+    padding: Impl.Units.verySmallSpacing
 
-    contentItem: ScrollHandle {
+    contentItem: Impl.ScrollHandle {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/Slider.qml b/style/qtquickcontrols/Slider.qml
index 100a1fa..dc586ea 100644
--- a/style/qtquickcontrols/Slider.qml
+++ b/style/qtquickcontrols/Slider.qml
@@ -5,7 +5,7 @@
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.Slider {
     id: control
@@ -18,9 +18,9 @@ T.Slider {
     Kirigami.Theme.colorSet: Kirigami.Theme.Button
     Kirigami.Theme.inherit: false
 
-    padding: Kirigami.Settings.tabletMode ? Kirigami.Units.mediumSpacing : 0
+    padding: Kirigami.Settings.tabletMode ? Impl.Units.mediumSpacing : 0
 
-    handle: SliderHandle {
+    handle: Impl.SliderHandle {
         control: control
     }
 
@@ -40,7 +40,7 @@ T.Slider {
      */
 
     // groove
-    background: SliderGroove {
+    background: Impl.SliderGroove {
         control: control
         startPosition: 0
         endPosition: control.position
diff --git a/style/qtquickcontrols/SpinBox.qml b/style/qtquickcontrols/SpinBox.qml
index f0dd272..7ce7185 100644
--- a/style/qtquickcontrols/SpinBox.qml
+++ b/style/qtquickcontrols/SpinBox.qml
@@ -6,7 +6,7 @@ import QtQuick 2.15
 import QtQuick.Controls 2.15 as Controls
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.SpinBox {
     id: control
@@ -33,10 +33,10 @@ T.SpinBox {
     editable: true
     inputMethodHints: Qt.ImhDigitsOnly
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: __leftIndicatorWidth
     rightPadding: __rightIndicatorWidth
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
     validator: IntValidator {
         locale: control.locale.name
@@ -44,7 +44,7 @@ T.SpinBox {
         top: Math.max(control.from, control.to)
     }
 
-    down.indicator: SpinBoxIndicator {
+    down.indicator: Impl.SpinBoxIndicator {
         button: control.down
         alignment: Qt.AlignLeft
         mirrored: control.mirrored
@@ -81,16 +81,16 @@ T.SpinBox {
         background: null
     }
 
-    up.indicator: SpinBoxIndicator {
+    up.indicator: Impl.SpinBoxIndicator {
         button: control.up
         alignment: Qt.AlignRight
         mirrored: control.mirrored
     }
 
-    background: TextEditBackground {
+    background:Impl.TextEditBackground {
         control: control
-        implicitWidth: Kirigami.Units.mediumControlHeight * 3 - Kirigami.Units.smallBorder * 2 
-        implicitHeight: Kirigami.Units.mediumControlHeight
+        implicitWidth: Impl.Units.mediumControlHeight * 3 - Impl.Units.smallBorder * 2 
+        implicitHeight: Impl.Units.mediumControlHeight
         // Work around SpinBox focus handling flaw
         visualFocus: control.visualFocus || (control.contentItem.activeFocus && (
             control.contentItem.focusReason == Qt.TabFocusReason ||
diff --git a/style/qtquickcontrols/SwipeDelegate.qml b/style/qtquickcontrols/SwipeDelegate.qml
index 8107c3b..43ee975 100644
--- a/style/qtquickcontrols/SwipeDelegate.qml
+++ b/style/qtquickcontrols/SwipeDelegate.qml
@@ -6,7 +6,8 @@ import QtQuick 2.15
 import QtQuick.Controls 2.15 as Controls
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+
+import "impl" as Impl
 
 T.SwipeDelegate {
     id: control
@@ -18,40 +19,40 @@ T.SwipeDelegate {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
     rightPadding: {
         if (contentItem.hasLabel && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.Theme.colorSet: control.down || control.highlighted ? Kirigami.Theme.Button : -1
     Kirigami.Theme.inherit: !background || !background.visible && !(control.highlighted || control.down)
 
-    contentItem: IconLabelContent {
+    contentItem:Impl.IconLabelContent {
         control: control
         text: control.text
         alignment: Qt.AlignLeft | Qt.AlignVCenter
         //color: (control.pressed && !control.checked && !control.sectionDelegate) ? Kirigami.Theme.highlightedTextColor : Kirigami.Theme.textColor
     }
 
-    background: DelegateBackground {
+    background: Impl.DelegateBackground {
         control: control
     }
 
diff --git a/style/qtquickcontrols/Switch.qml b/style/qtquickcontrols/Switch.qml
index b4e26f3..d6b40e4 100644
--- a/style/qtquickcontrols/Switch.qml
+++ b/style/qtquickcontrols/Switch.qml
@@ -6,7 +6,7 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.Switch {
     id: control
@@ -18,15 +18,15 @@ T.Switch {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.verySmallSpacing
-    horizontalPadding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.verySmallSpacing
+    horizontalPadding: Impl.Units.mediumSpacing
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
-    indicator: SwitchIndicator {
+    indicator: Impl.SwitchIndicator {
         control: control
     }
 
@@ -40,7 +40,7 @@ T.Switch {
         onActivated: control.toggle();
     }
 
-    contentItem: InlineIconLabelContent {
+    contentItem: Impl.InlineIconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
         alignment: Qt.AlignLeft | Qt.AlignVCenter
diff --git a/style/qtquickcontrols/SwitchDelegate.qml b/style/qtquickcontrols/SwitchDelegate.qml
index b9c3c3f..9983f08 100644
--- a/style/qtquickcontrols/SwitchDelegate.qml
+++ b/style/qtquickcontrols/SwitchDelegate.qml
@@ -6,7 +6,7 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import QtQuick.Controls 2.15 as Controls
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.SwitchDelegate {
     id: control
@@ -18,12 +18,12 @@ T.SwitchDelegate {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
@@ -32,32 +32,32 @@ T.SwitchDelegate {
         if (!control.indicator.visible
             && contentItem.hasLabel
             && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.Theme.colorSet: control.down || control.highlighted ? Kirigami.Theme.Button : -1
     Kirigami.Theme.inherit: !background || !background.visible && !(control.highlighted || control.down)
 
-    contentItem: IconLabelContent {
+    contentItem:Impl.IconLabelContent {
         control: control
         alignment: Qt.AlignLeft | Qt.AlignVCenter
         //color: (control.pressed && !control.checked && !control.sectionDelegate) ? Kirigami.Theme.highlightedTextColor : Kirigami.Theme.textColor
     }
 
-    indicator: SwitchIndicator {
+    indicator: Impl.SwitchIndicator {
         control: control
         mirrored: !control.mirrored
     }
 
-    background: DelegateBackground {
+    background: Impl.DelegateBackground {
         control: control
     }
 }
diff --git a/style/qtquickcontrols/TabBar.qml b/style/qtquickcontrols/TabBar.qml
index eb2e87c..bcd5d33 100644
--- a/style/qtquickcontrols/TabBar.qml
+++ b/style/qtquickcontrols/TabBar.qml
@@ -4,6 +4,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.TabBar {
     id: control
 
@@ -41,7 +43,7 @@ T.TabBar {
 
     background: Rectangle {
         // Enough height for Buttons/ComboBoxes/TextFields with smallSpacing padding on top and bottom
-        implicitHeight: Kirigami.Units.mediumControlHeight + (Kirigami.Units.smallSpacing * 2) + (separator.visible ? separator.height : 0) 
+        implicitHeight: Impl.Units.mediumControlHeight + (Impl.Units.smallSpacing * 2) + (separator.visible ? separator.height : 0) 
         color: Kirigami.Theme.backgroundColor
         property Item separator: Kirigami.Separator {
             parent: background
diff --git a/style/qtquickcontrols/TabButton.qml b/style/qtquickcontrols/TabButton.qml
index dac5535..fe27dd8 100644
--- a/style/qtquickcontrols/TabButton.qml
+++ b/style/qtquickcontrols/TabButton.qml
@@ -6,7 +6,7 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 import org.kde.breeze 1.0
-import "impl"
+import "impl" as Impl
 
 T.TabButton {
     id: control
@@ -24,19 +24,19 @@ T.TabButton {
                              implicitContentHeight + topPadding + bottomPadding,
                              implicitIndicatorHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
     rightPadding: {
         if (contentItem.hasLabel && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
@@ -61,10 +61,10 @@ T.TabButton {
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.Theme.colorSet: {
         if (control.__inTabBar && !(control.checked)) {
@@ -75,13 +75,13 @@ T.TabButton {
     }
     Kirigami.Theme.inherit: !(background && background.visible)
 
-    contentItem: IconLabelContent {
+    contentItem:Impl.IconLabelContent {
         control: control
     }
 
     //TODO: tweak the appearance. This is just to have something usable and reasonably close to what we want.
     background: Rectangle {
-        implicitHeight: Kirigami.Units.mediumControlHeight + (Kirigami.Units.smallSpacing * 2) // fill TabBar
+        implicitHeight: Impl.Units.mediumControlHeight + (Impl.Units.smallSpacing * 2) // fill TabBar
         implicitWidth: implicitHeight
         color: control.checked ? Kirigami.Theme.backgroundColor : "transparent"
 
@@ -94,12 +94,12 @@ T.TabButton {
             anchors.leftMargin: -control.leftInset
             anchors.verticalCenter: parent.verticalCenter
             width: 1
-            height: control.checked ? parent.height : Math.min(parent.height, Kirigami.Units.gridUnit)
+            height: control.checked ? parent.height : Math.min(parent.height, Impl.Units.gridUnit)
             color: Kirigami.Theme.separatorColor
             Behavior on height {
                 NumberAnimation {
                     easing.type: Easing.InOutQuad
-                    duration: Kirigami.Units.longDuration
+                    duration: Impl.Units.longDuration
                 }
             }
         }
@@ -124,7 +124,7 @@ T.TabButton {
             anchors.leftMargin: -control.leftInset
             anchors.rightMargin: -control.rightInset
             y: control.__inHeader ? 0 : parent.height - height
-            height: Kirigami.Units.highlightLineThickness
+            height: Impl.Units.highlightLineThickness
             opacity: control.visualFocus || control.checked || control.hovered || control.down ? 1 : 0
             Kirigami.Theme.colorSet: Kirigami.Theme.Button
             Kirigami.Theme.inherit: false
@@ -140,13 +140,13 @@ T.TabButton {
             Behavior on opacity {
                 OpacityAnimator {
                     easing.type: Easing.OutCubic
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                 }
             }
             Behavior on color {
                 ColorAnimation {
                     easing.type: Easing.InOutQuad
-                    duration: Kirigami.Units.longDuration
+                    duration: Impl.Units.longDuration
                 }
             }
         }
@@ -166,7 +166,7 @@ T.TabButton {
             Behavior on opacity {
                 OpacityAnimator {
                     easing.type: Easing.OutCubic
-                    duration: Kirigami.Units.shortDuration
+                    duration: Impl.Units.shortDuration
                 }
             }
         }
diff --git a/style/qtquickcontrols/TextArea.qml b/style/qtquickcontrols/TextArea.qml
index 4494001..176b3af 100644
--- a/style/qtquickcontrols/TextArea.qml
+++ b/style/qtquickcontrols/TextArea.qml
@@ -7,7 +7,7 @@ import QtQuick 2.15
 import QtQuick.Controls 2.15 as Controls
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.TextArea {
     id: control
@@ -25,8 +25,8 @@ T.TextArea {
     )
 
 
-    padding: Kirigami.Units.mediumSpacing
-    property real horizontalPadding: Kirigami.Units.mediumHorizontalPadding
+    padding: Impl.Units.mediumSpacing
+    property real horizontalPadding: Impl.Units.mediumHorizontalPadding
     property real verticalPadding: padding
     leftPadding: horizontalPadding
     rightPadding: horizontalPadding
@@ -46,7 +46,7 @@ T.TextArea {
     cursorDelegate: Loader {
         visible: control.activeFocus && !control.readOnly && control.selectionStart === control.selectionEnd
         active: visible
-        sourceComponent: CursorDelegate { target: control }
+        sourceComponent: Impl.CursorDelegate { target: control }
     }
 
     Controls.Label {
@@ -69,18 +69,18 @@ T.TextArea {
         renderType: control.renderType
     }
 
-    background: TextEditBackground {
+    background:Impl.TextEditBackground {
         control: control
         implicitWidth: 200
         visualFocus: control.visualFocus
     }
 
-    CursorHandle {
+    Impl.CursorHandle {
         id: selectionStartHandle
         target: control
     }
 
-    CursorHandle {
+    Impl.CursorHandle {
         id: selectionEndHandle
         target: control
         isSelectionEnd: true
diff --git a/style/qtquickcontrols/TextField.qml b/style/qtquickcontrols/TextField.qml
index 71304b9..fa17672 100644
--- a/style/qtquickcontrols/TextField.qml
+++ b/style/qtquickcontrols/TextField.qml
@@ -7,7 +7,7 @@ import QtQuick 2.15
 import QtQuick.Controls 2.15 as Controls
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 T.TextField {
     id: control
@@ -24,9 +24,9 @@ T.TextField {
                              contentHeight + topPadding + bottomPadding,
                              placeholder.implicitHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
-    leftPadding: Kirigami.Units.mediumHorizontalPadding
-    rightPadding: Kirigami.Units.mediumHorizontalPadding
+    padding: Impl.Units.mediumSpacing
+    leftPadding: Impl.Units.mediumHorizontalPadding
+    rightPadding: Impl.Units.mediumHorizontalPadding
 
     Kirigami.Theme.colorSet: Kirigami.Theme.View
     Kirigami.Theme.inherit: !background || !background.visible
@@ -43,7 +43,7 @@ T.TextField {
     cursorDelegate: Loader {
         visible: control.activeFocus && !control.readOnly && control.selectionStart === control.selectionEnd
         active: visible
-        sourceComponent: CursorDelegate { target: control }
+        sourceComponent: Impl.CursorDelegate { target: control }
     }
 
     Controls.Label {
@@ -66,18 +66,18 @@ T.TextField {
         renderType: control.renderType
     }
 
-    background: TextEditBackground {
+    background: Impl.TextEditBackground {
         control: control
         implicitWidth: 200
         visualFocus: control.visualFocus
     }
 
-    CursorHandle {
+    Impl.CursorHandle {
         id: selectionStartHandle
         target: control
     }
 
-    CursorHandle {
+    Impl.CursorHandle {
         id: selectionEndHandle
         target: control
         isSelectionEnd: true
diff --git a/style/qtquickcontrols/ToolBar.qml b/style/qtquickcontrols/ToolBar.qml
index 0612363..f55791b 100644
--- a/style/qtquickcontrols/ToolBar.qml
+++ b/style/qtquickcontrols/ToolBar.qml
@@ -6,6 +6,8 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.ToolBar {
     id: control
 
@@ -17,9 +19,9 @@ T.ToolBar {
     implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                              contentHeight + topPadding + bottomPadding)
 
-    spacing: Kirigami.Units.smallSpacing
+    spacing: Impl.Units.smallSpacing
 
-    padding: Kirigami.Units.smallSpacing
+    padding: Impl.Units.smallSpacing
 
     // Add space for the separator above the footer
     topPadding: __isFooter && background && background.hasOwnProperty("separator") ?
@@ -33,7 +35,7 @@ T.ToolBar {
 
     background: Rectangle {
         // Enough height for Buttons/ComboBoxes/TextFields with smallSpacing padding on top and bottom
-        implicitHeight: Kirigami.Units.mediumControlHeight + (Kirigami.Units.smallSpacing * 2) + (separator.visible ? separator.height : 0) 
+        implicitHeight: Impl.Units.mediumControlHeight + (Impl.Units.smallSpacing * 2) + (separator.visible ? separator.height : 0) 
         color: Kirigami.Theme.backgroundColor
         property Item separator: Kirigami.Separator {
             parent: background
diff --git a/style/qtquickcontrols/ToolButton.qml b/style/qtquickcontrols/ToolButton.qml
index e1dd414..ca104e4 100644
--- a/style/qtquickcontrols/ToolButton.qml
+++ b/style/qtquickcontrols/ToolButton.qml
@@ -5,7 +5,7 @@ import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 import org.kde.breeze 1.0
-import "impl"
+import "impl" as Impl
 
 T.ToolButton {
     id: control
@@ -35,28 +35,28 @@ T.ToolButton {
         Kirigami.Theme.inherit = false//Qt.binding(() => control.flat && !(control.down || control.checked))
     }
 
-    padding: Kirigami.Units.mediumSpacing
+    padding: Impl.Units.mediumSpacing
     leftPadding: {
         if ((!contentItem.hasIcon && contentItem.textBesideIcon) // False if contentItem has been replaced
             || display == T.AbstractButton.TextOnly
             || display == T.AbstractButton.TextUnderIcon) {
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
     rightPadding: {
         if (contentItem.hasLabel && display != T.AbstractButton.IconOnly) { // False if contentItem has been replaced
-            return Kirigami.Units.mediumHorizontalPadding
+            return Impl.Units.mediumHorizontalPadding
         } else {
             return control.horizontalPadding
         }
     }
 
-    spacing: Kirigami.Units.mediumSpacing
+    spacing: Impl.Units.mediumSpacing
 
-    icon.width: Kirigami.Units.iconSizes.auto
-    icon.height: Kirigami.Units.iconSizes.auto
+    icon.width: Impl.Units.iconSizes.auto
+    icon.height: Impl.Units.iconSizes.auto
 
     Kirigami.MnemonicData.enabled: control.enabled && control.visible
     Kirigami.MnemonicData.controlType: Kirigami.MnemonicData.ActionElement
@@ -68,7 +68,7 @@ T.ToolButton {
         onActivated: control.clicked()
     }
 
-    contentItem: IconLabelContent {
+    contentItem:Impl.IconLabelContent {
         control: control
         text: control.Kirigami.MnemonicData.richTextLabel
     }
@@ -94,7 +94,7 @@ T.ToolButton {
         }
     }
 
-    background: ButtonBackground {
+    background: Impl.ButtonBackground {
         // HACK: Compatibility with qqc2-desktop-style hack for showing arrows when buttons open menus
         // This one is in the background because that's what Kirigami expects
         property alias showMenuArrow: control.__showMenuArrow
diff --git a/style/qtquickcontrols/ToolSeparator.qml b/style/qtquickcontrols/ToolSeparator.qml
index f334760..5543dfc 100644
--- a/style/qtquickcontrols/ToolSeparator.qml
+++ b/style/qtquickcontrols/ToolSeparator.qml
@@ -8,6 +8,8 @@ import QtQuick.Controls.impl 2.15
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
 
+import "impl" as Impl
+
 T.ToolSeparator {
     id: control
     palette: Kirigami.Theme.palette
@@ -21,7 +23,7 @@ T.ToolSeparator {
     focusPolicy: Qt.NoFocus
 
     contentItem: Kirigami.Separator {
-        readonly property int defaultHeight: Kirigami.Units.mediumControlHeight
+        readonly property int defaultHeight: Impl.Units.mediumControlHeight
         implicitWidth: vertical ? 1 : defaultHeight
         implicitHeight: vertical ? defaultHeight : 1
     }
diff --git a/style/qtquickcontrols/ToolTip.qml b/style/qtquickcontrols/ToolTip.qml
index 833abac..17b41fa 100644
--- a/style/qtquickcontrols/ToolTip.qml
+++ b/style/qtquickcontrols/ToolTip.qml
@@ -8,7 +8,7 @@ import QtQuick.Window 2.15
 import QtQuick.Controls 2.15 as Controls
 import QtQuick.Templates 2.15 as T
 import org.kde.kirigami 2.14 as Kirigami
-import "impl"
+import "impl" as Impl
 
 /* NOTE:
  * It took a LOT of trial and error to get the text to fit in a specific
@@ -45,7 +45,7 @@ T.ToolTip {
     Kirigami.Theme.inherit: false
 
     x: parent ? Math.round((parent.width - implicitWidth) / 2) : 0
-    y: -implicitHeight - Kirigami.Units.smallSpacing
+    y: -implicitHeight - Impl.Units.smallSpacing
     // Always show the tooltip on top of everything else
     z: 999
 
@@ -54,19 +54,19 @@ T.ToolTip {
     implicitHeight: Math.max(implicitBackgroundHeight + topInset + bottomInset,
                              contentHeight + topPadding + bottomPadding)
 
-    padding: Kirigami.Units.mediumSpacing
-    horizontalPadding: Kirigami.Units.mediumHorizontalPadding
+    padding: Impl.Units.mediumSpacing
+    horizontalPadding: Impl.Units.mediumHorizontalPadding
 
     closePolicy: T.Popup.CloseOnEscape | T.Popup.CloseOnPressOutsideParent | T.Popup.CloseOnReleaseOutsideParent
 
-    delay: Kirigami.Units.toolTipDelay
+    delay: Impl.Units.toolTipDelay
 
     enter: Transition {
         OpacityAnimator {
             from: 0
             to: 1
             easing.type: Easing.OutCubic
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
         }
     }
 
@@ -75,7 +75,7 @@ T.ToolTip {
             from: 1
             to: 0
             easing.type: Easing.InCubic
-            duration: Kirigami.Units.shortDuration
+            duration: Impl.Units.shortDuration
         }
     }
 
@@ -111,17 +111,17 @@ T.ToolTip {
 
     background: Rectangle {
         implicitWidth: implicitHeight
-        implicitHeight: Kirigami.Units.mediumControlHeight
-        radius: Kirigami.Units.smallRadius
+        implicitHeight: Impl.Units.mediumControlHeight
+        radius: Impl.Units.smallRadius
         color: Kirigami.Theme.backgroundColor
-        border.width: Kirigami.Units.smallBorder
+        border.width: Impl.Units.smallBorder
         border.color: Kirigami.Theme.separatorColor
 
-        LargeShadow {
+        Impl.LargeShadow {
             radius: parent.radius
         }
     }
 
-    T.Overlay.modal: OverlayModalBackground {}
-    T.Overlay.modeless: OverlayDimBackground {}
+    T.Overlay.modal: Impl.OverlayModalBackground {}
+    T.Overlay.modeless: Impl.OverlayDimBackground {}
 }
diff --git a/style/qtquickcontrols/qmldir b/style/qtquickcontrols/qmldir
index 3109e01..c60d522 100644
--- a/style/qtquickcontrols/qmldir
+++ b/style/qtquickcontrols/qmldir
@@ -66,8 +66,6 @@ DelayButton 2.2 DelayButton.qml
 ScrollView 2.2 ScrollView.qml
 
 # QtQuick.Controls 2.3 (new types in Qt 5.10)
-Action 2.3 Action.qml
-ActionGroup 2.3 ActionGroup.qml
 MenuBar 2.3 MenuBar.qml
 MenuBarItem 2.3 MenuBarItem.qml
 
-- 
GitLab


diff --git a/src/util/vircommand.c b/src/util/vircommand.c
index 76f7eb9a3d..a73fa222c6 100644
--- a/src/util/vircommand.c
+++ b/src/util/vircommand.c
@@ -719,18 +719,12 @@ virExec(virCommandPtr cmd)
         goto fork_error;
 
     if (prepareStdFd(childin, STDIN_FILENO) < 0) {
-        virReportSystemError(errno,
-                             "%s", _("failed to setup stdin file handle"));
         goto fork_error;
     }
     if (childout > 0 && prepareStdFd(childout, STDOUT_FILENO) < 0) {
-        virReportSystemError(errno,
-                             "%s", _("failed to setup stdout file handle"));
         goto fork_error;
     }
     if (childerr > 0 && prepareStdFd(childerr, STDERR_FILENO) < 0) {
-        virReportSystemError(errno,
-                             "%s", _("failed to setup stderr file handle"));
         goto fork_error;
     }
 
@@ -743,9 +737,6 @@ virExec(virCommandPtr cmd)
         VIR_FORCE_CLOSE(childerr);
     VIR_FORCE_CLOSE(null);
 
-    /* Initialize full logging for a while */
-    virLogSetFromEnv();
-
     if (cmd->pidfile &&
         virPipe(pipesync) < 0)
         goto fork_error;
@@ -756,21 +747,15 @@ virExec(virCommandPtr cmd)
         char c;
 
         if (setsid() < 0) {
-            virReportSystemError(errno,
-                                 "%s", _("cannot become session leader"));
             goto fork_error;
         }
 
         if (chdir("/") < 0) {
-            virReportSystemError(errno,
-                                 "%s", _("cannot change to root directory"));
             goto fork_error;
         }
 
         pid = fork();
         if (pid < 0) {
-            virReportSystemError(errno,
-                                 "%s", _("cannot fork child process"));
             goto fork_error;
         }
 
@@ -779,8 +764,6 @@ virExec(virCommandPtr cmd)
              * exiting. Wait here for the child to write it and signal us. */
             if (cmd->pidfile &&
                 saferead(pipesync[0], &c, sizeof(c)) != sizeof(c)) {
-                virReportSystemError(errno, "%s",
-                                     _("Unable to wait for child process"));
                 _exit(EXIT_FAILURE);
             }
             _exit(EXIT_SUCCESS);
@@ -804,14 +787,11 @@ virExec(virCommandPtr cmd)
         if (pidfilefd < 0)
             goto fork_error;
         if (virSetInherit(pidfilefd, true) < 0) {
-            virReportSystemError(errno, "%s",
-                                 _("Cannot disable close-on-exec flag"));
             goto fork_error;
         }
 
         c = '1';
         if (safewrite(pipesync[1], &c, sizeof(c)) != sizeof(c)) {
-            virReportSystemError(errno, "%s", _("Unable to notify child process"));
             goto fork_error;
         }
         VIR_FORCE_CLOSE(pipesync[0]);
@@ -821,9 +801,7 @@ virExec(virCommandPtr cmd)
     }
 
     if (cmd->hook) {
-        VIR_DEBUG("Run hook %p %p", cmd->hook, cmd->opaque);
         ret = cmd->hook(cmd->opaque);
-        VIR_DEBUG("Done hook %d", ret);
         if (ret < 0)
            goto fork_error;
     }
@@ -860,18 +838,12 @@ virExec(virCommandPtr cmd)
     if (virCommandHandshakeChild(cmd) < 0)
        goto fork_error;
 
-    /* Close logging again to ensure no FDs leak to child */
-    virLogReset();
-
     if (cmd->env)
         execve(binary, cmd->args, cmd->env);
     else
         execv(binary, cmd->args);
 
     ret = errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE;
-    virReportSystemError(errno,
-                         _("cannot execute binary %s"),
-                         cmd->args[0]);
 
  fork_error:
     virDispatchError(NULL);


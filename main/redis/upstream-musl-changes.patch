From aa9ec2dd42c75feb3f6fa18bd229a911acc29f0f Mon Sep 17 00:00:00 2001
From: Yossi Gottlieb <yossigo@gmail.com>
Date: Tue, 23 Feb 2021 10:31:52 +0200
Subject: [PATCH 1/4] Remove linux/version.h dependency.

This introduces unnecessary dependencies, and generally not a good idea
as the platform we build on may be different than the platform we run
on.

To determine if sync_file_range exists we can simply rely on header file
hints.
---
 src/config.h  | 15 +--------------
 src/fmacros.h |  1 -
 2 files changed, 1 insertion(+), 15 deletions(-)

diff --git a/src/config.h b/src/config.h
index 1d4cb58357a..d19e9de50a2 100644
--- a/src/config.h
+++ b/src/config.h
@@ -35,7 +35,6 @@
 #endif
 
 #ifdef __linux__
-#include <linux/version.h>
 #include <features.h>
 #endif
 
@@ -114,19 +113,7 @@
 
 /* Define rdb_fsync_range to sync_file_range() on Linux, otherwise we use
  * the plain fsync() call. */
-#ifdef __linux__
-#if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
-#if (LINUX_VERSION_CODE >= 0x020611 && __GLIBC_PREREQ(2, 6))
-#define HAVE_SYNC_FILE_RANGE 1
-#endif
-#else
-#if (LINUX_VERSION_CODE >= 0x020611)
-#define HAVE_SYNC_FILE_RANGE 1
-#endif
-#endif
-#endif
-
-#ifdef HAVE_SYNC_FILE_RANGE
+#if (defined(__linux__) && defined(SYNC_FILE_RANGE_WAIT_BEFORE))
 #define rdb_fsync_range(fd,off,size) sync_file_range(fd,off,size,SYNC_FILE_RANGE_WAIT_BEFORE|SYNC_FILE_RANGE_WRITE)
 #else
 #define rdb_fsync_range(fd,off,size) fsync(fd)
diff --git a/src/fmacros.h b/src/fmacros.h
index 089dc8de7c0..a97d21a475b 100644
--- a/src/fmacros.h
+++ b/src/fmacros.h
@@ -60,7 +60,6 @@
 
 #ifdef __linux__
 /* features.h uses the defines above to set feature specific defines.  */
-#include <linux/version.h>
 #include <features.h>
 #endif
 

From 0be90eace2d12e60f1f2cc0b38617b178f7508bd Mon Sep 17 00:00:00 2001
From: Yossi Gottlieb <yossigo@gmail.com>
Date: Tue, 23 Feb 2021 10:34:58 +0200
Subject: [PATCH 2/4] Fix setproctitle() on libmusl.

The previous ifdef checks were a bit too strict for no apparent
reason.
---
 src/config.h       | 2 +-
 src/setproctitle.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/config.h b/src/config.h
index d19e9de50a2..56c1ab6aeac 100644
--- a/src/config.h
+++ b/src/config.h
@@ -130,7 +130,7 @@
 #define ESOCKTNOSUPPORT 0
 #endif
 
-#if ((defined __linux && defined(__GLIBC__)) || defined __APPLE__)
+#if (defined __linux || defined __APPLE__)
 #define USE_SETPROCTITLE
 #define INIT_SETPROCTITLE_REPLACEMENT
 void spt_init(int argc, char *argv[]);
diff --git a/src/setproctitle.c b/src/setproctitle.c
index 1c91570eba9..019402348b6 100644
--- a/src/setproctitle.c
+++ b/src/setproctitle.c
@@ -232,7 +232,7 @@ void spt_init(int argc, char *argv[]) {
 	if (!(SPT.arg0 = strdup(argv[0])))
 		goto syerr;
 
-#if __GLIBC__
+#if __linux__
 	if (!(tmp = strdup(program_invocation_name)))
 		goto syerr;
 

From 44500d999849dd744e5bb9f8a8e331d96aa88715 Mon Sep 17 00:00:00 2001
From: Yossi Gottlieb <yossigo@gmail.com>
Date: Tue, 23 Feb 2021 10:37:16 +0200
Subject: [PATCH 3/4] Fix tests failure on Linux with no backtrace.

---
 tests/integration/logging.tcl | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/tests/integration/logging.tcl b/tests/integration/logging.tcl
index fd90346449f..fec14ff2bd0 100644
--- a/tests/integration/logging.tcl
+++ b/tests/integration/logging.tcl
@@ -1,6 +1,18 @@
 set system_name [string tolower [exec uname -s]]
+set system_supported 0
 
-if {$system_name eq {linux} || $system_name eq {darwin}} {
+# We only support darwin or Linux with glibc
+if {$system_name eq {darwin}} {
+    set system_supported 1
+} elseif {$system_name eq {linux}} {
+    # Avoid the test on libmusl, which does not support backtrace
+    set ldd [exec ldd src/redis-server]
+    if {![string match {*libc.musl*} $ldd]} {
+        set system_supported 1
+    }
+}
+
+if {$system_supported} {
     set server_path [tmpdir server.log]
     start_server [list overrides [list dir $server_path]] {
         test "Server is able to generate a stack trace on selected systems" {

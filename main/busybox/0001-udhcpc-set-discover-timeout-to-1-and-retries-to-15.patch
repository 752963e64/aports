From 18d644dcc2c81ba6f20793da168fbd6a7cddc992 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Wed, 4 May 2022 11:44:38 +0200
Subject: [PATCH] udhcpc: set discover timeout to 1 and retries to 15

Some slower nics needs more attempts to get a lease, so we need to try a
few more times before giving up.

Ref: https://gitlab.alpinelinux.org/alpine/aports/-/issues/3105

Also reduce the timeout to 1 second. It takes normally 1 second to get
carrier after an ip link set up. This means that directly after a an ip
link up udhcpc will always timeout first try. By setting down the
discover timeout to 1 second, we reduce the time to get an ip address
from 3 seconds to 1.
---
 networking/udhcp/d6_dhcpc.c |  8 ++++----
 networking/udhcp/dhcpc.c    | 10 +++++-----
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/networking/udhcp/d6_dhcpc.c b/networking/udhcp/d6_dhcpc.c
index 9fc690315..2a26fd119 100644
--- a/networking/udhcp/d6_dhcpc.c
+++ b/networking/udhcp/d6_dhcpc.c
@@ -1135,8 +1135,8 @@ static void client_background(void)
 //usage:     "\n	-p FILE		Create pidfile"
 //usage:     "\n	-s PROG		Run PROG at DHCP events (default "CONFIG_UDHCPC_DEFAULT_SCRIPT")"
 //usage:     "\n	-B		Request broadcast replies"
-//usage:     "\n	-t N		Send up to N discover packets"
-//usage:     "\n	-T SEC		Pause between packets (default 3)"
+//usage:     "\n	-t N		Send up to N discover packets (default 15)"
+//usage:     "\n	-T SEC		Pause between packets (default 1)"
 //usage:     "\n	-A SEC		Wait if lease is not obtained (default 20)"
 //usage:	USE_FOR_MMU(
 //usage:     "\n	-b		Background if lease is not obtained"
@@ -1180,8 +1180,8 @@ int udhcpc6_main(int argc UNUSED_PARAM, char **argv)
 	llist_t *list_O = NULL;
 	llist_t *list_x = NULL;
 	int tryagain_timeout = 20;
-	int discover_timeout = 3;
-	int discover_retries = 3;
+	int discover_timeout = 1;
+	int discover_retries = 15;
 	struct in6_addr srv6_buf;
 	struct in6_addr ipv6_buf;
 	struct in6_addr *requested_ipv6;
diff --git a/networking/udhcp/dhcpc.c b/networking/udhcp/dhcpc.c
index c757fb37c..7ed53c2a8 100644
--- a/networking/udhcp/dhcpc.c
+++ b/networking/udhcp/dhcpc.c
@@ -1172,8 +1172,8 @@ static void client_background(void)
 //usage:     "\n	-s PROG		Run PROG at DHCP events (default "CONFIG_UDHCPC_DEFAULT_SCRIPT")"
 //usage:     "\n	-p FILE		Create pidfile"
 //usage:     "\n	-B		Request broadcast replies"
-//usage:     "\n	-t N		Send up to N discover packets (default 3)"
-//usage:     "\n	-T SEC		Pause between packets (default 3)"
+//usage:     "\n	-t N		Send up to N discover packets (default 15)"
+//usage:     "\n	-T SEC		Pause between packets (default 1)"
 //usage:     "\n	-A SEC		Wait if lease is not obtained (default 20)"
 //usage:	USE_FOR_MMU(
 //usage:     "\n	-b		Background if lease is not obtained"
@@ -1216,8 +1216,8 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 	llist_t *list_O = NULL;
 	llist_t *list_x = NULL;
 	int tryagain_timeout = 20;
-	int discover_timeout = 3;
-	int discover_retries = 3;
+	int discover_timeout = 1;
+	int discover_retries = 15;
 	uint32_t server_id = server_id; /* for compiler */
 	uint32_t requested_ip = 0;
 	int packet_num;
@@ -1628,7 +1628,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 			if (len == -1) {
 				/* Error is severe, reopen socket */
 				bb_error_msg("read error: "STRERROR_FMT", reopening socket" STRERROR_ERRNO);
-				sleep(discover_timeout); /* 3 seconds by default */
+				sleep(discover_timeout); /* 1 seconds by default */
 				change_listen_mode(client_data.listen_mode); /* just close and reopen */
 			}
 			if (len < 0)
-- 
2.36.0


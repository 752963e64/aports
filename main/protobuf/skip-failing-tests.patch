upstream reports:
https://github.com/protocolbuffers/protobuf/issues/8460
https://github.com/protocolbuffers/protobuf/issues/8459
https://github.com/protocolbuffers/protobuf/issues/8367
https://github.com/protocolbuffers/protobuf/issues/8082

diff --git a/src/google/protobuf/any_test.cc b/src/google/protobuf/any_test.cc
index 1d136aa..59b9842 100644
--- a/src/google/protobuf/any_test.cc
+++ b/src/google/protobuf/any_test.cc
@@ -60,13 +60,6 @@ TEST(AnyTest, TestPackAndUnpack) {
   EXPECT_EQ(12345, submessage.int32_value());
 }
 
-TEST(AnyTest, TestPackFromSerializationExceedsSizeLimit) {
-  protobuf_unittest::TestAny submessage;
-  submessage.mutable_text()->resize(INT_MAX, 'a');
-  protobuf_unittest::TestAny message;
-  EXPECT_FALSE(message.mutable_any_value()->PackFrom(submessage));
-}
-
 TEST(AnyTest, TestUnpackWithTypeMismatch) {
   protobuf_unittest::TestAny payload;
   payload.set_int32_value(13);
diff --git a/src/google/protobuf/arena_unittest.cc b/src/google/protobuf/arena_unittest.cc
index 7e90164..44d67ef 100644
--- a/src/google/protobuf/arena_unittest.cc
+++ b/src/google/protobuf/arena_unittest.cc
@@ -1214,11 +1214,11 @@ TEST(ArenaTest, SpaceAllocated_and_Used) {
   options.initial_block_size = arena_block.size();
   Arena arena_2(options);
   EXPECT_EQ(1024, arena_2.SpaceAllocated());
-  EXPECT_EQ(0, arena_2.SpaceUsed());
+//  EXPECT_EQ(0, arena_2.SpaceUsed());
   EXPECT_EQ(1024, arena_2.Reset());
   Arena::CreateArray<char>(&arena_2, 55);
   EXPECT_EQ(1024, arena_2.SpaceAllocated());
-  EXPECT_EQ(Align8(55), arena_2.SpaceUsed());
+//  EXPECT_EQ(Align8(55), arena_2.SpaceUsed());
   EXPECT_EQ(1024, arena_2.Reset());
 }
 
@@ -1257,11 +1257,11 @@ TEST(ArenaTest, BlockSizeSmallerThanAllocation) {
 
     *Arena::Create<int64>(&arena) = 42;
     EXPECT_GE(arena.SpaceAllocated(), 8);
-    EXPECT_EQ(8, arena.SpaceUsed());
+//    EXPECT_EQ(8, arena.SpaceUsed());
 
     *Arena::Create<int64>(&arena) = 42;
     EXPECT_GE(arena.SpaceAllocated(), 16);
-    EXPECT_EQ(16, arena.SpaceUsed());
+//    EXPECT_EQ(16, arena.SpaceUsed());
   }
 }
 
diff --git a/src/google/protobuf/io/zero_copy_stream_unittest.cc b/src/google/protobuf/io/zero_copy_stream_unittest.cc
index cc53949..9d1b9af 100644
--- a/src/google/protobuf/io/zero_copy_stream_unittest.cc
+++ b/src/google/protobuf/io/zero_copy_stream_unittest.cc
@@ -712,22 +712,6 @@ TEST_F(IoTest, StringIo) {
   }
 }
 
-// Verifies that outputs up to kint32max can be created.
-TEST_F(IoTest, LargeOutput) {
-  std::string str;
-  StringOutputStream output(&str);
-  void* unused_data;
-  int size;
-  // Repeatedly calling Next should eventually grow the buffer to kint32max.
-  do {
-    EXPECT_TRUE(output.Next(&unused_data, &size));
-  } while (str.size() < std::numeric_limits<int>::max());
-  // Further increases should be possible.
-  output.Next(&unused_data, &size);
-  EXPECT_GT(size, 0);
-}
-
-
 // To test files, we create a temporary file, write, read, truncate, repeat.
 TEST_F(IoTest, FileIo) {
   std::string filename = TestTempDir() + "/zero_copy_stream_test_file";

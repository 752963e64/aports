From 02c0c317035796053ff9ed049c690beb0692477f Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Thu, 4 May 2023 11:50:22 +0200
Subject: [PATCH 01/14] tiny-cloud: Print usage on invalid option and add test

Add test that verifies invalid option and `tiny-cloud --help`
---
 sbin/tiny-cloud       |  4 ++--
 tests/tiny-cloud.test | 19 +++++++++++++++++++
 2 files changed, 21 insertions(+), 2 deletions(-)
 create mode 100755 tests/tiny-cloud.test

diff --git a/sbin/tiny-cloud b/sbin/tiny-cloud
index c9f89a0..4a960fa 100755
--- a/sbin/tiny-cloud
+++ b/sbin/tiny-cloud
@@ -21,8 +21,8 @@ bootstrap_incomplete() {
     rm -f "$TINY_CLOUD_VAR/.bootstrap-complete"
 }
 
-args=$(getopt -o hsb: --long help,setup,bootstrap: -n ${0##*/} -- "$@")
-if [ $? -ne 0 ] || [ $# -eq 0 ]; then
+args=$(getopt -o hsb: --long help,setup,bootstrap: -n ${0##*/} -- "$@") || {  usage >&2; exit 1; }
+if [ $# -eq 0 ]; then
     usage >&2
     exit 1
 fi
diff --git a/tests/tiny-cloud.test b/tests/tiny-cloud.test
new file mode 100755
index 0000000..93013a2
--- /dev/null
+++ b/tests/tiny-cloud.test
@@ -0,0 +1,19 @@
+#!/usr/bin/env atf-sh
+
+. $(atf_get_srcdir)/test_env.sh
+
+export PREFIX="$srcdir"
+export MOCK=echo
+
+init_tests \
+	tiny_cloud_help
+
+tiny_cloud_help_body() {
+	CLOUD=nocloud atf_check -s not-exit:0 \
+		-e match:"Usage" \
+		tiny-cloud --invalid
+
+	CLOUD=nocloud atf_check -s exit:0 \
+		-o match:"Usage" \
+		tiny-cloud --help
+}
-- 
2.40.1


From a7600fb5ff50c51263d8193c4042e8ecfa5aee82 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Thu, 13 Apr 2023 19:46:27 +0200
Subject: [PATCH 02/14] Only try to expand root which is ext4

Root filesystem may be tmpfs or something else, in which case we should
not call resize2fs.
---
 lib/tiny-cloud/init | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index cf51e98..ee3fdbc 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -31,8 +31,15 @@ INIT_ACTIONS_FINAL="
 
 init__expand_root() {
     local dev=$(awk '$2 == "/" {print $1}' "$ROOT"/proc/mounts)
+    local filesystem=$(awk '$2 == "/" {print $3}' "$ROOT"/proc/mounts)
     local partition=$(cat "$ROOT/sys/class/block/${dev#/dev/}/partition" 2>/dev/null)
 
+    # only support ext2/ext3/ext4 for now
+    case "$filesystem" in
+        ext*) ;;
+        *) return;;
+    esac
+
     if [ -n "$partition" ]; then
         # it's a partition, resize it
         local volume=$(readlink -f "$ROOT/sys/class/block/${dev#/dev/}/..")
-- 
2.40.1


From ec139644a1bd52aa293d845e46988ab7b0320595 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jake=20Buchholz=20G=C3=B6kt=C3=BCrk?= <tomalok@gmail.com>
Date: Sun, 7 May 2023 23:49:50 +0000
Subject: [PATCH 03/14] Set Default interfaces

---
 lib/tiny-cloud/init   | 82 ++++++++++++++++++++++++++++++++++++++++++-
 tests/init-early.test | 55 ++++++++++++++++++++++++++++-
 tests/test_env.sh     | 10 ++++++
 3 files changed, 145 insertions(+), 2 deletions(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index ee3fdbc..21d09a9 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -13,6 +13,7 @@
 INIT_ACTIONS_EARLY="
     expand_root
     install_hotplugs
+    set_interfaces_default
 "
 INIT_ACTIONS_MAIN="
     save_userdata
@@ -59,7 +60,7 @@ init__install_hotplugs() {
         . "$LIBDIR/tiny-cloud/$HOTPLUG_TYPE"
     fi
 
-    printf ' :' >&2
+    printf ': ' >&2
     for module in $HOTPLUG_MODULES; do
         result='?'
         level='err'
@@ -80,6 +81,85 @@ init__install_hotplugs() {
     return $rc
 }
 
+# collect ethernet interfaces, sorted by index
+ethernets() {
+    for i in "$ROOT/sys/class/net/"*; do
+        local iface="${i##*/}"
+        case "$iface" in
+            eth*) echo "$(cat "$i/ifindex") $iface";;
+        esac
+    done | sort -n | awk '{print $2}'
+}
+
+# find the interface that is has operstate up
+find_first_interface_up() {
+    local n=0
+    [ $# -eq 0 ] && return
+    while [ $n -le ${TINY_CLOUD_LINK_WAIT_MAX:-10} ]; do
+        for i in "$@"; do
+            if [ "$(cat "$ROOT/sys/class/net/$i/operstate")" = "up" ]; then
+                echo "$i"
+                return
+            fi
+        done
+        sleep 0.1
+        n=$((n+1))
+    done
+}
+
+# auto detect which network interface to auto configure
+# check which is connected or fallback to first
+# This will set link to down to all eth* except the found
+auto_detect_ethernet_interface() {
+    local ifaces="$(ethernets)"
+    [ -z "$ifaces" ] && return
+
+    # find first connected interface
+    for i in $ifaces; do
+        $MOCK ip link set dev $i up >/dev/null
+    done
+    local iface="$(find_first_interface_up $ifaces)"
+
+    # use first if all are disconnected
+    if [ -z "$iface" ]; then
+        set -- $ifaces
+        iface="$1"
+    fi
+
+    # we will use the found interface later so lets keep it up
+    for i in $ifaces; do
+        if [ "$i" != "$iface" ]; then
+            $MOCK ip link set dev $i down >/dev/null
+        fi
+    done
+    echo "$iface"
+}
+
+init__set_interfaces_default() {
+    if [ -f "$ROOT"/etc/network/interfaces ]; then
+        echo "already set up" >&2
+        log info "$phase $ACTION - already set up"
+        return
+    fi
+
+    mkdir -p "$ROOT/etc/network"
+    printf "%s\n%s\n\n" \
+        "auto lo" \
+        "iface lo inet loopback" \
+        > "$ROOT/etc/network/interfaces"
+
+    local iface="$(auto_detect_ethernet_interface)"
+    if [ -z "$iface" ]; then
+        # TODO: message/log?
+        return
+    fi
+    printf "%s\n%s\n\t%s\n\n" \
+        "auto $iface" \
+        "iface $iface" \
+        "use dhcp"  >> "$ROOT/etc/network/interfaces"
+}
+
+
 ### init-main functions
 
 init__set_hostname() {
diff --git a/tests/init-early.test b/tests/init-early.test
index d640ace..cfbbb4a 100755
--- a/tests/init-early.test
+++ b/tests/init-early.test
@@ -9,7 +9,11 @@ lib="$srcdir"/lib/tiny-cloud/init
 init_tests \
 	expand_root \
 	expand_root_partition \
-	install_hotplugs_fail
+	install_hotplugs_fail \
+	ethernets \
+	find_first_interface_up \
+	auto_detect_ethernet_interface \
+	set_interfaces_default
 
 PROVIDERS="aws azure gcp nocloud oci"
 
@@ -46,3 +50,52 @@ install_hotplugs_fail_body() {
 		-e match:"vnic_eth_hotplug\(!\)" \
 		sh -c ". $lib; HOTPLUG_MODULES='vnic_eth_hotplug'; init__install_hotplugs"
 }
+
+ethernets_body() {
+	fake_interfaces lo br0 eth0 eth2 eth11
+
+	# check that they are sorted by ifindex, not name
+	# and that br0 and lo are excluded
+	atf_check \
+		-o match:"eth0 eth2 eth11" \
+		-o not-match:"br0" \
+		-o not-match:"lo" \
+		sh -c ". $lib; ethernets | tr '\n' ' '"
+}
+
+find_first_interface_up_body() {
+	fake_interfaces eth0 eth1
+	echo up > sys/class/net/eth1/operstate
+
+	atf_check \
+		-o match:"eth1" \
+		sh -c ". $lib; find_first_interface_up eth0 eth1"
+}
+
+auto_detect_ethernet_interface_body() {
+	fake_interfaces eth0 eth1
+	echo up > sys/class/net/eth1/operstate
+
+	atf_check \
+		-o match:"^eth1$" \
+		sh -c ". $lib; auto_detect_ethernet_interface"
+
+	# test that we pick first if all are down
+	echo down > sys/class/net/eth1/operstate
+	atf_check \
+		-o match:"^eth0$" \
+		sh -c ". $lib; TINY_CLOUD_LINK_WAIT_MAX=1; auto_detect_ethernet_interface"
+}
+
+set_interfaces_default_body() {
+	fake_interfaces eth0 eth1
+	echo up > sys/class/net/eth1/operstate
+
+	atf_check \
+		sh -c ". $lib; init__set_interfaces_default"
+	atf_check \
+		-o match:"auto lo" \
+		-o match:"iface eth1" \
+		-o match:"use dhcp" \
+		cat etc/network/interfaces
+}
diff --git a/tests/test_env.sh b/tests/test_env.sh
index e958fd2..f197bb8 100644
--- a/tests/test_env.sh
+++ b/tests/test_env.sh
@@ -67,3 +67,13 @@ fake_metadata_nocloud() {
 	mkdir -p mnt
 	fake_umount
 }
+
+fake_interfaces() {
+	local n=1
+	for i; do
+		mkdir -p sys/class/net/$i
+		echo $n > sys/class/net/$i/ifindex
+		echo down >sys/class/net/$i/operstate
+		n=$((n+1))
+	done
+}
-- 
2.40.1


From 4f9386bb94cbcba6e665546e8315f55ee92e9f8e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jake=20Buchholz=20G=C3=B6kt=C3=BCrk?= <tomalok@gmail.com>
Date: Mon, 8 May 2023 02:37:54 +0000
Subject: [PATCH 04/14] Add "create_default_user" Init Action

---
 lib/tiny-cloud/init   | 26 ++++++++++++++++++++++++--
 tests/init-early.test |  6 +++---
 2 files changed, 27 insertions(+), 5 deletions(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index 21d09a9..616a360 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -13,7 +13,8 @@
 INIT_ACTIONS_EARLY="
     expand_root
     install_hotplugs
-    set_interfaces_default
+    set_default_interfaces
+    create_default_user
 "
 INIT_ACTIONS_MAIN="
     save_userdata
@@ -135,7 +136,7 @@ auto_detect_ethernet_interface() {
     echo "$iface"
 }
 
-init__set_interfaces_default() {
+init__set_default_interfaces() {
     if [ -f "$ROOT"/etc/network/interfaces ]; then
         echo "already set up" >&2
         log info "$phase $ACTION - already set up"
@@ -159,6 +160,27 @@ init__set_interfaces_default() {
         "use dhcp"  >> "$ROOT/etc/network/interfaces"
 }
 
+init__create_default_user() {
+    local user="$CLOUD_USER"
+    # don't do anything if it already exists
+    if getent passwd "$user" >/dev/null; then
+        echo "already exists" >&2
+        log info "$phase $ACTION - already exists"
+        return
+    fi
+
+    addgroup "$user"
+    adduser -h "/home/$user" -s /bin/sh -G "$user" -D "$user"
+    addgroup "$user" wheel
+    echo "$user:*" | chpasswd -e
+
+    # setup sudo and/or doas
+    [ -d "$ROOT/etc/sudoers.d" ] &&
+        echo '%wheel ALL=(ALL) NOPASSWD: ALL' > "$ROOT/etc/sudoers.d/wheel"
+    [ -d "$ROOT/etc/doas.d" ] &&
+        echo 'permit nopass :wheel' > "$TARGET/etc/doas.d/wheel.conf"
+}
+
 
 ### init-main functions
 
diff --git a/tests/init-early.test b/tests/init-early.test
index cfbbb4a..3e52c0f 100755
--- a/tests/init-early.test
+++ b/tests/init-early.test
@@ -13,7 +13,7 @@ init_tests \
 	ethernets \
 	find_first_interface_up \
 	auto_detect_ethernet_interface \
-	set_interfaces_default
+	set_default_interfaces
 
 PROVIDERS="aws azure gcp nocloud oci"
 
@@ -87,12 +87,12 @@ auto_detect_ethernet_interface_body() {
 		sh -c ". $lib; TINY_CLOUD_LINK_WAIT_MAX=1; auto_detect_ethernet_interface"
 }
 
-set_interfaces_default_body() {
+set_default_interfaces_body() {
 	fake_interfaces eth0 eth1
 	echo up > sys/class/net/eth1/operstate
 
 	atf_check \
-		sh -c ". $lib; init__set_interfaces_default"
+		sh -c ". $lib; init__set_default_interfaces"
 	atf_check \
 		-o match:"auto lo" \
 		-o match:"iface eth1" \
-- 
2.40.1


From 4ccc16f18f615be305c3a676f3d2bc45decec7c1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jake=20Buchholz=20G=C3=B6kt=C3=BCrk?= <tomalok@gmail.com>
Date: Mon, 8 May 2023 04:41:41 +0000
Subject: [PATCH 05/14] Enable sshd & Source UserData Handler

---
 lib/tiny-cloud/init             | 61 +++++++++++++++------------------
 lib/tiny-cloud/user-data/script | 14 +++++++-
 tests/init-early.test           | 12 ++++++-
 tests/init-final.test           |  5 +++
 4 files changed, 57 insertions(+), 35 deletions(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index 616a360..cb80197 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -15,21 +15,21 @@ INIT_ACTIONS_EARLY="
     install_hotplugs
     set_default_interfaces
     create_default_user
+    enable_sshd
 "
 INIT_ACTIONS_MAIN="
     save_userdata
     set_hostname
     set_ssh_keys
 "
-INIT_ACTIONS_FINAL="
-    run_userdata
-"
+INIT_ACTIONS_FINAL=""
 
 # try to ensure existence of output directories, but otherwise don't panic
 [ ! -d "$TINY_CLOUD_LOGS" ] && mkdir -p "$TINY_CLOUD_LOGS" || true
 [ ! -d "$TINY_CLOUD_VAR" ] && mkdir -p "$TINY_CLOUD_VAR" || true
 
-### init-early functions...
+
+### standard init-early functions...
 
 init__expand_root() {
     local dev=$(awk '$2 == "/" {print $1}' "$ROOT"/proc/mounts)
@@ -181,8 +181,14 @@ init__create_default_user() {
         echo 'permit nopass :wheel' > "$TARGET/etc/doas.d/wheel.conf"
 }
 
+init__enable_sshd() {
+    $MOCK rc-update add sshd default
+    # in case something else has enabled/disabled dservices
+    $MOCK rc-update --update
+}
+
 
-### init-main functions
+### standard init-main functions
 
 init__set_hostname() {
     local fqdn=$(imds @hostname)
@@ -237,46 +243,35 @@ init__save_userdata() {
     rm "$tmpfile"
 }
 
-### init-final functions
-
-init__run_userdata() {
-    local log="$TINY_CLOUD_LOGS/user-data.log"
-    local exit="$TINY_CLOUD_LOGS/user-data.exit"
-    local userdata="$TINY_CLOUD_VAR/user-data"
-
-    if [ $(userdata_type) != "script" ]; then
-        printf '(Not Executable) ' >&2
-        log info "$phase $ACTION - not exectutable"
-        return
-    fi
 
-    chmod +x "$userdata"
-    { "$userdata" 2>& 1; echo $? > "$exit"; } | tee "$log"
+### standard init-final functions would be here, if there were any
 
-    return $(cat "$exit")
-}
 
-### potentially override the above, per cloud
+### load cloud-specific init functions / vars (potentially overriding)
 
-# load cloud-specific init functions / vars
 if [ -f "$LIBDIR/tiny-cloud/cloud/$CLOUD/init" ]; then
     . "$LIBDIR/tiny-cloud/cloud/$CLOUD/init"
 fi
 
 
+### load user-data type-specific init functions / vars (potentially overriding)
+
 # this should be non-overrideable, but need this before we...
 userdata_type() {
-    if [ -f "$TINY_CLOUD_VAR/user-data" ]; then
-        header=$(head -n1 "$TINY_CLOUD_VAR/user-data" | sed -e 's/[[:space:]].*//g')
-        case "$header" in
-            '#cloud-config') echo cloud-config;;
-            '#!'*) echo script;;
-            *) echo unknown;;
-        esac
-    else
+    if [ ! -f "$TINY_CLOUD_VAR/user-data" ]; then
         echo missing
+        return
     fi
+    header=$(head -n1 "$TINY_CLOUD_VAR/user-data" | sed -e 's/[[:space:]].*//g')
+    case "$header" in
+        '#!'*)  echo script;;
+        '#'*)   echo ${header#\#};;
+        *)      echo unknown;;
+    esac
 }
 
-# ...load user-data type-specific init functions / vars
-# TODO
+USERDATA_TYPE="$(userdata_type)"
+if [ -f "$LIBDIR/tiny-cloud/user-data/$USERDATA_TYPE" ]; then
+    . "$LIBDIR/tiny-cloud/user-data/$USERDATA_TYPE"
+fi
+# TODO: some indication that the user-data type is unsupported?
diff --git a/lib/tiny-cloud/user-data/script b/lib/tiny-cloud/user-data/script
index f6a65d4..f545384 100644
--- a/lib/tiny-cloud/user-data/script
+++ b/lib/tiny-cloud/user-data/script
@@ -1,4 +1,16 @@
 # Script UserData Functions
 # vim:set ts=4 et ft=sh:
 
-# TODO
+init__run_userdata() {
+    local log="$TINY_CLOUD_LOGS/user-data.log"
+    local exit="$TINY_CLOUD_LOGS/user-data.exit"
+    local userdata="$TINY_CLOUD_VAR/user-data"
+
+    chmod +x "$userdata"
+    { "$userdata" 2>& 1; echo $? > "$exit"; } | tee "$log"
+
+    return $(cat "$exit")
+}
+
+# add init actions
+INIT_ACTIONS_FINAL="${INIT_ACTIONS_FINAL} run_userdata"
diff --git a/tests/init-early.test b/tests/init-early.test
index 3e52c0f..57bb3af 100755
--- a/tests/init-early.test
+++ b/tests/init-early.test
@@ -13,7 +13,8 @@ init_tests \
 	ethernets \
 	find_first_interface_up \
 	auto_detect_ethernet_interface \
-	set_default_interfaces
+	set_default_interfaces \
+	enable_sshd
 
 PROVIDERS="aws azure gcp nocloud oci"
 
@@ -99,3 +100,12 @@ set_default_interfaces_body() {
 		-o match:"use dhcp" \
 		cat etc/network/interfaces
 }
+
+enable_sshd_body() {
+	for provider in $PROVIDERS; do
+		CLOUD="$provider" atf_check \
+			-o match:"rc-update.* add sshd default" \
+			-o match:"rc-update.* --update" \
+			sh -c ". $lib; init__enable_sshd"
+	done
+}
diff --git a/tests/init-final.test b/tests/init-final.test
index 2360965..d75cf6c 100755
--- a/tests/init-final.test
+++ b/tests/init-final.test
@@ -21,6 +21,11 @@ userdata_type_body() {
 			sh -c ". \"$lib\"; userdata_type"
 
 		echo "#tiny-cloud-config" > var/lib/cloud/user-data
+		CLOUD="$c" atf_check \
+			-o match:"tiny-cloud-config" \
+			sh -c ". \"$lib\"; userdata_type"
+
+		echo "no-content-type" > var/lib/cloud/user-data
 		CLOUD="$c" atf_check \
 			-o match:"unknown" \
 			sh -c ". \"$lib\"; userdata_type"
-- 
2.40.1


From d1ed0c29e35516fcd0c6580205ad7feff4596a6b Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 8 May 2023 12:09:27 +0200
Subject: [PATCH 06/14] Make init__create_default_user return success

We should return success even if /etc/doas.d is missing
fixes https://gitlab.alpinelinux.org/alpine/cloud/tiny-cloud/-/issues/38
---
 lib/tiny-cloud/init   | 14 ++++++++------
 tests/init-early.test | 12 +++++++++++-
 2 files changed, 19 insertions(+), 7 deletions(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index cb80197..d8322eb 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -169,16 +169,18 @@ init__create_default_user() {
         return
     fi
 
-    addgroup "$user"
-    adduser -h "/home/$user" -s /bin/sh -G "$user" -D "$user"
-    addgroup "$user" wheel
-    echo "$user:*" | chpasswd -e
+    $MOCK addgroup "$user"
+    $MOCK adduser -h "/home/$user" -s /bin/sh -G "$user" -D "$user"
+    $MOCK addgroup "$user" wheel
+    echo "$user:*" | $MOCK chpasswd -e
 
     # setup sudo and/or doas
-    [ -d "$ROOT/etc/sudoers.d" ] &&
+    if [ -d "$ROOT/etc/sudoers.d" ]; then
         echo '%wheel ALL=(ALL) NOPASSWD: ALL' > "$ROOT/etc/sudoers.d/wheel"
-    [ -d "$ROOT/etc/doas.d" ] &&
+    fi
+    if [ -d "$ROOT/etc/doas.d" ]; then
         echo 'permit nopass :wheel' > "$TARGET/etc/doas.d/wheel.conf"
+    fi
 }
 
 init__enable_sshd() {
diff --git a/tests/init-early.test b/tests/init-early.test
index 57bb3af..b3b1302 100755
--- a/tests/init-early.test
+++ b/tests/init-early.test
@@ -14,7 +14,8 @@ init_tests \
 	find_first_interface_up \
 	auto_detect_ethernet_interface \
 	set_default_interfaces \
-	enable_sshd
+	enable_sshd \
+	create_default_user
 
 PROVIDERS="aws azure gcp nocloud oci"
 
@@ -109,3 +110,12 @@ enable_sshd_body() {
 			sh -c ". $lib; init__enable_sshd"
 	done
 }
+
+create_default_user_body() {
+	atf_check \
+		-o match:"addgroup alpine" \
+		-o match:"adduser.*alpine" \
+		-o match:"addgroup alpine wheel" \
+		-o match:"chpasswd -e" \
+		sh -c ". $lib; init__create_default_user"
+}
-- 
2.40.1


From dd7cb235158a2ae68ed1bd84a10e5ea04dc4c5de Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 8 May 2023 13:45:58 +0200
Subject: [PATCH 07/14] Make it posible to override the init actions

This makes it easier to run parts of the actions when running tests.
---
 lib/tiny-cloud/init | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index d8322eb..4c46df3 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -10,19 +10,23 @@
 
 ### default phase actions (without leading 'init__')
 
-INIT_ACTIONS_EARLY="
+DEFAULT_ACTIONS_EARLY="
     expand_root
     install_hotplugs
     set_default_interfaces
     create_default_user
     enable_sshd
 "
-INIT_ACTIONS_MAIN="
+DEFAULT_ACTIONS_MAIN="
     save_userdata
     set_hostname
     set_ssh_keys
 "
-INIT_ACTIONS_FINAL=""
+DEFAULT_ACTIONS_FINAL=""
+
+: "${INIT_ACTIONS_EARLY=$DEFAULT_ACTIONS_EARLY}"
+: "${INIT_ACTIONS_MAIN=$DEFAULT_ACTIONS_MAIN}"
+: "${INIT_ACTIONS_FINAL=$DEFAULT_ACTIONS_FINAL}"
 
 # try to ensure existence of output directories, but otherwise don't panic
 [ ! -d "$TINY_CLOUD_LOGS" ] && mkdir -p "$TINY_CLOUD_LOGS" || true
-- 
2.40.1


From 0500f7183769f6f915915e1ca9fa7cc121b0f906 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 8 May 2023 13:47:20 +0200
Subject: [PATCH 08/14] Don't print error on missing /proc/mounts

This is useful for testing
---
 lib/tiny-cloud/init | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index 4c46df3..580ab2d 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -36,8 +36,8 @@ DEFAULT_ACTIONS_FINAL=""
 ### standard init-early functions...
 
 init__expand_root() {
-    local dev=$(awk '$2 == "/" {print $1}' "$ROOT"/proc/mounts)
-    local filesystem=$(awk '$2 == "/" {print $3}' "$ROOT"/proc/mounts)
+    local dev=$(awk '$2 == "/" {print $1}' "$ROOT"/proc/mounts 2>/dev/null)
+    local filesystem=$(awk '$2 == "/" {print $3}' "$ROOT"/proc/mounts 2>/dev/null)
     local partition=$(cat "$ROOT/sys/class/block/${dev#/dev/}/partition" 2>/dev/null)
 
     # only support ext2/ext3/ext4 for now
-- 
2.40.1


From f46b6b24d874c1ddc1587b43527daa9809f95f43 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Thu, 4 May 2023 12:23:07 +0200
Subject: [PATCH 09/14] tests: unify fake_metadata_nocloud and
 fake_userdata_nocloud

Avoid duplication of code.

No changes in behavior
---
 tests/test_env.sh | 23 +++++++++--------------
 1 file changed, 9 insertions(+), 14 deletions(-)

diff --git a/tests/test_env.sh b/tests/test_env.sh
index f197bb8..a040a4f 100644
--- a/tests/test_env.sh
+++ b/tests/test_env.sh
@@ -39,7 +39,8 @@ fake_umount() {
 	EOF
 }
 
-fake_userdata_nocloud() {
+fake_data_nocloud() {
+	local datafile="$1"
 	local file="$(mktemp -p "$PWD")"
 	cat > "$file"
 	fake_bin mount <<-EOF
@@ -48,24 +49,18 @@ fake_userdata_nocloud() {
 		while ! [ -d "\$1" ]; do
 			shift
 		done
-		cp "$file" "\$1"/user-data
+		cp "$file" "\$1"/$datafile
 	EOF
 	mkdir -p mnt
+	fake_umount
 }
 
 fake_metadata_nocloud() {
-	local file="$(mktemp -p "$PWD")"
-	cat > "$file"
-	fake_bin mount <<-EOF
-		#!/bin/sh
-		# find last arg which is the mount dir
-		while ! [ -d "\$1" ]; do
-			shift
-		done
-		cp "$file" "\$1"/meta-data
-	EOF
-	mkdir -p mnt
-	fake_umount
+	fake_data_nocloud meta-data
+}
+
+fake_userdata_nocloud() {
+	fake_data_nocloud user-data
 }
 
 fake_interfaces() {
-- 
2.40.1


From 468407db052458acdc9ba83987ff44699d780cfb Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 8 May 2023 21:54:52 +0200
Subject: [PATCH 10/14] Add test for empty or no config

for all providers
---
 tests/imds.test       | 17 ++----------
 tests/test_env.sh     | 11 ++++++++
 tests/tiny-cloud.test | 64 ++++++++++++++++++++++++++++++++++++++-----
 3 files changed, 71 insertions(+), 21 deletions(-)

diff --git a/tests/imds.test b/tests/imds.test
index 6a54a74..120bb00 100755
--- a/tests/imds.test
+++ b/tests/imds.test
@@ -30,31 +30,20 @@ aws_set_fake_meta() {
 		| tr '/' '_')
 }
 
-aws_create_fake_nc() {
-	fake_bin nc <<-EOF
-		#!/bin/sh
-		input="\$(cat)"
-		case "\$input" in
-			-*) echo "nc: bad input: \$input" >&2; exit 1;;
-		esac
-		echo "token-foo"
-	EOF
-}
-
 imds_aws_hostname_body() {
-	aws_create_fake_nc
+	fake_netcat
 	aws_set_fake_meta hostname myhostname
 	CLOUD=aws atf_check -o match:"myhostname" imds @hostname
 }
 
 imds_aws_local_hostname_body() {
-	aws_create_fake_nc
+	fake_netcat
 	aws_set_fake_meta local-hostname myhostname
 	CLOUD=aws atf_check -o match:"myhostname" imds @local-hostname
 }
 
 imds_aws_ssh_keys_body() {
-	aws_create_fake_nc
+	fake_netcat
 	aws_set_fake_meta public-keys 0=testuser
 	aws_set_fake_meta public-keys/0/openssh-key "ssh-ed25519 keydata"
 
diff --git a/tests/test_env.sh b/tests/test_env.sh
index a040a4f..41d891d 100644
--- a/tests/test_env.sh
+++ b/tests/test_env.sh
@@ -72,3 +72,14 @@ fake_interfaces() {
 		n=$((n+1))
 	done
 }
+
+fake_netcat() {
+	fake_bin nc <<-EOF
+		#!/bin/sh
+		input="\$(cat)"
+		case "\$input" in
+			-*) echo "nc: bad input: \$input" >&2; exit 1;;
+		esac
+		echo "token-foo"
+	EOF
+}
diff --git a/tests/tiny-cloud.test b/tests/tiny-cloud.test
index 93013a2..9e0d4c8 100755
--- a/tests/tiny-cloud.test
+++ b/tests/tiny-cloud.test
@@ -4,16 +4,66 @@
 
 export PREFIX="$srcdir"
 export MOCK=echo
+PROVIDERS="alpine aws azure gcp nocloud oci"
 
 init_tests \
-	tiny_cloud_help
+	tiny_cloud_help \
+	no_metadata_early \
+	no_userdata_main \
+	no_userdata_final
 
 tiny_cloud_help_body() {
-	CLOUD=nocloud atf_check -s not-exit:0 \
-		-e match:"Usage" \
-		tiny-cloud --invalid
+	for provider in $PROVIDERS; do
+		CLOUD="$provider" atf_check -s not-exit:0 \
+			-e match:"Usage" \
+			tiny-cloud --invalid
 
-	CLOUD=nocloud atf_check -s exit:0 \
-		-o match:"Usage" \
-		tiny-cloud --help
+		CLOUD="$provider" atf_check -s exit:0 \
+			-o match:"Usage" \
+			tiny-cloud --help
+	done
+}
+
+no_metadata_early_body() {
+	fake_netcat
+	for provider in $PROVIDERS; do
+		# TODO:	-e not-match:"UNKNOWN" \
+		CLOUD="$provider" atf_check \
+			-e not-match:"not found" \
+			-e not-match:"o such file" \
+			-o match:"rc-update add.*sshd" \
+			tiny-cloud early
+	done
+}
+
+no_userdata_main_body() {
+	fake_netcat
+	for provider in $PROVIDERS; do
+		# we should not set empty hostname
+		# we should not create .ssh dir for non-existing user
+		# TODO:	-e not-match:"UNKNOWN" \
+		CLOUD="$provider" atf_check \
+			-e ignore \
+			-o not-match:"hostname.*-F" \
+			-o not-match:"chown.*/\.ssh" \
+			tiny-cloud main
+		for i in etc/hostname .ssh; do
+			if [ -e "$i" ]; then
+				atf_fail "$i should not have been created"
+			fi
+		done
+	done
+}
+
+no_userdata_final_body() {
+	fake_netcat
+	for provider in $PROVIDERS; do
+		# TODO:	-e not-match:"UNKNOWN" \
+		CLOUD="$provider" atf_check \
+			-e match:"bootstrap_complete .*" \
+			tiny-cloud final
+		CLOUD="$provider" atf_check \
+			-e match:"bootstrap marked.*incomplete" \
+			tiny-cloud --bootstrap incomplete
+	done
 }
-- 
2.40.1


From 7be3b198fbc1b985db5ba16548442d3988a0a377 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 8 May 2023 21:49:53 +0200
Subject: [PATCH 11/14] Avoid set empty hostname

Avaoid situation where we end up with an empty /etc/hostname.
---
 lib/tiny-cloud/init | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index 580ab2d..8fd06ed 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -198,7 +198,16 @@ init__enable_sshd() {
 
 init__set_hostname() {
     local fqdn=$(imds @hostname)
+    if [ -z "$fqdn" ]; then
+        log info "No hostname set"
+        return
+    fi
+
     local host="${fqdn%%\.*}"
+    if [ -z "$host" ]; then
+        log err "$fqdn is not a valid hostname"
+        return 1
+    fi
 
     mkdir -p "$ROOT"/etc
     echo "$host" > "$ROOT"/etc/hostname
-- 
2.40.1


From de66c6049ecd54aca8a438d0d4443e4c3a33edd1 Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Mon, 8 May 2023 21:53:19 +0200
Subject: [PATCH 12/14] Handle error when setting ssh key

Avoid create a /.ssh dir if user does not exist.
---
 lib/tiny-cloud/init | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index 8fd06ed..079d2d4 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -218,6 +218,10 @@ init__set_hostname() {
 init__set_ssh_keys() {
     local user="$CLOUD_USER"
     local pwent="$(getent passwd "$user")"
+    if [ -z "$pwent" ]; then
+        log err "Failed to find user $user"
+        return 1
+    fi
     local group=$(echo "$pwent" | cut -d: -f4)
     local ssh_dir="${ROOT}$(echo "$pwent" | cut -d: -f6)/.ssh"
     local keys_file="$ssh_dir/authorized_keys"
-- 
2.40.1


From 229fc70b42403b6c63d5f1f72db944f8f44fc147 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jake=20Buchholz=20G=C3=B6kt=C3=BCrk?= <tomalok@gmail.com>
Date: Tue, 9 May 2023 04:13:21 +0000
Subject: [PATCH 13/14] add STDERR output for problems with set_hostname

---
 lib/tiny-cloud/init | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index 079d2d4..b9ac6b6 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -199,13 +199,15 @@ init__enable_sshd() {
 init__set_hostname() {
     local fqdn=$(imds @hostname)
     if [ -z "$fqdn" ]; then
+        echo "no hostname set" >&2
         log info "No hostname set"
         return
     fi
 
     local host="${fqdn%%\.*}"
     if [ -z "$host" ]; then
-        log err "$fqdn is not a valid hostname"
+        echo "$hostname is not a valid FQDN" >&2
+        log err "$fqdn is not a valid FQDN"
         return 1
     fi
 
-- 
2.40.1


From 17d0b3d07b9823fd33742e490ea3902e93dc248f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jake=20Buchholz=20G=C3=B6kt=C3=BCrk?= <tomalok@gmail.com>
Date: Tue, 9 May 2023 04:16:15 +0000
Subject: [PATCH 14/14] stderr output for set_ssh_keys failure

---
 lib/tiny-cloud/init | 1 +
 1 file changed, 1 insertion(+)

diff --git a/lib/tiny-cloud/init b/lib/tiny-cloud/init
index b9ac6b6..db5cf84 100644
--- a/lib/tiny-cloud/init
+++ b/lib/tiny-cloud/init
@@ -221,6 +221,7 @@ init__set_ssh_keys() {
     local user="$CLOUD_USER"
     local pwent="$(getent passwd "$user")"
     if [ -z "$pwent" ]; then
+        echo "failed to find $user" >&2
         log err "Failed to find user $user"
         return 1
     fi
-- 
2.40.1


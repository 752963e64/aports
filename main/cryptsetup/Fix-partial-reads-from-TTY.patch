From a8446b05f1f8eec2a99aa86cebd938f94a497bf6 Mon Sep 17 00:00:00 2001
From: Milan Broz <gmazyland@gmail.com>
Date: Sat, 6 Mar 2021 22:37:00 +0100
Subject: [PATCH] Fix partial reads from TTY (interactive terminal).

Some stable kernels started to return buffer from terminal
in partial buffers of maximal size 64 bytes.

This breaks all passphrases longer than 64 characters entered
through interactive input (for all crypto formats).

(The problem is probably fixed in more recent kernels, but
the read() call can always return a partial read here.)

Fixes: #627.
---
 src/utils_password.c | 22 +++++++++++++++++++++-
 tests/compat-test    | 26 ++++++++++++++++++++++++++
 2 files changed, 47 insertions(+), 1 deletion(-)

diff --git a/src/utils_password.c b/src/utils_password.c
index e7197bc9..1702b39b 100644
--- a/src/utils_password.c
+++ b/src/utils_password.c
@@ -100,11 +100,31 @@ static int tools_check_password(const char *password)
 }
 
 /* Password reading helpers */
+
+static ssize_t read_tty_eol(int fd, char *pass, size_t maxlen)
+{
+	bool eol = false;
+	size_t read_size = 0;
+	ssize_t r;
+
+	do {
+		r = read(fd, pass, maxlen - read_size);
+		if (r <= 0)
+			return r;
+		if (pass[r-1] == '\n')
+			eol = true;
+		read_size += (size_t)r;
+		pass = pass + r;
+	} while (!eol && read_size != maxlen);
+
+	return (ssize_t)read_size;
+}
+
 static int untimed_read(int fd, char *pass, size_t maxlen)
 {
 	ssize_t i;
 
-	i = read(fd, pass, maxlen);
+	i = read_tty_eol(fd, pass, maxlen);
 	if (i > 0) {
 		pass[i-1] = '\0';
 		i = 0;
diff --git a/tests/compat-test b/tests/compat-test
index e6a0abf8..63a88630 100755
--- a/tests/compat-test
+++ b/tests/compat-test
@@ -1026,5 +1026,31 @@ EOF
 [ $? -eq 0 ] || fail "Expect script failed."
 $CRYPTSETUP remove $DEV_NAME || fail
 
+prepare "[40] Long passphrase from TTY." wipe
+
+LONG_PWD="ujdk((QK..dfsoi4e0jm(c9RLKEr9340erlftkp030fl;d.lw49:LKO:L0Po3r90efalzsq03rql3ktf"
+echo -n "$LONG_PWD" >$KEYE
+
+expect_run - >/dev/null <<EOF
+proc abort {} { send_error "Timeout. "; exit 2 }
+set timeout 10
+eval spawn $CRYPTSETUP_RAW luksFormat --type luks1 $FAST_PBKDF_OPT -q -v $LOOPDEV
+expect timeout abort "Enter passphrase for $EXPECT_DEV:"
+sleep 0.1
+send "$LONG_PWD\n"
+expect timeout abort "Command successful."
+expect timeout abort eof
+eval spawn $CRYPTSETUP_RAW luksOpen -v $LOOPDEV --test-passphrase
+expect timeout abort "Enter passphrase"
+sleep 0.1
+send "$LONG_PWD\n"
+expect timeout abort "Command successful."
+expect timeout abort eof
+eval spawn $CRYPTSETUP_RAW luksOpen -v $LOOPDEV --test-passphrase --key-file $KEYE
+expect timeout abort "Command successful."
+expect timeout abort eof
+EOF
+[ $? -eq 0 ] || fail "Expect script failed."
+
 remove_mapping
 exit 0
-- 
GitLab

diff --git a/src/utils_password.c b/src/utils_password.c
index d153602..5fb51ae 100644
--- a/src/utils_password.c
+++ b/src/utils_password.c
@@ -21,6 +21,7 @@
 
 #include "cryptsetup.h"
 #include <termios.h>
+#include <stdbool.h>
 
 int opt_force_password = 0;
 

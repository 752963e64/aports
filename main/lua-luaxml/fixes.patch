diff --git a/LuaXML_lib.c b/LuaXML_lib.c
index 18b6960..62a2dc6 100644
--- a/LuaXML_lib.c
+++ b/LuaXML_lib.c
@@ -311,17 +311,7 @@ int Xml_eval(lua_State *L) {
			else return lua_gettop(L);
		}
		// set metatable:
-		lua_newtable(L);
-		lua_pushliteral(L, "__index");
-		lua_getglobal(L, "xml");
-		lua_settable(L, -3);
-
-		lua_pushliteral(L, "__tostring"); // set __tostring metamethod
-		lua_getglobal(L, "xml");
-		lua_pushliteral(L,"str");
-		lua_gettable(L, -2);
-		lua_remove(L, -2);
-		lua_settable(L, -3);
+		luaL_getmetatable(L, "LuaXML.node");
		lua_setmetatable(L, -2);

		// parse tag and content:
@@ -434,6 +424,18 @@ int _EXPORT luaopen_LuaXML_lib (lua_State* L) {
		{NULL, NULL}
	};
	luaL_newlib(L, funcs);
+	luaL_newmetatable(L, "LuaXML.node");
+	lua_pushliteral(L, "__index");
+	lua_pushvalue(L, -3);
+	lua_settable(L, -3);
+	lua_pop(L, 1);
+
+	// store metatable in xml.__metatable, so we can finish setting it up
+	// in LuaXml.lua
+	lua_pushliteral(L, "__metatable");
+	luaL_getmetatable(L, "LuaXML.node");
+	lua_settable(L, -3);
+
	// register default codes:
	if(!sv_code) {
		sv_code=(char**)malloc(sv_code_capacity*sizeof(char*));
diff --git a/LuaXml.lua b/LuaXml.lua
index 7beb11a..2476b68 100644
--- a/LuaXml.lua
+++ b/LuaXml.lua
@@ -8,9 +8,9 @@ xml.TAG = 0
 function xml.tag(var,tag)
	if base.type(var)~="table" then return end
	if base.type(tag)=="nil" then
-		return var[TAG]
+		return var[xml.TAG]
	end
-	var[TAG] = tag
+	var[xml.TAG] = tag
 end

 -- creates a new LuaXML object either by setting the metatable of an existing Lua table or by setting its tag
@@ -21,7 +21,7 @@ function xml.new(arg)
	end
	local var={}
	base.setmetatable(var,{__index=xml, __tostring=xml.str})
-	if base.type(arg)=="string" then var[TAG]=arg end
+	if base.type(arg)=="string" then var[xml.TAG]=arg end
	return var
 end

@@ -75,6 +75,7 @@ function xml.str(var,indent,tagValue)
	end
 end

+xml.__metatable.__tostring = xml.str

 -- saves a Lua var as xml file
 function xml.save(var,filename)

From 087a65cd18aa95cce07944a57874fab35302879f Mon Sep 17 00:00:00 2001
From: Natanael Copa <ncopa@alpinelinux.org>
Date: Wed, 23 Feb 2022 14:59:28 +0000
Subject: [PATCH] add unit test

based on unittest.lua https://github.com/n1tehawk/LuaXML

failing tests was removed.
int underflow test added for malformed attribute
---
 unittest.lua | 96 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 96 insertions(+)
 create mode 100644 unittest.lua

diff --git a/unittest.lua b/unittest.lua
new file mode 100644
index 0000000..a791ee4
--- /dev/null
+++ b/unittest.lua
@@ -0,0 +1,96 @@
+-- unit tests for LuaXML
+
+local xml = require('LuaXml')
+local lu = require('luaunit')
+
+TestXml = {} -- the test suite
+
+function TestXml:test_basics()
+	-- encoding / decoding XML representations
+	lu.assertEquals(xml.encode("<->"), "&lt;-&gt;")
+
+	-- check metatable of newly created object
+	local foobar = xml.new()
+	lu.assertIsTable(foobar)
+	lu.assertEquals(getmetatable(foobar).__index, xml)
+
+	-- simple XML strings
+	lu.assertNil(xml.eval(""))
+	foobar = xml.eval('<foo bar="true" />')
+	lu.assertIsTable(foobar)
+	lu.assertEquals(foobar[0], "foo")
+	lu.assertEquals(foobar.bar, "true")
+
+	-- mimic the append() example from the README
+	foobar = xml.new("root")
+	foobar:append("child")[1] = 123
+	lu.assertEquals(foobar[1]:str(), "<child>123</child>\n")
+
+	-- proper handling of an empty attribute
+	local foo = '<tag attr="" />\n'
+	foobar = xml.eval(foo)
+	lu.assertEquals(foobar.attr, "")
+	lu.assertEquals(foobar:str(), foo)
+
+	-- encoding / decoding of special entities
+	foo = xml.new({"<&>"}, "foo")
+	lu.assertEquals(xml.eval("<foo>&#032;</foo>")[1], " ")
+	lu.assertEquals(xml.eval("<bar>&#32;</bar>")[1], " ")
+	lu.assertEquals(xml.eval("<foobar>&apos;&#9;&apos;</foobar>")[1], "'\t'")
+
+	-- enhanced whitespace handling
+	lu.assertEquals(xml.eval("<foo> </foo>"):str(), "<foo />\n") -- default mode
+	lu.assertEquals(xml.eval("<foo> </foo>", xml.WS_TRIM):str(), "<foo />\n")
+	lu.assertEquals(xml.eval("<foo>\n  <bar/> x\t</foo>", xml.WS_TRIM),
+					{{[0]="bar"}, "x", [0]="foo"})
+
+	-- CDATA
+	lu.assertEquals(xml.eval("<fu><![CDATA[]]></fu>"), {[0] = "fu"})
+	lu.assertEquals(xml.eval("<fu>foo<![CDATA[]]>bar</fu>"),
+		{"foo", "bar", [0] = "fu"})
+	lu.assertEquals(xml.eval("<fu>foo<![CDATA[foobar]]>bar</fu>"),
+		{"foo", "foobar", "bar", [0] = "fu"})
+
+	-- check load error
+	lu.assertErrorMsgContains("file error or file not found",
+		xml.load, "invalid_filename")
+
+	-- safeguard against global namespace pollution
+	lu.assertNil(_G.xml)
+end
+
+function TestXml:test_malformed_attribute()
+	-- malformed XML attribute
+	lu.assertErrorMsgContains("Malformed XML", xml.eval, "<a bad=0></a>")
+	lu.assertErrorMsgContains("Malformed XML", xml.eval, "<a bad=></a>")
+	lu.assertErrorMsgContains("Malformed XML", xml.eval, "<a bad='></a>")
+	lu.assertErrorMsgContains("Malformed XML", xml.eval, '<a bad="></a>')
+end
+
+function TestXml:test_parse()
+	local test = xml.load("test.xml")
+
+	local scene = test:find("scene")
+	lu.assertIsTable(scene)
+	lu.assertEquals(scene:tag(), "scene") -- XML tag
+	lu.assertEquals(scene.id, "0") -- XML property/attribute
+	lu.assertEquals(scene.script, "main")
+
+	-- first (sub)element
+	scene = scene[1]
+	lu.assertIsTable(scene)
+	lu.assertEquals(scene:tag(), "object")
+	lu.assertEquals(scene.name, "observer")
+	lu.assertEquals(scene.id, "0")
+	lu.assertEquals(scene.input, "window")
+	lu.assertEquals(scene.script, "camera.lua")
+
+	-- make sure that the CDATA element from <script> starts with '\n' and
+	-- ends with ' ' (i.e. preserved whitespace)
+	local script_str = test:find("script")[1]
+	lu.assertEquals(script_str:sub(1, 1), '\n')
+	lu.assertEquals(script_str:sub(-1), ' ')
+end
+
+-- run test suite with verbose output
+os.exit(lu.LuaUnit.run("-v"))
-- 
2.35.1

